{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Dojima Network Documentation Overview","text":"The Layer of Dojima Knowledge <p> Welcome to the Dojima Network Documentation! As pioneers in the Web3 space, we're thrilled to guide you through the seamless world of crosschain connectivity.</p> <p>Our documentation is crafted to empower you, whether you're developing innovative applications or diving into blockchain technology for the first time. Here, you'll find everything you need to harness the full potential of Dojima Network. Dive in, explore, and join us in shaping the future of a unified Web3 ecosystem. Your journey towards groundbreaking discoveries starts now!                         </p>                              Get Started  Core <p>Unveiling Dojima Network's essence, highlighting the innovative infrastructure of Hermes and Dojima chains.</p>                              What is Dojima Network?                           Hermes Chain  Developers <p>Your resource hub for seamless onboarding and support within our evolving ecosystem.</p>                              Templates                           Faucet Developer Dashboard Coming Soon Tools <p>Explore our versatile tools section featuring a cross-chain wallet, innovative FAAS solution, and developer dashboard for seamless integration.</p> <p>Dojima Wallet</p> <p>Dojima wallet lets you organise major layer 1 tokens in one place.</p> <p>Dojima FAAS</p> <p>Dojima FAAS offers blockchain services like transaction signing and history viewing.</p> Validator <p>Unlock the path to becoming a valued validator with our comprehensive documentation, empowering you to safeguard the integrity of our blockchain network.</p>"},{"location":"core/","title":"Core Concepts of Dojima Network","text":"Core <p>Unveiling Dojima Network's essence, highlighting the innovative infrastructure of Hermes and Dojima chains.</p> What is Dojima Network? <p>Dojima Network is an omnichain Layer-1 designed to integrate the diverse Web3 ecosystem into a single, unified layer.</p> Dojima Chain <p>Dojima Chain serves as the backbone for developer transactions, facilitating seamless onboarding and efficient execution of all development-related activities on our platform</p> Hermes Chain <p>Hermes Chain powers staking, liquidity pools, and vital ecosystem functions, ensuring robust decentralised finance capabilities for our platform.</p>"},{"location":"core/about-us/","title":"About Us","text":"<p>The term Dojima has its origin in Japan. Dojima was derived from the name of the world\u2019s first derivative exchange in Japan in the 16<sup>th</sup> century and was adopted for the Dojima Network.</p> <p>The Dojima Network was founded by Bhagath Reddy and Akhil Reddy in 2020 following the inherent problems associated with the new web 3 space. While working on a major Ethereum protocol between 2019 and 2020, Bhagath and Akhil were faced with daunting problems with regard to high gas fees and the limitation of only accessing tokens from the Ethereum blockchain. Based on this problem, they observed that all developers on every independent blockchain are limited by the ecosystem of that particular blockchain, thereby leading to non-provision for developers to access the best of all the blockchain platforms, hence the idea and birth of the Dojima Network.</p> <p>Since its inception, the Dojima Network team has been working round the clock to build a robust cross-chain platform to bring in liquidity, Dapps, and users to a common middle ground, thereby eliminating the need to use multiple wallets and blockchains. This has been possible by organizing a team that is capable of building a decentralized product for the crypto space.</p> <p>The Dojima Network founders have built the initial team and designed the architecture and also managed to bring together the initial components required for MVP and demoed it on Arweave Open Web Foundry and subsequently formed a few partnerships. Ever since the team has grown five times from what it used to be in the span of 6 months. But we have not stopped there. The team is continuously acquiring good and suitable talents as per requirement.</p> <p>In 2021, we got incubated by the Arweave Open Web Foundry and we became the finalist. Shortly after that (precisely Q4 2021), we completed our seed round and got funding from the top VCs in the crypto space.</p> <p>Based on requirements and value proposition alongside capital, the Dojima team would consider investors from the non-crypto space. But at the moment we are happy with the investors that are already on board to push this project to fruition.</p> <p>Fast forward to the third quarter of 2022 we are gearing up to launch our testnet in Q3 of 2022. The launch of the testnet will also follow with the release of cross-chain platforms along with a cross-chain wallet and cross-chain applications for testing purposes. During this period, proper documentation would be implemented for deploying and establishing a cross-chain connection on the Dojima network. So, between the period of the testnet and mainnet, a suite of tools will be released for easy onboarding and deployment of Dapps onto the Dojima Network.</p> <p>Also worthy of note is that during this period, our revamped website would be launched in preparation for the testnet and subsequently the mainnet launch in the first half of 2023. The new website will go live in Q3 2022. Do not hesitate to check our new website on https://www.dojima.network and familiarize yourself with it.</p> <p>The aim of dojima network has been stated, the project is in the pipeline, the road map has been set, the team is working and growing, and something unique is coming. Dojima Network will surely be a catalyst in the blockchain and crypto cross-chain infrastructure space.</p> <p>You can keep abreast of all Dojima Network activities prior to the test net and beyond the main net by following us on all our channels below. You are just a click away from reaching us.</p>"},{"location":"core/dojima-chain/","title":"Dojima Chain Overview","text":"<p>\u201cWhat is Dojima Chain?\u201d Dojima Chain is an integral layer of the Dojima Network, specifically tailored for seamless integration of assets, NFTs, and DeFi applications across various blockchains. It stands out for its commitment to security, interoperability, and scalability, powered by a decentralized network of validators.</p> <p>The Dojima Chain offers users the unique capability to interact with major tokens from different blockchains directly on its platform. This feature eliminates the need for users to jump between different chains, as all crosschain assets are readily available on the Dojima Chain. This seamless integration and accessibility streamline the user experience, making Dojima Chain a convenient and efficient platform for managing and transacting with a variety of blockchain assets.</p> <ol> <li>Seamless Interaction with Major Chains: It allows interaction with tokens from all major chains, providing a platform for protocols to engage comprehensively.</li> <li>Simplified Omnichain DApp Development: The platform makes building omnichain DApps more accessible than ever.</li> <li>Broad Connectivity: Developers can connect any chain to their omnichain DApp on the Dojima Chain, enhancing versatility and reach.</li> <li>Formation of an Omnichain Hub: A central hub is being developed on the Dojima Network, further integrating diverse blockchain ecosystems.</li> </ol> <p>\u201cWhy Dojima Chain is an integral part of web3 expansion\u201d</p> <p>As blockchains become increasingly diverse and specialized, the ability to integrate and interact across these varied platforms becomes crucial. Dojima Chain addresses this by providing a unified, omnichain platform that simplifies the interaction between different blockchain ecosystems, making it essential for developers and users seeking to leverage the strengths of multiple chains in a single application. Its features like interoperability, robust validator network, EVM compatibility, the utility of the Dojima Token, and a fair block producer selection process make it an attractive choice for those looking to develop or use decentralized applications. By facilitating seamless integration and operation across various blockchains, the Dojima Chain stands as a key enabler in the evolution of a more interconnected and efficient blockchain environment.</p> <p>The Dojima Chain, as an essential part of the Dojima Network, offers several key features:</p> <ol> <li>Interoperability: By being connected to various blockchain layers, Dojima chain facilitates a unified environment where different blockchain ecosystems can interact seamlessly. This feature is crucial for asset and data integration across multiple platforms.</li> <li>Validator Network: Ensures the security and integrity of transactions within the network. Validators play multiple roles such as block production, transaction validation, and participating in consensus mechanisms, which are vital for maintaining the network\u2019s trustworthiness.</li> <li>EVM Compatibility: Allows developers to deploy and execute smart contracts using popular programming languages like Solidity, making it easier to integrate existing Ethereum-based applications and tools into the Dojima ecosystem.</li> <li>Block Producer Selection: This process is designed to maintain fairness and efficiency in block generation and validation, based on validators\u2019 staked tokens. Block producers are more likely to be elected for block generation based on their stake, with embedded churning and shuffling mechanisms to enhance fairness and security.</li> </ol> <p>These features collectively contribute to making the Dojima Chain a powerful and versatile platform for the development and operation of decentralized applications, especially in the context of a rapidly evolving blockchain and Web3 landscape.</p>"},{"location":"core/hermes-chain/","title":"Omnichain ERC20 Chain","text":""},{"location":"core/hermes-chain/#omnichaintokencontract-suite-documentation","title":"OmniChainTokenContract Suite Documentation","text":""},{"location":"core/hermes-chain/#overview","title":"Overview","text":"<p>The OmniChainTokenContract Suite is an advanced toolkit designed for the Dojima chain, facilitating the seamless transfer and management of tokens across multiple blockchain networks, including Ethereum, Solana, and others.</p>"},{"location":"core/hermes-chain/#components","title":"Components","text":""},{"location":"core/hermes-chain/#omnichaintokencontractacts-as-the-central-hub-within-the-dojima-chain-managing-the-lifecycle-of-cross-chain-tokens","title":"OmniChainTokenContractActs as the central hub within the Dojima chain, managing the lifecycle of cross-chain tokens.","text":""},{"location":"core/hermes-chain/#key-functions","title":"Key Functions:","text":"<p>transferToChain: This function enables the transfer of tokens from the Dojima chain to other blockchains. It involves burning tokens on the Dojima chain and initiating a state sync process to mint corresponding tokens on the target chain.</p> <pre><code>outboundStateSender.transferPayload( destinationChain, destinationContractAddress, msg.sender, abi.encode(user, amount, 0) // TODO: add depositId )\n</code></pre> <p>The transferPayload function in the transferToChain method has the following parameters:</p> <ul> <li><code>destinationChain</code>: The target chain for the cross-chain transfer.</li> <li><code>destinationContractAddress</code>: This is the address of the contract on the target blockchain that will receive and process the payload. It\u2019s usually the address of a smart contract that has a function to handle such incoming payloads.</li> <li><code>msg.sender</code>: This is the address of the entity (usually a user or another contract) that initiated the token transfer on the Dojima chain.</li> <li><code>abi.encode(user, amount, 0)</code>: This is the payload that is being transferred to the target blockchain. It\u2019s encoded using Ethereum\u2019s ABI (Application Binary Interface) encoding. The payload includes:</li> <li><code>user</code>: The address of the user who will receive the tokens on the target blockchain</li> <li><code>amount</code>: The amount of tokens to be transferred.</li> <li><code>0</code>: This is a placeholder for the <code>depositId</code>. It\u2019s currently set to <code>0</code> as indicated by the <code>TODO</code> comment. The <code>depositId</code> could be used to track or identify individual token transfer operations.</li> </ul> <p>onStateReceive: Executed by the <code>_stateVerifier</code> (Dojima system account), this function handles the minting of tokens on the Dojima chain based on the state received from other chains. It decodes the user address, amount, and deposit ID from the received encoded data.</p>"},{"location":"core/hermes-chain/#roles-and-security","title":"Roles and Security:","text":"<p>_stateVerifier Role: A system-controlled account with exclusive rights to mint tokens on the Dojima chain, ensuring security in the token minting process.</p> <p>Security Concerns: Robust error handling and transaction monitoring are essential to maintain integrity in cross-chain communication and prevent unauthorized minting or burning of tokens.</p>"},{"location":"core/hermes-chain/#xtokencontractan-erc20-token-contract-on-the-dojima-chain-foundational-for-the-cross-chain-functionalities","title":"XTokenContractAn ERC20 token contract on the Dojima chain, foundational for the cross-chain functionalities.","text":""},{"location":"core/hermes-chain/#ethereumcrosschaintokencontractmanages-the-lifecycle-of-tokens-on-the-ethereum-network-and-links-with-omnichaintokencontract-through-the-hermes-bridge","title":"EthereumCrossChainTokenContractManages the lifecycle of tokens on the Ethereum network and links with OmniChainTokenContract through the Hermes bridge.","text":""},{"location":"core/hermes-chain/#system-integration","title":"System Integration","text":""},{"location":"core/hermes-chain/#outboundstatesender","title":"OutboundStateSender","text":"<p>Functionality: The <code>OutboundStateSender</code>\u2019s <code>transferPayload</code> function is crucial in cross-chain communication. It transmits the encoded state (user address, token amount, deposit ID) to the Dojima chain\u2019s OmniChainTokenContract.</p> <p>Significance: Ensures the synchronization of token states across chains, triggering corresponding actions (burn or mint) in the connected contracts.</p> <p>Usage in <code>transferToChain</code>:</p> <pre><code> outboundStateSender.transferPayload(\n   destinationChain,\n   destinationContractAddress,\n   msg.sender,\n   abi.encode(user, amount, 0) )\n</code></pre> <p>Info</p> <p>Read More about how to interact with outbound state sender</p> <p>Warning</p> <p>*Note: The <code>outboundStateSender</code> contract is very crucial for the cross chain transfer make sure you follow the steps mentioned in the doc.## Contract Interaction Flow1. **Burning Tokens for Transfer: In <code>transferToChain</code>, tokens are burned on the Dojima chain to initiate cross-chain transfer.2. State Synchronization: The burning triggers a state sync process via the Hermes bridge, sending encoded data to the target chain.3. Minting Tokens on Dojima: In <code>onStateReceive</code>, tokens are minted on the Dojima chain for the specified user, amount, and deposit ID.## Security and Best PracticesAudit Compliance: Ensure all contracts undergo thorough security audits.Transaction Monitoring: Implement systems to monitor and verify cross-chain transactions regularly.Role Management: Strictly manage role assignments, especially for critical roles like <code>_stateVerifier</code>.**Gas Optimization**: Aim for efficiency in contract execution to minimize transaction costs.## ConclusionThe OmniChainTokenContract Suite represents a significant step towards seamless blockchain interoperability, with a focus on security, efficiency, and developer-friendliness. It is crucial for developers to understand the intricacies of the suite to leverage its full potential in their DApp development.</p>"},{"location":"core/what-is-dojima-network/","title":"What is Dojima Network?","text":"<p>Dojima Network is an omnichain Layer-1 designed to integrate the diverse Web3 ecosystem into a single, unified layer that revolutionizes the way decentralized applications (DApps) are developed and utilized across multiple blockchain networks.</p> <p>It introduces a unique architecture composed of two primary components:</p> <ol> <li>DojimaChain: An EVM-compatible blockchain that acts as a middle ground for developers. It enables the easy deployment of complex cross-chain applications, simplifying the development process by supporting commonly used programming languages and tools.</li> <li>Hermes Layer: Built on the Cosmos SDK and Tendermint, this layer connects DojimaChain to various other blockchains, facilitating seamless interaction and liquidity sharing across different ecosystems.</li> </ol> <p>Together, DojimaChain and Hermes Layer empower developers to create versatile, cross-chain applications, overcoming the traditional barriers of isolated blockchain networks. This positions Dojima Network as a catalyst for the expansion and integration of Web3 technologies, appealing to a wide range of users, developers, and investors in the blockchain community.</p> <p>Founded by experts with rich backgrounds in blockchain technology, Dojima Network is backed by significant industry players, reflecting its potential to shape the future of decentralized applications and cross-chain interoperability.</p>"},{"location":"core/architecture/dojimachain/","title":"Dojima Chain","text":""},{"location":"core/architecture/dojimachain/#introduction","title":"Introduction","text":"<p>The Dojima Chain is a critical component of the Dojima Network ecosystem, serving as a foundational layer for the seamless integration of assets, NFTs, and decentralized finance (DeFi) applications from various interconnected blockchains. Designed with security, interoperability, and scalability in mind, the Dojima Chain is powered by a decentralized network of Proof-of-Stake (PoS) validators.</p>"},{"location":"core/architecture/dojimachain/#key-features","title":"Key Features","text":""},{"location":"core/architecture/dojimachain/#1-interoperability","title":"1. Interoperability:","text":"<p>The Dojima Chain is designed to bridge the divide between multiple layer 1 and layer 2 blockchains. It acts as a pivotal middle-ground where assets and data from diverse blockchain ecosystems converge, fostering cross-chain compatibility.</p>"},{"location":"core/architecture/dojimachain/#2-validator-network","title":"2. Validator Network:","text":"<p>Security is paramount, and the Dojima Chain relies on a network of validators to ensure the integrity and trustworthiness of transactions and data. Validators within the Dojima Network ecosystem play multifaceted roles, including running full nodes, block production, transaction validation, consensus participation, relayer and oracle services, and checkpoint commitment.</p>"},{"location":"core/architecture/dojimachain/#3-ethereum-virtual-machine-evm-compatibility","title":"3. Ethereum Virtual Machine (EVM) Compatibility:","text":"<p>The Dojima Chain seamlessly integrates with the Ethereum Virtual Machine (EVM), enabling developers to deploy and execute smart contracts using familiar languages such as Solidity. This compatibility empowers developers to leverage existing Ethereum-based applications and tools within the Dojima ecosystem.</p>"},{"location":"core/architecture/dojimachain/#4-dojima-token-doj","title":"4. Dojima Token (DOJ):","text":"<p>Transactions within the Dojima Chain are facilitated using the native token, Dojima (DOJ). DOJ operates both as an ERC-20 token and as the native token for the Dojima network. This dual functionality allows users to pay gas fees, participate in staking, and transfer value within the ecosystem.</p>"},{"location":"core/architecture/dojimachain/#5-block-producer-selection","title":"5. Block Producer Selection:","text":"<p>The Dojima Chain employs a committee of Block Producers, selected from the validator pool, to ensure efficient block generation and validation. The selection process is based on the validators\u2019 staked tokens, with regular shuffling to maintain fairness and security.</p>"},{"location":"core/architecture/dojimachain/#block-producer-selection-process","title":"Block Producer Selection Process","text":"<p>The Block Producer selection process in the Dojima Chain is designed to ensure fairness and security. Here\u2019s a simplified example of how it works:</p> <p>Imagine a validator pool with 4 validators: Validator1, Validator2, Validator3, and Validator4. Each validator has staked a different amount of DOJ tokens. Validator1 has staked 200 DOJ tokens, Validator2 has staked 150 DOJ tokens, Validator3 has staked 100 DOJ tokens, and Validator4 has staked 50 DOJ tokens.</p> <p>Validators are assigned slots proportionally to their stake. The total number of slots allocated is 10. Here\u2019s the distribution of slots:</p> <ul> <li>Validator1: 4 slots</li> <li>Validator2: 3 slots</li> <li>Validator3: 2 slots</li> <li>Validator4: 1 slot</li> </ul> <p>Now, let\u2019s shuffle the slots using a random seed. After shuffling, we get the following sequence: [Validator3, Validator1, Validator2, Validator2, Validator4, Validator1, Validator3, Validator1, Validator2, Validator3].</p> <p>Next, based on the number of producers to be selected (let\u2019s say we need to select 3 producers), we pick validators from the top of the shuffled list. In this case, the producer set for the next span is defined as:</p> <ul> <li>Producer1: Validator3</li> <li>Producer2: Validator1</li> <li>Producer3: Validator2</li> </ul> <p>These selected validators will take on the role of Block Producers for the next span in the DojimaChain network. This illustrates the producer selection process in the DojimaChain ecosystem.</p>"},{"location":"core/architecture/dojimachain/#system-call-interface","title":"System Call Interface","text":"<p>Within the Dojima Chain\u2019s EVM, the System Call Interface plays a vital role. It serves as an internal operator address, enabling the maintenance of Block Producer states at specified block intervals. System Calls trigger requests for updated Block Producer lists, ensuring the network\u2019s smooth operation.</p>"},{"location":"core/architecture/dojimachain/#state-syncing","title":"State Syncing","text":"<p>The Dojima Chain maintains synchronization with different blockchains through the Hermes Chain. This synchronization process ensures that state data from various native chains is securely integrated into the Dojima ecosystem. Validators validate the data using a Threshold Signature Scheme before it is stored in the Hermes Chain.</p>"},{"location":"core/architecture/dojimachain/#conclusion","title":"Conclusion","text":"<p>The Dojima Chain is at the core of the Dojima Network\u2019s mission to provide developers with a powerful, secure, and interoperable platform for building cross-chain applications. With EVM compatibility, robust validator networks, and advanced features, it stands as a key element in the evolution of the blockchain and Web3 space.</p>"},{"location":"core/architecture/hermeschain/","title":"Hermes Chain","text":""},{"location":"core/architecture/hermeschain/#hermes-layer","title":"Hermes Layer","text":"<p>The Hermes layer is a vital component within the Dojima Network\u2019s multi-layer architecture, playing a crucial role in ensuring seamless cross-chain interoperability and efficient liquidity management. Its primary responsibilities include managing native token liquidity from all blockchains, overseeing staking and rewards management for liquidity providers.  It ensures the proper functioning of validators, enforces slashing mechanisms for network security, collects transaction fees, and, most importantly, offers developers universal access to cross-chain liquidity.  This layer plays a pivotal role in enabling seamless interoperability and efficient liquidity management across the Dojima Network.</p> <p></p> <p>Main modules inside Hermes Chain are:  - Narada  - Threshold signature scheme  - Fortunas  - Sors</p>"},{"location":"core/architecture/hermeschain/#narada","title":"Narada","text":"<p>Narada functions as a central hub connecting clients to the Hermes chain. Its primary responsibility is to monitor blockchain  events i.e. swapping of Arweave -&gt; Ethereum, Arweave -&gt; Dojima and other custom messages. It also transforms these events into Hermes layer-compatible messages and relays them to the hermes layer.</p> <ul> <li> <p>Chain clients </p> <p>Chain clients are responsible for reading events from their respective blockchains. Client will listen to hermes wallet address transactions as destination/target address.   Currently supported chain clients are Arweave, Bitcoin, Binance, Cosmos, Ethereum, Solana, Polkadot.</p> </li> <li> <p>Observer</p> <p>Observer is responsible for transforming and transmitting observed events to the hermes layer.</p> </li> <li> <p>Signer</p> <p>Signer is responsible for signing transactions onto the destination chain that received from the Hermes chain.</p> </li> </ul>"},{"location":"core/architecture/hermeschain/#threshold-signature-scheme-tss","title":"Threshold signature scheme ( TSS )","text":"<p>Threshold signature scheme is responsible for securing the liquidity which is being held in the Hermes chain. Liquidity is holded by fortunas vaults. Dojima has written many articles on tss, please checkout https://medium.com/@dojimanetwork for more on tss. Each chain supports certains signature mechanism for signing wallet transactions like <code>secp256k1</code> curve of <code>ECDSA</code> algorithm for <code>Ethereum</code>, <code>Binance</code>, <code>Cosmos</code>, <code>Binance</code> and <code>RSA</code> for <code>Arweave</code> and <code>ed25519</code> for <code>Solana</code>, <code>Polkadot</code>. Currently, dojima has support for <code>ecdsa</code>, <code>rsa</code>, <code>ed25519</code> signature algorithms.</p>"},{"location":"core/architecture/hermeschain/#fortunas","title":"Fortunas","text":"<p>Fortunas are responsible for holding liquidity of multiple tokens at single place which are generated by dojima tss. Security of liquidity depends on the number of validators managed by tss. When swapping of tokens are involved ( Binance -&gt; Arweave), \u2154 of validators will sign to release the desired token amount on the destination chain requested for swap received from the hermes chain. Since tss is a slow process, for small swap amounts is a drawback. To overcome this, Sors is introduced.</p>"},{"location":"core/architecture/hermeschain/#sors","title":"Sors","text":"<p>Sors are responsible for sending small amounts of requested swap tokens onto the destination chain. Each validator can be a sors. Validator will be assigned 25% of total amount supported tokens based on validator staked amount.</p>"},{"location":"core/architecture/overview/","title":"Overview","text":""},{"location":"core/architecture/overview/#dojima-architecture","title":"Dojima Architecture","text":"<p> Dojima Network is built on a multi-layer architecture comprising two blockchains that collaboratively interact with other blockchains. This design enables liquidity access and serves as a cross-chain development platform for creating cross-chain applications. These layers include the Hermes layer and the DojimaChain.</p> <ul> <li> <p>The Hermes layer is built on top of the Cosmos SDK and tendermint. It is the buffer layer that is connected to various independent blockchains.</p> </li> <li> <p>DojimaChain operates as the intermediate layer where developers deploy applications and access the Hermes layer to establish connections with all chains.</p> </li> </ul> <p>In simple terms, we will create a buffer layer on top of Cosmos SDK and Tendermint, establishing connections with major blockchains while maintaining liquidity pools for the Dojima native token(DOJ) and other tokens of prominent blockchain platforms. Liquidity data will be available and verified by all validators at the end of each block and supplied to contracts on the intermediate layer, Dojima chain. This data can be accessed by smart contracts developed by cross-chain DApp creators.</p> <p>Some of the features that Dojima Network offers include:</p> <ol> <li> <p>Universal Liquidity Access: This enables developers to access the liquidity of all blockchains directly from their protocols.</p> </li> <li> <p>Cross-Chain Execution and Transfer: This enables users to execute contract code on multiple platforms and also enables cross-chain data transfer to communicate with custom smart contracts.</p> </li> <li> <p>Cross-Chain Liquidity Pools: This feature enables developers and users to access cross-chain liquidity pools for executing various custom cross-chain actions</p> </li> </ol>"},{"location":"core/architecture/contracts/inbound_state_sender/","title":"Inbound State Sender Contract","text":""},{"location":"core/architecture/contracts/inbound_state_sender/#the-inbound-state-sender-contract","title":"The Inbound State Sender Contract","text":"<p>The Inbound State Sender Contract is a specialized smart contract. Its primary function is to assist developers of decentralized applications (dApps) in transmitting state updates from the source chain to the Dojima Chain. This contract operates on the source chain, enabling transactions to be carried out from the source chain to the Dojima Chain.</p> <p>To utilize the State Sender Contract, follow these straightforward steps:</p>"},{"location":"core/architecture/contracts/inbound_state_sender/#step-1-copy-the-inbound-state-sender-contract-interface-from-github","title":"Step 1: Copy the Inbound State Sender Contract interface from GitHub","text":"<ul> <li>Get the Inbound State Sender Contract Interface from the GitHub repository here.</li> <li>Copy the contract interface into its corresponding folder, typically located in, \u2019. /interfaces/\u2019 or as per your project structure.</li> </ul>"},{"location":"core/architecture/contracts/inbound_state_sender/#step-2-obtain-the-inbound-state-sender-contract-address","title":"Step 2: Obtain the Inbound State Sender Contract Address","text":"<ul> <li>Retrieve the Inbound State Sender Contract address from the Dojima Chain Explorer.</li> </ul> <p>\u26a0\ufe0f Warning: The Inbound State Sender Contract address may vary for different chains. Ensure that you select the appropriate chain i.e. (Ethereum, Avalanche) and the appropriate network i.e. (mainnet or testnet).</p>"},{"location":"core/architecture/contracts/inbound_state_sender/#step-3-register-the-destination-contract","title":"Step 3: Register the Destination Contract","text":"<p>Before you can send state transaction to the Dojima Chain, you need to register the destination contract. This is done using the <code>register</code> function in the State Sender Contract. This function takes two parameters:</p> <ul> <li><code>sender</code>: This is the address of the contract that is sending the state update. In most cases, this will be the address of your contract.</li> <li><code>receiver</code>: This is the address of the contract that will receive the state update. This is what we call the destination contract.</li> </ul> <p>Warning</p> <p>NOTE: The registration process involves certain steps that need to be followed on the Dojima Chain Block Explorer. These steps will be added later.</p>"},{"location":"core/architecture/contracts/inbound_state_sender/#step-4-call-the-transferpayload-function","title":"Step 4: Call the transferPayload function","text":"<ul> <li> <p>After registering the destination contract, you can now send state updates to it. This is done using the <code>transferPayload</code> function in the State Sender Contract. This function takes two parameters:</p> </li> <li> <p><code>destinationContract</code>: This is the address of the contract that will receive the state update. This is what we call the destination contract.</p> </li> <li><code>payload</code>: This is the ABI-encoded contract call that you want to send to the destination contract.</li> </ul> <p>Warning</p> <p>DISCLAIMER:Below provided code example is for educational purposes only. It is not intended for use in a production environment or with real assets. Please exercise caution and ensure proper testing and validation of your code before deploying it in a production environment.</p> <pre><code>// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.19;\n\n// Import the interface from the GitHub repository\nimport { IInboundStateSender } from './interfaces/IInboundStateSender.sol';\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ncontract App {\n    // Declare a variable to hold the address of the StateSender contract\n    address public stateSender;\n    uint256 public maxErc20Amount = 100 * (10**18);\n    IInboundStateSender public stateSender;\n    // Destination chain contract address (Polygon, Avalanche, etc.)\n    address public destinationContract;\n\n    constructor(address _stateSender, address _destContract) {\n        // Create an instance of the IStateSender interface using the StateSender address\n        stateSender = IInboundStateSender(_stateSender);\n        require(_destContract != address(0), \"Invalid destination contract address\");\n        destinationContract = _destContract;\n    }\n\n    function depositERC20(\n        address _token,\n        uint256 _amount\n    ) public {\n        require(_amount &lt;= maxErc20Amount, \"exceed maximum deposit amount\");\n        require(IERC20(_token).transferFrom(msg.sender, address(this), _amount), \"TOKEN_TRANSFER_FAILED\");\n\n        // Call the transferPayload function\n        stateSender.transferPayload(\n          destinationContract, abi.encode(msg.sender, _token, _amount)\n        );\n    }\n}\n</code></pre>"},{"location":"core/architecture/contracts/inbound_state_sender/#step-5-event-emitted-by-the-state-sender-contract-tokentransferwithpayload","title":"Step 5: Event emitted by the State Sender Contract TokenTransferWithPayload","text":"<ul> <li>Once the State Sender Contract executes the transferPayload function, it emits an event called DataTransfer. This event plays a vital role in the interaction with Narada.</li> <li>The DataTransfer event furnishes essential information in its parameters:</li> <li>depositID - This identifier uniquely identifies deposits on the Dojima chain. It is relevant only when the destinationChain is Dojima.</li> <li>destinationContract - It signifies the target contract to which the tokens and payload are delivered.</li> <li>payload - This field holds the ABI-encoded contract call that was transmitted.</li> </ul>"},{"location":"core/architecture/contracts/outbound_state_sender/","title":"Outbound State Sender Contract","text":""},{"location":"core/architecture/contracts/outbound_state_sender/#the-outbound-state-sender-contract","title":"The Outbound State Sender Contract","text":"<p>The Outbound State Sender Contract is a specialized smart contract.  Its primary function is to assist developers of decentralized applications (dApps) in transmitting state updates and asset transfer from the Dojima Chain to the destination chain. This contract operates on the dojima chain, enabling transactions to be carried out from the Dojima Chain to the destination chain.</p> <p>To utilize the State Sender Contract, follow these straightforward steps:</p>"},{"location":"core/architecture/contracts/outbound_state_sender/#step-1-copy-the-inbound-state-sender-contract-interface-from-github","title":"Step 1: Copy the Inbound State Sender Contract interface from GitHub","text":"<ul> <li>Get the Outbound State Sender Contract Interface from the GitHub repository here.</li> <li>Copy the contract interface into its corresponding folder, typically located in, \u2019. /interfaces/\u2019 or as per your project structure.</li> </ul>"},{"location":"core/architecture/contracts/outbound_state_sender/#step-2-obtain-the-outbound-state-sender-contract-address","title":"Step 2: Obtain the Outbound State Sender Contract Address","text":"<ul> <li>Retrieve the Outbound State Sender Contract address from the Dojima Chain Explorer.</li> </ul>"},{"location":"core/architecture/contracts/outbound_state_sender/#step-3-register-the-destination-contract-destination-asset-and-destination-chain","title":"Step 3: Register the Destination Contract, Destination Asset and Destination Chain","text":"<p>Before you can send a state transaction or asset transaction to the destination chain, you need to make sure that everything is registered.</p> <ul> <li>To use transferPayload function, you need to make sure that the following things are registered:</li> <li>Destination Contract: This is the address of the contract that will receive the state update.</li> <li>Destination Chain: This is the name chain that will receive the state update. </li> <li>Steps to register destination address and chain: </li> </ul> <p>Warning</p> <p>NOTE: The registration process involves certain steps that need to be followed on the Dojima Chain Block Explorer.</p> <ul> <li>To use transferAsset function, you need to make sure that the following things are registered:</li> <li>Destination Address: This is the address of the user that will receive the transferred asset.</li> <li>Destination Asset: This is the address of the asset that will be transferred to the destination chain.</li> <li>Destination Chain: This is the name chain that will receive the asset update. </li> <li>Steps to register destination address, asset and chain:</li> </ul> <p>Warning</p> <p>NOTE: The registration process involves certain steps that need to be followed on the Dojima Chain Block Explorer. These steps will be added later.</p>"},{"location":"core/architecture/contracts/outbound_state_sender/#step-4-calling-the-functions-to-transfer-payload-and-asset","title":"Step 4: Calling the functions to transfer payload and asset","text":"<ul> <li>Once you have registered all the details, you can now send state updates or transfer asset to the destination chain. This is done using the <code>transferPayload</code> and <code>transferAsset</code> functions in the Outbound State Sender Contract.</li> <li>Fees for both function calls will be deducted from the caller\u2019s (in this case contract) account in the form of Dojima tokens. The caller needs to make sure that they have enough Dojima tokens in their account to pay the fees.</li> <li><code>Transfer Payload</code> function takes four parameters:</li> <li>Destination Chain: This is the name of the destination chain in <code>bytes32</code> format, that will receive the state update.</li> <li>Destination Contract: This is the address of the contract in <code>bytes</code> format, that will receive the state update on a destination chain.</li> <li>Refund Address : This is the address of the user in <code>ETH address format</code> that will receive the refund if the transaction fails.</li> <li> <p>Payload: This is the <code>abi encoded</code> contract call that in <code>bytes format</code> you want to send to the destination contract.</p> <ul> <li>Note: The payload should be encoded as per the destination contract function.</li> </ul> </li> <li> <p><code>Transfer Asset</code> function takes five parameters:</p> </li> <li>Destination Chain: This is the name of the destination chain in <code>bytes32</code> format, that will receive the asset.</li> <li>Destination Address: This is the address of the user in <code>bytes</code> format, that will receive the asset on destination chain.</li> <li>Refund Address : This is the address of the user in <code>ETH address format</code> that will receive the refund if the transaction fails.</li> <li>Destination Asset: This is the address of the asset in <code>bytes</code> format that will be transferred to the destination chain.</li> <li>Asset Amount: This is the amount of asset in <code>uint256</code> format that will be transferred to the destination chain.</li> </ul> <p>Warning</p> <p>DISCLAIMER:Below provided code examples is for educational purposes only. It is not intended for use in a production environment or with real assets. Please exercise caution and ensure proper testing and validation of your code before deploying it in a production environment.</p> <ul> <li>Example for how to use <code>transferPayload</code> function in contract-based chains:</li> </ul> <p><pre><code>// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.19;\n\n// Import the interface from the GitHub repository\nimport {IOutboundStateSender} from './interfaces/IOutboundStateSender.sol';\nimport {IERC20Burnable} from \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\";\n\ncontract ChildChain {\n\n  // mapping for (withdraw ID =&gt; true/false)\n  mapping(uint256 =&gt; bool) public withdraws;\n\n  // outbound state sender contract\n  IOutboundStateSender public outboundStateSender;\n\n  constructor(address _outboundStateSender) {\n    require(_outboundStateSender != address(0x0), 'Child Chain: Invalid OutboundStateSender address');\n\n    // Create an instance of the IOutboundStateSender interface using the OutboundStateSender address\n    outboundStateSender = IOutboundStateSender(_outboundStateSender);\n  }\n  /*\n   * @notice withdrawTokens\n   * @dev: amountOrTokenId: tokenId for ERC721 and amount for ERC20\n   * @param user address for deposit\n   * @param rootToken root token address\n   * @param withdrawId\n   */\n  function withdrawTokens(\n    address rootToken,\n    address user,\n    uint256 amountOrTokenId,\n    uint256 withdrawId,\n    bytes32 destinationChain,\n    bytes memory destinationContract\n  ) public onlyOwner {\n    // check if withdrawal happens only once\n    require(withdraws[withdrawId] == false, 'Child Chain: already withdrawal for the given Id');\n\n    // set withdrawal flag\n    withdraws[withdrawId] = true;\n\n    // Create an instance of the ERC20Burnable contract\n    IERC20Burnable erc20Token = IERC20Burnable(rootToken);\n\n    // Burn the tokens from the user's account\n    erc20Token.burn(amountOrTokenId);\n\n    outboundStateSender.transferPayload(\n      destinationChain,\n      destinationContract,\n      user,\n      abi.encode(rootToken, user, amountOrTokenId, withdrawId)\n    );\n  }\n}\n</code></pre> * Example for how to use <code>transferAsset</code> function in account-based chains: <pre><code>// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.19;\n// Import the interface from the GitHub repository\nimport {IOutboundStateSender} from './interfaces/IOutboundStateSender.sol';\nimport {IERC20Burnable} from \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\";\n\ncontract ChildChain {\n  // mapping for (withdraw ID =&gt; true/false)\n  mapping(uint256 =&gt; bool) public withdraws;\n\n  // outbound state sender contract\n  IOutboundStateSender public outboundStateSender;\n\n  constructor(address _outboundStateSender) {\n    require(_outboundStateSender != address(0x0), 'Child Chain: Invalid OutboundStateSender address');\n\n    // Create an instance of the IOutboundStateSender interface using the OutboundStateSender address\n    outboundStateSender = IOutboundStateSender(_outboundStateSender);\n  }\n  /*\n   * @notice withdrawTokens\n   * @dev: amountOrTokenId: tokenId for ERC721 and amount for ERC20\n   * @param user address for deposit\n   * @param rootToken root token address\n   * @param withdrawId\n   */\n  function withdrawTokens(\n    bytes memory rootToken,\n    address user,\n    uint256 amountOrTokenId,\n    uint256 withdrawId,\n    bytes32 destinationChain,\n    bytes memory destinationAddress,\n    bytes memory destinationAsset\n  ) public onlyOwner {\n    // check if withdrawal happens only once\n    require(withdraws[withdrawId] == false, 'Child Chain: already withdrawal for the given Id');\n\n    // set withdrawal flag\n    withdraws[withdrawId] = true;\n\n      // Create an instance of the ERC20Burnable contract\n      IERC20Burnable erc20Token = IERC20Burnable(address(rootToken));\n\n      // Burn the tokens from the user's account\n      erc20Token.burn(amountOrTokenId);\n\n      outboundStateSender.transferAsset(\n        destinationChain,\n        destinationAddress,\n        user,\n        destinationAsset,\n        amountOrTokenId\n      );\n  }\n}\n</code></pre></p>"},{"location":"core/chain-clients/evm/client/","title":"EVM Client for Dojima Network","text":""},{"location":"core/chain-clients/evm/client/#introduction","title":"Introduction","text":"<p>The EVM (Ethereum Virtual Machine) client is a crucial component designed to facilitate interactions between EVM-compatible chains and the Dojima chain. It is responsible for processing transactions initiated by users and forwarding them to the Dojima chain. Additionally, it receives state updates from the Dojima chain and relays them to the destination chain.  The EVM client is particularly useful for handling all interactions that occur on EVM-related chains, such as transactions from AVAX C-chain to Dojima or vice versa.  </p>"},{"location":"core/chain-clients/evm/client/#architecture","title":"Architecture","text":"<p>The EVM client is composed of two main services:   - Listener service  - Parser service.  </p>"},{"location":"core/chain-clients/evm/client/#listener-service","title":"Listener Service","text":"<p>The Listener service is responsible for monitoring all events emitted by EVM-related contracts, including the State Sender contract, Outbound State Sender contract, and Router contract. It filters out the relevant events and forwards them to the Parser service for further processing.  </p>"},{"location":"core/chain-clients/evm/client/#parser-service","title":"Parser Service","text":"<p>The Parser service takes the events forwarded by the Listener service, parses these events, and sends them in batches to the Observer. The Observer then processes these batches further.  This architecture allows the EVM client to efficiently handle a large volume of transactions and state updates, ensuring that all relevant data is accurately relayed between the source chain, the Dojima chain, and the destination chain.</p>"},{"location":"core/chain-clients/evm/client/#usage","title":"Usage","text":"<p>To use the EVM client, you need to initiate a transaction or a state update on an EVM-compatible chain. The Listener service of the EVM client will automatically detect the event emitted by the transaction or state update. It will filter out the relevant events and forward them to the Parser service.  The Parser service will then parse these events and send them in batches to the Observer. The Observer will process these batches and update the state of the Dojima chain or the destination chain accordingly.  By using the EVM client, you can ensure that all interactions between EVM-compatible chains and the Dojima chain are handled efficiently and accurately.</p>"},{"location":"core/chain-clients/evm/hermes-bridge/","title":"Hermes Bridge in Dojima Network","text":""},{"location":"core/chain-clients/evm/hermes-bridge/#introduction","title":"Introduction","text":"<p>The Hermes chain is a Cosmos-based blockchain responsible for connecting the Dojima chain to other chains, both EVM (Ethereum Virtual Machine) and non-EVM chains. Within Hermes, there are three distinct modules   Narada the Hermes and the DojimaChain module.</p> <p>Narada serves as a hub for clients connected to the Hermes chain. Its primary role is to monitor all events and convert them into a format suitable for transmission to the Hermes chain. After observing transactions, Narada relays them to the Hermes chain.</p> <p>The Hermes module functions as a storage system for the Dojima chain. It stores transactions sent by Narada, ensuring they are readily accessible when needed.</p> <p>The DojimaChain module acts as a client of the Dojima chain, facilitating interactions between the Dojima chain and the Hermes chain.</p> <pre><code>type Tx struct {\n  ID          TxID    `protobuf:\"bytes,1,opt,name=id,proto3,casttype=TxID\" json:\"id,omitempty\"`\n  Chain       Chain   `protobuf:\"bytes,2,opt,name=chain,proto3,casttype=Chain\" json:\"chain,omitempty\"`\n  FromAddress Address `protobuf:\"bytes,3,opt,name=from_address,json=fromAddress,proto3,casttype=Address\" json:\"from_address,omitempty\"`\n  ToAddress   Address `protobuf:\"bytes,4,opt,name=to_address,json=toAddress,proto3,casttype=Address\" json:\"to_address,omitempty\"`\n  Coins       Coins   `protobuf:\"bytes,5,rep,name=coins,proto3,castrepeated=Coins\" json:\"coins\"`\n  Gas         Gas     `protobuf:\"bytes,6,rep,name=gas,proto3,castrepeated=Gas\" json:\"gas\"`\n  Memo        string  `protobuf:\"bytes,7,opt,name=memo,proto3\" json:\"memo,omitempty\"`\n  Payload     []byte  `protobuf:\"bytes,8,opt,name=payload,proto3\" json:\"payload,omitempty\"`\n}\n\n// Transaction ID is a unique identifier for a transaction\ntype TxID string\n\n// Chain is an alias of string , represent a blockchain name\ntype Chain string\n\ntype Address string\n\ntype Coin struct {\n  Asset    Asset                                   `protobuf:\"bytes,1,opt,name=asset,proto3\" json:\"asset\"`\n  Amount   github_com_cosmos_cosmos_sdk_types.Uint `protobuf:\"bytes,2,opt,name=amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Uint\" json:\"amount\"`\n  Decimals int64                                   `protobuf:\"varint,3,opt,name=decimals,proto3\" json:\"decimals,omitempty\"`\n}\n\ntype Asset struct {\n  Chain  Chain  `protobuf:\"bytes,1,opt,name=chain,proto3,casttype=Chain\" json:\"chain,omitempty\"`\n  Symbol Symbol `protobuf:\"bytes,2,opt,name=symbol,proto3,casttype=Symbol\" json:\"symbol,omitempty\"`\n  Ticker Ticker `protobuf:\"bytes,3,opt,name=ticker,proto3,casttype=Ticker\" json:\"ticker,omitempty\"`\n  Synth  bool   `protobuf:\"varint,4,opt,name=synth,proto3\" json:\"synth,omitempty\"`\n}\n\n// Symbol represent an asset\ntype Symbol string\n\n// Ticker The trading 'symbol' or shortened name (typically in capital letters)\n// that refer to a coin on a trading platform. For example: BNB\ntype Ticker string\n</code></pre>"},{"location":"core/chain-clients/evm/hermes-bridge/#narada","title":"Narada","text":"<p>Narada\u2019s operations can be summarized in the following steps:</p> <ul> <li>Narada observes the events emitted by the State Sender Contract. The State Sender Contract is a contract that is deployed on the Ethereum chain.</li> <li>The State Sender Contract generates an event known as TokenTransfer, containing transaction information destined for the Dojima chain.</li> <li>Narada captures and transforms the TokenTransfer event into a common format referred to as XMsgObservedTx, which is compatible with the Hermes chain.</li> </ul> <pre><code>type XMsgObservedTx struct {\n  Tx             Tx         `protobuf:\"bytes,1,opt,name=tx,proto3\" json:\"tx\"`\n  Status         Status    `protobuf:\"varint,2,opt,name=status,proto3,enum=types.Status\" json:\"status,omitempty\"`\n  BlockHeight    int64     `protobuf:\"varint,3,opt,name=block_height,json=blockHeight,proto3\" json:\"block_height,omitempty\"`\n  Signers        []string  `protobuf:\"bytes,4,rep,name=signers,proto3\" json:\"signers,omitempty\"`\n  KeysignMs      int64     `protobuf:\"varint,5,opt,name=keysign_ms,json=keysignMs,proto3\" json:\"keysign_ms,omitempty\"`\n  FinaliseHeight int64     `protobuf:\"varint,6,opt,name=finalise_height,json=finaliseHeight,proto3\" json:\"finalise_height,omitempty\"`\n}\n</code></pre>"},{"location":"core/chain-clients/evm/hermes-bridge/#hermes","title":"Hermes","text":"<p>The Hermes module is responsible for validating and storing transactions sent by Narada. It operates with its set of validators responsible for transaction validation. These validators are chosen through the Tendermint consensus algorithm. Once a sufficient number of validators approve a transaction, its data is validated. Subsequently, based on memo data, transaction data is converted into the Hermes chain message format.</p> <p>For Ethereum chain State Sender Contract events, event data is converted into the following format:</p> <pre><code>type MsgEVMTransferNative struct {\n  Txn                  Tx                                      `protobuf:\"bytes,1,opt,name=tx,proto3\" json:\"tx\"`\n  Signer              github_com_cosmos_cosmos_sdk_types.AccAddress  `protobuf:\"bytes,2,opt,name=signer,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress\" json:\"signer,omitempty\"`\n  DestinationContract github_com_dojimanetwork_hermes_common.Address `protobuf:\"bytes,3,opt,name=destination_contract,json=destinationContract,proto3,casttype=github.com/dojimanetwork/hermes/common.Address\" json:\"destination_contract,omitempty\"`\n  DepositId           uint64                                         `protobuf:\"varint,4,opt,name=depositId,proto3\" json:\"depositId,omitempty\"`\n}\n</code></pre> <p>The MsgEVMTransferNative format is stored within the Hermes chain and later converted into the DojimaInput format, which is used by the Dojima chain. <pre><code>type DojimaInput struct {\n  ID           uint64                                              `protobuf:\"varint,1,opt,name=id,proto3\" json:\"id,omitempty\"`\n  Contract     github_com_dojimanetwork_dojimachain_common.Address `protobuf:\"bytes,2,opt,name=contract,proto3,casttype=github.com/dojimanetwork/dojimachain/common.Address\" json:\"contract\"`\n  Data         []byte                                              `protobuf:\"bytes,3,opt,name=data,proto3\" json:\"data,omitempty\"`\n  TxHash       string                                              `protobuf:\"bytes,4,opt,name=txHash,proto3\" json:\"txHash,omitempty\"`\n  ObservedTime time.Time                                           `protobuf:\"bytes,5,opt,name=observedTime,proto3,stdtime\" json:\"observedTime\"`\n  ChainID      string                                              `protobuf:\"bytes,6,opt,name=chain_id,json=chainId,proto3\" json:\"chain_id,omitempty\"`\n}\n\nfunc (h EvmTransferNativeHandler) handleV89(ctx cosmos.Context, msg *MsgEVMTransferNative) (*cosmos.Result, error) {\n  ctx.Logger().Info(\"message evm transfer\", \"received message\", msg)\n\n  ctx.Logger().Debug(\"\u2705 Validating EvmTransferNative msg\",\n    \"Id\", msg.Tx.ID,\n    \"Destination Contract\", msg.DestinationContract,\n    \"Chain\", msg.Tx.Chain,\n    \"Deposit Id\", msg.DepositId,\n  )\n\n  // check if event record exists\n  if exists := h.mgr.Keeper().HasLayer1TransferNativeMsg(ctx, msg.Tx.ID.String()); exists {\n    return sdk.WrapServiceResult(ctx, nil, common.ErrEventRecordAlreadySynced(types.DefaultCodespace))\n  }\n\n  hermesKeeper := h.mgr.Keeper()\n  lastDepositId, err := hermesKeeper.GetDojimaLastDepositId(ctx)\n  if err != nil {\n    ctx.Logger().Error(\"Unable to fetch Dojima Chain Last Deposit ID\", \"error\", err)\n    return nil, err\n  }\n\n  // create Dojima Input\n  inRecord := dtypes.NewDojimaInput(\n    lastDepositId+1, // ID generated on Hermes\n    dcommon.HexToAddress(msg.DestinationContract.String()), // Contract address should be updated in chain params\n    msg.Tx.Payload,\n    msg.Tx.ID.String(),\n    ctx.BlockTime(),\n    hermesKeeper.GetChainId(ctx),\n  )\n\n  if err := hermesKeeper.StoreDojimaInput(ctx, inRecord); err != nil {\n    ctx.Logger().Error(\"Unable to update event record\", \"id\", msg.Tx.ID, \"error\", err)\n    return sdk.WrapServiceResult(ctx, nil, common.ErrDojimaInputUpdate(types.DefaultCodespace))\n  }\n\n  // Storing Dojima Input Message with Unique TxHash\n  if err = hermesKeeper.StoreEVMTransferNativeMsg(ctx, msg); err != nil {\n    ctx.Logger().Error(\"unable to store dojima input evm transfer message\",\n    \"id\", msg.Tx.ID, \"error\", err)\n    return sdk.WrapServiceResult(ctx, nil, common.ErrDojimaInputMessageUpdate(types.DefaultCodespace))\n  }\n\n  return &amp;sdk.Result{\n    Events: ctx.EventManager().Events().ToABCIEvents(),\n  }, nil\n}\n</code></pre></p>"},{"location":"core/chain-clients/evm/hermes-bridge/#dojima-chain-module","title":"Dojima Chain Module","text":"<p>The Dojima Chain module provides a querying mechanism to retrieve transactions from the Hermes chain.</p> <p>Transactions are fetched from the Hermes chain using the following query format:</p> <pre><code>  // Queries a list of DojimaInput items.\n  rpc DojimaInput(QueryDojimaInputRequest) returns (QueryDojimaInputResponse) {\n    option (google.api.http).get = \"/dojimanetwork/hermes/dojimachain/dojima_input/{id}\";\n  }\n\n  message QueryDojimaInputRequest {\n    uint64 id = 1;\n  }\n\n  message QueryDojimaInputResponse {\n    DojimaInput input = 1;\n  }\n\n  message DojimaInput {\n    option (gogoproto.goproto_stringer) = false;\n    uint64 id = 1 [(gogoproto.customname) = \"ID\"]; //to be changed to sequence number from hash - @akhilpune\n    common.DcAddress contract = 2 [(gogoproto.casttype) = \"github.com/dojimanetwork/dojimachain/common.Address\",(gogoproto.nullable) = false];\n    bytes data = 3;\n    string txHash = 4;\n    google.protobuf.Timestamp observedTime = 5 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];\n    string chain_id = 6 [(gogoproto.customname) = \"ChainID\"];\n  }\n</code></pre>"},{"location":"core/chain-clients/evm/state-sender-contract/","title":"EVM State Sender Contract","text":""},{"location":"core/chain-clients/evm/state-sender-contract/#introduction","title":"Introduction","text":"<p>Ethereum, a pioneering decentralized platform, empowers developers to create and deploy smart contracts. These self-executing pieces of code automate intricate processes and agreements, akin to digital agreements that trigger automatically when predefined conditions are met.</p> <p>However, Ethereum\u2019s significance transcends its technological prowess. It has cultivated a vibrant ecosystem where global developers converge to craft decentralized applications (dApps). Leveraging Ethereum\u2019s smart contracts, these dApps provide a wide array of services. These range from decentralized finance (DeFi) and non-fungible tokens (NFTs) to decentralized governance and beyond.</p>"},{"location":"core/chain-clients/evm/state-sender-contract/#the-state-sender-contract","title":"The State Sender Contract","text":"<p>The State Sender Contract is a smart contract designed to facilitate Ethereum (dApp) developers in sending tokens and payloads to the Dojima Chain.  </p> <p>To utilize the State Sender Contract, follow these straightforward steps:</p>"},{"location":"core/chain-clients/evm/state-sender-contract/#step-1-copy-the-state-sender-contract-from-github","title":"Step 1: Copy the State Sender Contract from GitHub","text":"<ul> <li>Access the State Sender Contract Interface and Contract on the GitHub repository here and here respectively.</li> <li>Copy both the Interface and Contract into their corresponding folders, typically located in \u2019. /contracts/\u2019, \u2019. /interfaces/\u2019 or as per your project structure.</li> </ul>"},{"location":"core/chain-clients/evm/state-sender-contract/#step-2-obtain-the-state-sender-contract-address","title":"Step 2: Obtain the State Sender Contract Address","text":"<ul> <li>Retrieve the State Sender Contract address from the Dojima Chain Explorer.</li> </ul> <p>Note: The State Sender Contract address may vary for different chains.      Ensure that you select the Ethereum chain and the appropriate mainnet or testnet. </p>"},{"location":"core/chain-clients/evm/state-sender-contract/#step-3-initialize-the-state-sender-contract","title":"Step 3: Initialize the State Sender Contract","text":"<ul> <li>Initialize the State Sender Contract in your dapp by passing the State Sender Contract address as a parameter.</li> </ul> <pre><code>// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.19;\n\n// Import the interface from the GitHub repository\nimport { IStateSender } from './interfaces/IStateSender.sol';\n\ncontract App {\n    // Declare a variable to hold the address of the StateSender contract\n    address public stateSender;\n\n    constructor(address _stateSender) {\n        stateSender = _stateSender;\n    }\n\n    /**\n    * @dev Function to call the tokenTransferWithPayload function from the StateSender contract\n    * @param destinationChain The chain to which the tokens and payload are to be sent.\n    * @param destinationContract The contract to which the tokens and payload are to be sent.\n    * @param asset The address of the token to be sent.\n    * @param tokenAmount The amount of tokens to be sent.\n    * @param payload The abi encoded contract call to be sent.\n    * @notice destinationChain and destinationContract should be registered with the state sender contract before sending the tokens and payload.\n    */\n    function sendState(\n        bytes32 destinationChain,\n        address destinationContract,\n        address asset,\n        uint256 tokenAmount,\n        bytes calldata payload\n    ) public {\n        // Create an instance of the IStateSender interface using the StateSender address\n        IStateSender stateSenderInstance = IStateSender(stateSender);\n\n        // Call the tokenTransferWithPayload function\n        stateSenderInstance.tokenTransferWithPayload(\n            destinationChain,\n            destinationContract,\n            asset,\n            tokenAmount,\n            payload\n        );\n    }\n}\n</code></pre>"},{"location":"core/chain-clients/evm/state-sender-contract/#step-4-event-emitted-by-the-state-sender-contract-tokentransferwithpayload","title":"Step 4: Event emitted by the State Sender Contract TokenTransferWithPayload","text":"<ul> <li>Once the State Sender Contract executes the TokenTransferWithPayload function, it emits an event called TokenTransfer. This event plays a vital role in the interaction with Narada.</li> <li>The TokenTransfer event furnishes essential information in its parameters:<ul> <li>depositID - This identifier uniquely identifies deposits on the Dojima chain. It is relevant only when the destinationChain is Dojima.</li> <li>destinationChain -  This denotes the specific chain to which the tokens and payload have been dispatched.</li> <li>destinationContract - It signifies the target contract to which the tokens and payload are delivered.</li> <li>asset - This parameter contains the address of the token that was sent.</li> <li>tokenAmount - The amount of tokens sent.</li> <li>payload - This field holds the ABI-encoded contract call that was transmitted.   Step 4: Processing the Event Emitted by the State Sender Contract - TokenTransferWithPayload   Once the State Sender Contract executes the TokenTransferWithPayload function, it emits an event called TokenTransfer. This event plays a vital role in the interaction with Narada.</li> </ul> </li> </ul>"},{"location":"core/chain-clients/nonevm/arweave/","title":"Arweave Client on Dojima Network","text":""},{"location":"core/chain-clients/nonevm/arweave/#introduction","title":"Introduction","text":"<p>Arweave is a new type of storage that backs data with sustainable and perpetual endowments, allowing users and developers to truly store data forever \u2013 for the very first time.</p> <p>As a collectively owned hard drive that never forgets, Arweave allows us to remember and preserve valuable information, apps, and history indefinitely. By preserving history, it prevents others from rewriting it.</p>"},{"location":"core/chain-clients/nonevm/arweave/#scanning-blocks","title":"Scanning Blocks","text":"<p>The block scanner monitors fortuna addresses and looks for incoming transactions to those addresses. When it sees, it performs validations and witnesses to hermes chain.</p> <pre><code>      txInfo, err := c.client.GetTransactionByID(tx)\n\n      // if tx is not found, invalid\n      if err == argo.ErrNotFound || err == argo.ErrInvalidId {\n      return types.TxInItem{}, err\n      }\n\n      // converting signature data to owner address\n      sender, err := arutils.OwnerToAddress(txInfo.Owner)\n\n      if err != nil {\n      return types.TxInItem{}, err\n      }\n\n      winstonQtyStr := txInfo.Quantity\n      winstonFeeStr := txInfo.Reward\n\n      winstonQty, ok := cosmos.ParseUint(winstonQtyStr)\n\n      if ok != nil {\n      err = fmt.Errorf(\"invalid amount: %v\", winstonQtyStr)\n      return types.TxInItem{}, err\n      }\n\n      _, ok = cosmos.ParseUint(winstonFeeStr)\n\n      if ok != nil {\n      err = fmt.Errorf(\"invalid fee: %v\", winstonFeeStr)\n      return types.TxInItem{}, err\n      }\n\n      // when value is less than or equal to zero, it is data transaction not a transfer\n      if winstonQty.IsZero() {\n      return types.TxInItem{}, fmt.Errorf(\"not a transfer transaction, its a data transaction, so ignoring\")\n      }\n\n      client := argo.NewClient(\"https://arweave.net\")\n      address := os.Getenv(\"AR_ADDRESS\")\n      reward, err := client.GetTransactionPrice([]byte(\"\"), &amp;address)\n      convReward := cosmos.NewUint(uint64(reward))\n      // till here\n\n      if err != nil {\n      c.logger.Error().Err(err).Msg(\"failed to get arweave fee\")\n      }\n\n      gasFee := common.Gas{\n      common.NewCoin(common.ARAsset, convReward).WithDecimals(common.ARWEAVECHAIN.GetGasAssetDecimal()),\n      }\n      // update memory cache\n      c.udpateARGasCache(convReward)\n\n      toAddr := txInfo.Target\n\n      //read memo from tags [{name, value}]\n      var memo string\n      for _, val := range txInfo.Tags {\n      if strings.EqualFold(val.Name, \"memo\") {\n      memo = val.Value\n      c.logger.Debug().Str(\"memo\", memo).Msg(\"found memo field\")\n      }\n      }\n\n      if memo == \"\" {\n      c.logger.Debug().Str(\"memo\", memo).Msg(\"found empty memo\")\n      }\n\n      return types.TxInItem{\n      BlockHeight: height,\n      Tx:          txInfo.ID,\n      Sender:      sender,\n      To:          toAddr,\n      Coins: common.Coins{\n      common.NewCoin(common.ARAsset, winstonQty).WithDecimals(common.ARWEAVECHAIN.GetGasAssetDecimal()),\n      },\n      Memo: memo,\n      Gas:  gasFee,\n      }, nil\n</code></pre>"},{"location":"core/chain-clients/nonevm/arweave/#arweave-signer","title":"Arweave Signer","text":"<p>Signer works on signing the outbound transactions received txout from hermes chain that needs to sent on arweave chain. Signing transactions are done in two ways: using rsa tss signing algo and single wallet signing.</p> <pre><code>      _, err := tx.VaultPubKey.GetAddress(c.GetChain())\n      //c.logger.Debug().Msgf(\"process outbound tx\", fromAddr)\n      if err != nil {\n      return &amp;types.Transaction{}, fmt.Errorf(\"failed to convert arweave address (%s): %w\", tx.VaultPubKey.String(), err)\n      }\n\n      // initialise to collect all received txout substractFee coins\n      var coins = cosmos.NewUint(0)\n      for _, coin := range tx.Coins {\n      // handle sors return, leave enough coin to pay for gas.\n      if strings.HasPrefix(tx.Memo, hermes.TxToStringMap[hermes.TxSorsReturn]) {\n      if coin.Asset == c.cfg.ChainID.GetGasAsset() {\n      substractFee := c.averageFee().Mul(cosmos.NewUint(3)).Quo(cosmos.NewUint(2))\n      if coin.Amount.LT(substractFee) {\n      return &amp;types.Transaction{}, fmt.Errorf(\"not enough to pay for transaction, Origal amount %d, Fee %d\", coin.Amount.Uint64(), substractFee.Uint64())\n      }\n\n      coin.Amount = coin.Amount.Sub(substractFee)\n      }\n      }\n      coins = coins.Add(coin.Amount)\n      }\n\n      tag := types.Tag{\n        Name:  \"memo\",\n        Value: tx.Memo,\n      }\n\n      var tags []types.Tag\n      tags = append(tags, tag)\n      encodeTag := utils.TagsEncode(tags)\n\n      arTx := &amp;types.Transaction{\n      Format:   2,\n      Quantity: coins.String(),\n      Data:     \"\",\n      DataSize: \"0\",\n      Reward:   c.averageFee().String(),\n      Target:   tx.ToAddress.String(),\n      Tags:     encodeTag,\n      }\n\n      return arTx, nil\n</code></pre>"},{"location":"core/chain-clients/nonevm/polkadot/","title":"Polkadot Client on Dojima Network","text":""},{"location":"core/chain-clients/nonevm/polkadot/#introduction","title":"Introduction","text":"<p>Polkadot unites and secures a growing ecosystem of specialized blockchains called parachains. Apps and services on Polkadot can securely communicate across chains, forming the basis for a truly interoperable decentralized web.</p>"},{"location":"core/chain-clients/nonevm/polkadot/#scanning-blocks","title":"Scanning Blocks","text":"<p>The block scanner monitors fortuna addresses and looks for incoming transactions to those addresses. When it sees, it performs validations and witnesses to hermes chain.</p> <pre><code>    func (c *Client) convertToTxIn(dextrinsic *DecodedExtrinsic, height int64) (types.TxInItem, error) {\n      e := dextrinsic.Extrinsic\n      call, ok := e.Metadata.CallIndex[e.CallIndex]\n      if !ok {\n        return types.TxInItem{}, fmt.Errorf(\"failed to get call index from metadata\")\n      }\n      // if extrinsic module is utility and function is batch all or batch with signed tx, gas class is normal\n      // https://docs.substrate.io/build/tx-weights-fees/\n      if e.Module == \"Utility\" &amp;&amp; (call.Call.Name == \"batch_all\" || call.Call.Name == \"batch\") &amp;&amp; e.ContainsTransaction &amp;&amp; len(e.Signature) &gt; 0 &amp;&amp; dextrinsic.PaymentInfo.Class == \"normal\" {\n        dest := \" \"\n        dotQty := cosmos.ZeroUint()\n        memo := \"\"\n        calls := &amp;[]UtilityBatchCall{}\n        err := unmarshalAny(calls, e.Params[0].Value)\n        gas := dextrinsic.PaymentInfo.PartialFee.BigInt().Uint64()\n        comsosGas := cosmos.NewUint(gas)\n        c.updateDOTGasCache(comsosGas)\n        if err != nil {\n          return types.TxInItem{}, err\n        }\n\n        for _, c := range *calls {\n          for _, a := range c.Params {\n            switch a.Name {\n            // decode destination address to ss58\n            case \"dest\":\n              dest = EncodeToSS58(a.Value.(map[string]interface{})[\"Id\"].(string))\n              break\n              // get transacted value to dest address\n            case \"value\":\n              value := a.Value.(string)\n              dotQty, err = cosmos.ParseUint(value)\n              if err != nil {\n                return types.TxInItem{}, err\n              }\n              break\n              // get memo field\n            case \"remark\":\n              memoBeforeConv := a.Value.(string)\n              parts := strings.Split(memoBeforeConv, \":\")\n              if len(parts) &lt; 2 {\n                return types.TxInItem{}, fmt.Errorf(\"invalid memo of dot transaction %s, tx hash %s\", memo, e.ExtrinsicHash)\n              }\n              if strings.EqualFold(parts[0], \"memo\") {\n                memo = strings.Join(parts[1:], \":\")\n              } else {\n                return types.TxInItem{}, fmt.Errorf(\"invalid memo of dot transaction %s, tx hash %s\", memo, e.ExtrinsicHash)\n              }\n              break\n            }\n          }\n        }\n\n        return types.TxInItem{\n          BlockHeight: height,\n          Tx:          e.ExtrinsicHash,\n          Sender:      EncodeToSS58(e.Address.(string)),\n          To:          dest,\n          Memo:        memo,\n          Coins: common.Coins{\n            common.NewCoin(common.DOTAsset, dotQty).WithDecimals(common.DOTCHAIN.GetGasAssetDecimal()),\n          },\n          Gas: common.Gas{\n            common.NewCoin(common.DOTAsset, comsosGas).WithDecimals(common.DOTCHAIN.GetGasAssetDecimal()),\n          },\n        }, nil\n      }\n\n      return types.TxInItem{}, nil\n    }\n</code></pre>"},{"location":"core/chain-clients/nonevm/polkadot/#polkadot-signer","title":"Polkadot Signer","text":"<p>Signer works on signing the outbound transactions received txout from hermes chain that needs to sent on arweave chain. Signing transactions are done in two ways: using ed25519/sr25519 tss signing algo and single wallet signing.</p> <pre><code>    func (c *Client) processOutboundTx(tx stypes.TxOutItem, hermeschainHeight int64) (gsrpcTypes.SignatureOptions, gsrpcTypes.Extrinsic, error) {\n      _, err := tx.VaultPubKey.GetAddress(c.GetChain())\n\n      if err != nil {\n        return gsrpcTypes.SignatureOptions{}, gsrpcTypes.Extrinsic{}, fmt.Errorf(\"failed to convert polkadot address (%s): %w\", tx.VaultPubKey.String(), err)\n      }\n\n      // initialise to collect all received txout substractFee coins\n      var coins = cosmos.NewUint(0)\n      for _, coin := range tx.Coins {\n        // handle sors return, leave enough coin to pay for gas.\n        if strings.HasPrefix(tx.Memo, hermes.TxToStringMap[hermes.TxSorsReturn]) {\n          if coin.Asset == c.cfg.ChainID.GetGasAsset() {\n            substractFee := c.averageFee().Mul(cosmos.NewUint(3)).Quo(cosmos.NewUint(2))\n            if coin.Amount.LT(substractFee) {\n              return gsrpcTypes.SignatureOptions{}, gsrpcTypes.Extrinsic{}, fmt.Errorf(\"not enough to pay for transaction, Origal amount %d, Fee %d\", coin.Amount.Uint64(), substractFee.Uint64())\n            }\n\n            coin.Amount = coin.Amount.Sub(substractFee)\n          }\n        }\n        coins = coins.Add(coin.Amount)\n      }\n\n      // fetch the latest metadata from chain\n      metadata, err := c.GetLatestMetadata()\n\n      if err != nil {\n        return gsrpcTypes.SignatureOptions{}, gsrpcTypes.Extrinsic{}, err\n      }\n\n      // convert from ss58 to hexadecimal address\n      hexAddr := DecodeFromSS58(tx.ToAddress.String())\n      appendX := strings.Join([]string{\"0x\", hexAddr}, \"\")\n      dest, err := gsrpcTypes.NewMultiAddressFromHexAccountID(appendX)\n\n      if err != nil {\n        return gsrpcTypes.SignatureOptions{}, gsrpcTypes.Extrinsic{}, err\n      }\n\n      // append memo string to tx.memo and join with \":\"\n      memoArray := strings.Join([]string{\"memo\", tx.Memo}, \":\")\n      memo := []byte(memoArray)\n\n      // prepare system::remark call\n      remarkCall, err := gsrpcTypes.NewCall(metadata, \"System.remark\", memo)\n\n      if err != nil {\n        return gsrpcTypes.SignatureOptions{}, gsrpcTypes.Extrinsic{}, err\n      }\n\n      // dest amount\n      valUint64 := coins.Uint64()\n      amount := gsrpcTypes.NewUCompactFromUInt(valUint64)\n\n      // prepare balances::transfer call\n      transferCall, err := gsrpcTypes.NewCall(metadata, \"Balances.transfer\", dest, amount)\n\n      if err != nil {\n        return gsrpcTypes.SignatureOptions{}, gsrpcTypes.Extrinsic{}, err\n      }\n\n      // prepare utility::batch_all\n      utilityBatchCall, err := gsrpcTypes.NewCall(metadata, \"Utility.batch_all\", []gsrpcTypes.Call{transferCall, remarkCall})\n\n      if err != nil {\n        return gsrpcTypes.SignatureOptions{}, gsrpcTypes.Extrinsic{}, err\n      }\n\n      // fetch genesis hash for immortal era.\n      genesisHash, err := c.gsrpc.RPC.Chain.GetBlockHash(0)\n\n      if err != nil {\n        return gsrpcTypes.SignatureOptions{}, gsrpcTypes.Extrinsic{}, err\n      }\n\n      // create storage key\n      storageKey, err := gsrpcTypes.CreateStorageKey(metadata, \"System\", \"Account\", c.dotKeysignWrapper.dotKP.PublicKey)\n\n      if err != nil {\n        return gsrpcTypes.SignatureOptions{}, gsrpcTypes.Extrinsic{}, err\n      }\n\n      // fetch account info for nonce value\n      var accountInfo gsrpcTypes.AccountInfo\n      ok, err := c.gsrpc.RPC.State.GetStorageLatest(storageKey, &amp;accountInfo)\n      nonce := accountInfo.Nonce\n\n      if err != nil || !ok {\n        return gsrpcTypes.SignatureOptions{}, gsrpcTypes.Extrinsic{}, err\n      }\n\n      // fetch runtime version data\n      runtimeVersion, err := c.GetRuntimeVersion()\n\n      if err != nil {\n        return gsrpcTypes.SignatureOptions{}, gsrpcTypes.Extrinsic{}, err\n      }\n\n      // prepare extrinsic for signing\n      extrinsic := gsrpcTypes.NewExtrinsic(utilityBatchCall)\n\n      return gsrpcTypes.SignatureOptions{\n        BlockHash:          genesisHash,\n        Era:                gsrpcTypes.ExtrinsicEra{IsMortalEra: false},\n        GenesisHash:        genesisHash,\n        Nonce:              gsrpcTypes.NewUCompactFromUInt(uint64(nonce)),\n        SpecVersion:        runtimeVersion.SpecVersion,\n        Tip:                gsrpcTypes.NewUCompactFromUInt(0),\n        TransactionVersion: runtimeVersion.TransactionVersion,\n      }, extrinsic, nil\n    }\n</code></pre>"},{"location":"core/chain-clients/nonevm/solana/solana-client/","title":"Solana Client on Dojima Network","text":""},{"location":"core/chain-clients/nonevm/solana/solana-client/#introduction","title":"Introduction","text":"<p>Solana is a layer-1 blockchain similar to Ethereum and Bitcoin meaning other layer-2 blockchains can build on Solana. Solana has a similar concept of smart contracts on Ethereum called as Programs which also facilitates in development of dApps. Solana follows a consensus mechanism of Proof-of-History, which can be understood as a type of cryptographic timeclock which manages to timestamp a blockchain transaction. This helps in order of the blocks and transactions. The advantages of this can be understood on comparing the Bitcoin block validation time (10 mins) which uses Proof of Work and Solana block validation time (800 milliseconds).</p>"},{"location":"core/chain-clients/nonevm/solana/solana-client/#solana-local-test-node","title":"Solana local test node","text":"<p>To build programs and test it on your local node, you need to run a local instance of Solana local validator. To run it, first install Solana CLI. Then start your own local validator node by running the command <code>solana-test-validator</code> after successfully installing Solana CLI. Further steps can be found here if you find the need to dive in-depth.</p>"},{"location":"core/chain-clients/nonevm/solana/solana-client/#solana-client-overview","title":"Solana-Client Overview","text":"<p>Solana client listens and parses the transactions included in solana blocks. It will parse the transaction\u2019s inner instructions field to know which programs were part of the execution. If we find our state-sender program address in the inner-instruction, It means that some other program had to use our state-sender program for some sort of cross-chain operation. The logs of the above transaction are parsed to see what type of event is emitted. The event is extracted(termed as payload) and posted to the Hermes chain as a TxIn item. At regular block intervals dojima chain will fetch TxIn items stored on hermes chain. Based on the received payload, the dojima chain will be sending the payload to a destined contract on the dojima chain.</p>"},{"location":"core/chain-clients/nonevm/solana/solana-client/#filtering-transactions","title":"Filtering Transactions","text":"<pre><code>func isDOJStateSenderTxn(tx *rpc.GetParsedTransactionResult, stateSenderContract string) (bool, string) {\n   log := tx.Meta.LogMessages\n   prog_add := \"\"\n   if len(tx.Meta.InnerInstructions) == 0 {\n      return false, \"\"\n   }\n   for i := 0; i &lt; len(tx.Meta.InnerInstructions[0].Instructions); i++ {\n      prog_add += tx.Meta.InnerInstructions[0].Instructions[i].ProgramId.String()\n      prog_add += \" \"\n   }\n   if !strings.Contains(prog_add, \"&lt;sol_state_sender_prog&gt;\") {\n      return false, \"\"\n   }\n   log_str := fmt.Sprint(log)\n   if strings.Contains(log_str, \"TokenTransfer\") {\n      return true, \"TokenTransfer\"\n   } else if strings.Contains(log_str, \"TransferPayload\") {\n      return true, \"TransferPayload\"\n   }\n   return false, \"\"\n}\n</code></pre> <p>Info</p> <p>The above code snippet allows the client to decide whether the picked transaction should be filtered and sent to hermes.</p> <ul> <li>isDOJStateSenderTxn - This function returns a boolean value stating whether the transaction is state-sender transaction or not.</li> <li>tx.Meta.InnerInstructions[0].Instructions - This consists of the programs that were part of the first instruction execution.</li> <li>TokenTransfer and  TransferPayload are the types of events which are to be filtered and stored in the Hermes chain.</li> </ul> <pre><code>func GetUnpackedEvent(log []string, typ string) (StateSenderEvent, error) {\n   sse := StateSenderEvent{}\n   if typ == \"TokenTransfer\" {\n     return sse, nil\n   } else if typ == \"TransferPayload\" {\n      log_str := fmt.Sprintln(log)\n      log_str_arr := strings.Split(log_str, \" \")\n      indx := -1\n      for i := 0; i &lt; len(log_str_arr); i++ {\n         if log_str_arr[i] == typ {\n            indx = i\n            break\n         }\n      }\n    if indx == -1 {\n        return sse, fmt.Errorf(\"unable to parse TransferPayload event\")\n    }\n      //Destination chain\n      sse.DestChain = \"DOJ\"\n      //Destination contract\n      sse.SourceDestContract = log_str_arr[1]\n      //destination chain destination contract\n      sse.DestinationDestContract = log_str_arr[indx+2]\n      //Destination counter nonce\n      counter_in_u64, err := strconv.ParseUint(log_str_arr[indx+1], 10, 64)\n      if err != nil {\n         return sse, &amp;StateSenderError{}\n      }\n      sse.CounterNonce = counter_in_u64\n      //emitted data for child chain smart contract\n      sse.DataInBytes = log_str_arr[indx+3]\n      return sse, nil\n   }\n   return sse, nil\n}\n</code></pre> <p>Info</p> <p>The above code snippet allows the client to parse log to extract payload .</p>"},{"location":"core/chain-clients/nonevm/solana/solana-client/#scanning-blocks","title":"Scanning Blocks","text":"<p>The block scanner monitors fortuna addresses and looks for incoming transactions to those addresses. When it sees, it performs validations and witnesses to hermes chain.</p> <pre><code>      client := rpc.NewClient(\"http://127.0.0.1:8899\")\n      address := os.Getenv(\"SOL_ADDRESS\")\n\n      txInfo, err := c.client.GetTransaction(\n        context.TODO(), \n        txSig, \n        &amp;rpc.GetTransactionOpts{Encoding: solana.EncodingBase64}\n        )\n\n      // If Transaction is not found.\n      if err != nil {\n        return types.TxInItem{}, err\n      }\n\n      decodedTx, err := solana.TransactionFromDecoder(bin.NewBinDecoder(txInfo.Transaction.GetBinary()))\n\n      // If Transaction is not decoded. \n      if err != nil {\n        return types.TxInItem{}, err\n      }\n\n      // Getting the transaction details from the decoded transaction.\n      sender := decodedTx.AccountMetaList()[0].PublicKey.String()\n      LamportQtyStr := cosmos.NewUint(txInfo.Meta.PostBalances[1] - txInfo.Meta.PreBalances[1])\n      LamportFeeStr := cosmos.NewUint(txInfo.Meta.Fee)\n\n      // Read memo from solana transaction.\n      solmemo := \"\"\n      if len(txInfo.Meta.LogMessages) &gt; 4 {\n        solmemo = txInfo.Meta.LogMessages[4]\n        solmemo = strings.ReplaceAll(solmemo, \"Program log: \", \"\")\n      }\n\n      gasFee := common.Gas{\n        common.NewCoin(common.SOLAsset, LamportFeeStr),\n      }\n      toAddr := decodedTx.Message.AccountKeys[1].String()\n\n      // update memory cache\n      c.udpateSOLGasCache(LamportFeeStr)\n\n      return types.TxInItem{\n        BlockHeight: height,\n        Tx:          tx,\n        Sender:      sender,\n        To:          toAddr,\n        Coins: common.Coins{\n          common.NewCoin(common.SOLAsset, LamportQtyStr),\n        },\n        Memo: solmemo,\n        Gas:  gasFee,\n      }, nil\n</code></pre>"},{"location":"core/chain-clients/nonevm/solana/solana-client/#solana-signer","title":"Solana Signer","text":"<p>Signer works on signing the outbound transactions received txout from hermes chain that needs to sent on solana chain. Signing transactions are done in two ways: using ed25519 tss signing algo and single wallet signing.</p> <pre><code>    _, err := tx.VaultPubKey.GetAddress(c.GetChain())\n  if err != nil {\n    return &amp;solana.Transaction{}, fmt.Errorf(\"failed to convert solana address (%s): %w\", tx.VaultPubKey.String(), err)\n  }\n\n  var coins = cosmos.NewUint(0)\n  for _, coin := range tx.Coins {\n    // handle sors return, leave enough coin to pay for gas.\n    if strings.HasPrefix(tx.Memo, hermes.TxToStringMap[hermes.TxSorsReturn]) {\n        if coin.Asset == c.cfg.ChainID.GetGasAsset() {\n            substractFee := c.averageFee().Mul(cosmos.NewUint(3)).Quo(cosmos.NewUint(2))\n            if coin.Amount.LT(substractFee) {\n                return &amp;solana.Transaction{}, fmt.Errorf(\"not enough to pay for transaction, Origal amount %d, Fee %d\", coin.Amount.Uint64(), substractFee.Uint64())\n            }\n\n            coin.Amount = coin.Amount.Sub(substractFee)\n        }\n    }\n    coins = coins.Add(coin.Amount)\n  }\n  recent, err := c.GetRecentBlockhash()\n  if err != nil {\n\n  }\n\n  amt := coins.String()\n  instruction_data := []byte{0xaa, 0xbb}\n\n  instruction := []solana.Instruction{\n    &amp;TransactionInstructions{\n        accounts: []*solana.AccountMeta{\n            {PublicKey: solana.MustPublicKeyFromBase58(tx.fromAddress.PublicKey()), IsSigner: true, IsWritable: true},\n            {PublicKey: solana.MustPublicKeyFromBase58(tx.ToAddress.String()), IsSigner: false, IsWritable: true},\n            {PublicKey: solana.SystemProgramID, IsSigner: false, IsWritable: false},\n        },\n        data:      instruction_data,\n        programID: solana.MustPublicKeyFromBase58(os.Getenv(\"SOL_PROGRAM\")),\n    },\n  }\n\n  solTx, err := solana.NewTransaction(\n    instruction,\n    recent.Value.Blockhash,\n    solana.TransactionPayer(c.SolKeysignWrapper.privateKey.PublicKey()),\n  )\n  return solTx, err\n</code></pre>"},{"location":"core/chain-clients/nonevm/solana/solana-state-sender/","title":"Solana State Sender on Dojima Network","text":"<p>The solana-state-sender program is named as solana-dojima-bridge. This program maintains the mapping of registered programs on solana blockchain(Only registered programs can interact with state-sender program). Solana programs should register and call this state-sender program to interact with other contracts on destination chains.</p> <pre><code>//admin will create the registry - (token mapping)\n   pub fn create_registry(\nctx: Context&lt;CreateRegistry&gt;, \nsolanaprogaddress: Pubkey,\ndojimatoken: String, \nauthority: Pubkey) -&gt; Result&lt;()&gt; \n   {\n       if ctx.accounts.user.key() != ctx.accounts.admin.admin {\n           return  err!(MyError::NotOwner);\n       }\n       ctx.accounts.contract_mapping.dojimatokenaddress = dojimatoken;\n       ctx.accounts.contract_mapping.authority = authority;\n       Ok(())\n   }\n   //lock_program(eg;) =&gt; (dojimatoken+authority)\n   #[account]\n   pub struct ContractMapping {\n    dojimatokenaddress: String,\n    authority: Pubkey\n   }\n\n\n   #[derive(Accounts)]\n   #[instruction(solanaprogaddress: Pubkey)]\n   pub struct CreateRegistry&lt;'info&gt; {\n    //error handling\n    #[account(mut)]\n    pub user: Signer&lt;'info&gt;,\n    #[account(\n        init,\n        payer = user,\n        seeds = [solanaprogaddress.key().as_ref(), b\"dojima_contract_mapping\"],\n            bump,\n        space = 8 + 64 + 64,\n    )]\n    pub contract_mapping: Account&lt;'info, ContractMapping&gt;,\n    pub system_program: Program&lt;'info, System&gt;,\n    #[account(\n        seeds = [b\"dojima_bridge_admin4\"],\n        bump,\n    )]\n    pub admin: Account&lt;'info, Admin&gt;,\n  }\n</code></pre> <ul> <li>Create_registry - Admin will register the programs and create a contract mapping for every program.</li> <li>dojimatoken - This is the equivalent of solana token on dojima chain.</li> <li>authority - PDA of a program which signs to interact with the state-sender contract should be passed as an authority.</li> </ul> <pre><code>pub fn transfer_payload(\n       ctx: Context&lt;TransferPayload&gt;,\n       destination_contract: String,\n       payload: String\n   ) -&gt; Result&lt;()&gt; {\n       //only authority(ie; PDA of locking program) is allowed to call this function\n       if ctx.accounts.contract_mapping.authority.key() != ctx.accounts.user.key() {\n           return  err!(MyError::UnauthorizedContract);\n       }\n       if ctx.accounts.contract_mapping.dojimatokenaddress != destination_contract {\n           return  err!(MyError::UnauthorizedContract);\n       }\n       let nonce =  ctx.accounts.counter.count;\n       ctx.accounts.counter.count += 1;\n       msg!(\n           \"{} {} {} {}\",\n           \"TransferPayload\",\n           nonce,\n           destination_contract,\n           payload\n       );\n       Ok(())\n   }\n</code></pre> <ul> <li>transfer_payload - This function is used to transfer abi-encoded payload to dojima chain contracts.</li> <li>destination_contract - Which contract to call on the destination chain.</li> <li>payload - abi-encoded data that should be passed to the destination chain.</li> <li>A check will be made whether the calling program is registered in the registry or not.</li> <li>destination_contract should be the same as the registered dojima token address.</li> <li>Counter keeps track of the number of interactions happening with the state-sender program.</li> <li>It will increment the counter by one for everytime a transfer_payload (or) token_transfer_from_solana function is called.</li> <li>After incrementing the counter TransferPayload message(event) is emitted which is filtered by solana-client(narada) and submitted to hermes.</li> </ul> <pre><code>pub fn token_transfer_to_solana(\nctx: Context&lt;TokenTransferToSolana&gt;, \ndestination_prog_data: Vec&lt;u8&gt;\n) -&gt; Result&lt;()&gt; {\n       //check whether the signer is TSS\n\n\n       //Define seeds for signing\n       let seeds: &amp;[&amp;[u8]] = &amp;[\n           b\"dojima_bridge_authority\",\n           &amp;[254]\n       ]; \n       let signer_seeds:&amp;[&amp;[&amp;[u8]]] = &amp;[&amp;seeds[..]];\n\n\n       //unpack accounts\n       let destination_prog = &amp;ctx.accounts.destination_program;\n       let sender_ATA = &amp;ctx.accounts.from_token_account;\n       let receiver_ATA = &amp;ctx.accounts.to_token_account;\n       let tkn_prog = &amp;ctx.accounts.token_program;\n       let auth = &amp;ctx.accounts.authority;\n       let bridge_owner_pda = &amp;ctx.accounts.bridge_owner_pda;\n\n\n       //Construct accoount_metas for CPI invocation\n       let account_metas = vec![\n           AccountMeta::new(ctx.accounts.signing_pda.key(),true),\n           AccountMeta::new(sender_ATA.key(), false),\n           AccountMeta::new(receiver_ATA.key(), false),\n           AccountMeta::new_readonly(tkn_prog.key(), false),\n           AccountMeta::new_readonly(auth.key(), false),\n           AccountMeta::new_readonly(bridge_owner_pda.key(), false),\n       ];\n\n\n       //Instruction identifier of global:execute_state\n       let inst_identifier:Vec&lt;u8&gt; = vec![34, 26, 147, 217, 17, 18, 70, 124];\n\n\n       //Prepare data for CPI\n       let destination_prog_data_len = destination_prog_data.len() as u32;\n       let destnation_prog_data_len_bytes = destination_prog_data_len.to_le_bytes();\n       let mut data = inst_identifier.to_vec();\n       data.extend(destnation_prog_data_len_bytes.to_vec());\n       data.extend(destination_prog_data);\n\n\n\n\n\n       let account_infos = vec![\n           ctx.accounts.signing_pda.to_account_info(),\n           sender_ATA.to_account_info(),\n           receiver_ATA.to_account_info(),\n           tkn_prog.to_account_info(),\n           auth.to_account_info(),\n           bridge_owner_pda.to_account_info(),\n       ];\n\n\n       //Construct instruction\n        let inst = Instruction{\n           program_id: destination_prog.key(),\n           accounts: account_metas,\n           data: data,\n       };\n\n\n       //Invoke CPI\n       invoke_signed(&amp;inst, &amp;account_infos, signer_seeds);\n\n\n\n\n       Ok(())\n   }\n</code></pre> <ul> <li>token_transfer_to_solana - This function will be used by cross-chain dapp developers to transfer (or) mint SPL tokens from the destination chain.</li> <li>destination_prog_data - Encoded byte data that is passed from destination chain(Developer can choose the way data gets encoded on destination chain.)</li> <li>All the accounts and encoded byte data passed from the destination chain are unpacked in this function and sent to a given destination contract on solana.</li> <li>The unpacked data will be passed to the execute_state function of the destination contract(Destination contract should implement execute_state function).</li> <li>Prepare the required data to construct instruction and CPI is done using invoke_signed.</li> <li>The instruction will be signed using a PDA derived from defined seeds.</li> </ul>"},{"location":"core/concepts/code.liberies/","title":"Code Libraries in Dojima Network","text":"<p>The following libraries will help you in your integration</p>"},{"location":"core/concepts/code.liberies/#d11k","title":"D11K","text":"<p>D11K Guide</p> <p>https://github.com/dojimanetwork/d11k-ts</p>"},{"location":"core/concepts/code.liberies/#wallet-js","title":"Wallet-js","text":"<p>https://github.com/dojimanetwork/wallet-js</p>"},{"location":"core/concepts/connecting.doj.chain/","title":"Connecting to Dojima Chain","text":"<p>How to connect to Hermesgard, HERMESNode and the base Tendermint layer.</p> <p>The Network Information comes from four sources:</p> <ol> <li>HERMESNode: Raw blockchain data provided by the HERMESChain state machine. HERMESChain wallets and block explorers will query HERMESChain-specific information here.</li> <li>Cosmos RPC: Used to query for generic CosmosSDK information.</li> <li>Tendermint RPC: Used to query for consensus-related information.</li> </ol>"},{"location":"core/concepts/connecting.doj.chain/#cosmos-rpc","title":"Cosmos RPC","text":"<p>The Cosmos RPC allows Cosmos base blockchain information to be returned.  However, not all endpoints have been enabled.</p>"},{"location":"core/concepts/connecting.doj.chain/#endpoints-guide","title":"Endpoints guide","text":"<p>https://v1.cosmos.network/rpc/v0.45.1</p>"},{"location":"core/concepts/connecting.doj.chain/#example-url","title":"Example URL","text":"<p>https://api-dev.h4s.dojima.network/cosmos/bank/v1beta1/balances/dojima1nh4y3gqxsn7ymm9t45zwsz3h8p9tm7pev8my62</p>"},{"location":"core/concepts/connecting.doj.chain/#tendermint-rpc","title":"Tendermint RPC","text":"<p>The Tendermint RPC allows Tendermint consensus information to be returned.</p> <p>Any Node Ports</p> <ul> <li>MAINNET Port: <code>27147</code></li> <li>STAGENET Port: <code>26657</code></li> <li>TESTNET Port: <code>26657</code></li> </ul>"},{"location":"core/concepts/connecting.doj.chain/#endpoints-guide_1","title":"Endpoints guide","text":"<p>https://docs.tendermint.com/master/rpc/#/</p>"},{"location":"core/concepts/connecting.doj.chain/#rpc-end-links","title":"Rpc End Links","text":"<p>https://rpc-dev.h4s.dojima.network/</p>"},{"location":"core/concepts/connecting.doj.chain/#p2p","title":"P2P","text":"<p>P2P is the network layer between nodes, useful for network debugging.</p> <p>TESTNET Port: <code>26656</code></p> <p>P2P Guide</p> <p>https://docs.tendermint.com/master/spec/p2p/</p>"},{"location":"core/concepts/querying/","title":"Querying Data in Dojima Network","text":"<p>How to Query HERMESChain</p>"},{"location":"core/concepts/querying/#getting-the-fortunas-vault","title":"Getting the Fortunas Vault","text":"<p>Vaults are fetched from the <code>/inbound_addresses</code>:</p> <p>https://api-dev.h4s.dojima.network/hermeschain/inbound_addresses</p> <p>You need to select the address of the Chain the inbound transaction will go to. </p> <p>The address will be the current active Fortunas Address that accepts inbounds. Do not cache these address as they change regularly. </p> <p>Example Output, each connected chain will be displayed.</p> <pre><code>[\n    {\n        \"chain\": \"BTC\",\n        \"pub_key\": \"dojimapub1addwnpepqf9eve9a9d5xlvvhlf5mjhan2gu9hk4ptch2asmwun6y43w6a47wqgqjd9f\",\n        \"address\": \"tb1qnh4y3gqxsn7ymm9t45zwsz3h8p9tm7pejmmxf5\",\n        \"halted\": false,\n        \"gas_rate\": \"2000000\"\n    },\n    {\n        \"chain\": \"BNB\",\n        \"pub_key\": \"dojimapub1addwnpepqf9eve9a9d5xlvvhlf5mjhan2gu9hk4ptch2asmwun6y43w6a47wqgqjd9f\",\n        \"address\": \"tbnb1nh4y3gqxsn7ymm9t45zwsz3h8p9tm7pezkgkh4\",\n        \"halted\": false,\n        \"gas_rate\": \"2000000\"\n    },\n    {\n        \"chain\": \"ETH\",\n        \"pub_key\": \"dojimapub1addwnpepqf9eve9a9d5xlvvhlf5mjhan2gu9hk4ptch2asmwun6y43w6a47wqgqjd9f\",\n        \"address\": \"0xd526d5f47f863eff32b99bc4f9e77ddb4bd2929b\",\n        \"router\": \"0x1e87989b0792c236c383Aa498E52770015af66cf\",\n        \"halted\": false,\n        \"gas_rate\": \"30\"\n    },\n    {\n        \"chain\": \"AR\",\n        \"pub_key\": \"dojimapub1addwnpepqf9eve9a9d5xlvvhlf5mjhan2gu9hk4ptch2asmwun6y43w6a47wqgqjd9f\",\n        \"address\": \"2txTDSdb_RjG12uHZlVsB5jrfPzqxtzScKTtPef2KZ0\",\n        \"halted\": false,\n        \"gas_rate\": \"1412964922\"\n    },\n    {\n        \"chain\": \"SOL\",\n        \"pub_key\": \"dojimapub1addwnpepqf9eve9a9d5xlvvhlf5mjhan2gu9hk4ptch2asmwun6y43w6a47wqgqjd9f\",\n        \"address\": \"82iP5jLLyiuTHbQRrSwUgZ6sKycT2mjbNkncgpm7Duvg\",\n        \"halted\": false,\n        \"gas_rate\": \"15000\"\n    },\n    {\n        \"chain\": \"DOT\",\n        \"pub_key\": \"dojimapub1addwnpepqf9eve9a9d5xlvvhlf5mjhan2gu9hk4ptch2asmwun6y43w6a47wqgqjd9f\",\n        \"address\": \"5H16DLfWFLdpm5C4f9Qr6UkADsT1PtD9jELWF9WKuiC7St1T\",\n        \"halted\": false,\n        \"gas_rate\": \"2000000\"\n    }\n]\n</code></pre> <p>Warning</p> <p>If a chain has a router on the inbound address endpoint, then everything must be deposited via the router. The router is a contract that the user first approves, and the deposit call transfers the asset into the network and emits an event to HERMESChain. </p> <p>This is done because \u201ctokens\u201d on protocols don\u2019t support memos on-chain, thus need to be wrapped by a router which can force a memo. </p> <p>Note: you can transfer the base asset, eg ETH, directly to the address and skip the router, but it is recommended to deposit everything via the router. </p> <pre><code>{\n        \"chain\": \"ETH\",\n        \"pub_key\": \"dojimapub1addwnpepqf9eve9a9d5xlvvhlf5mjhan2gu9hk4ptch2asmwun6y43w6a47wqgqjd9f\",\n        \"address\": \"0xd526d5f47f863eff32b99bc4f9e77ddb4bd2929b\",\n        \"router\": \"0x1e87989b0792c236c383Aa498E52770015af66cf\",\n        \"halted\": false,\n        \"gas_rate\": \"30\"\n    },\n</code></pre> <p>Danger</p> <p>Never cache vault addresses, they churn regularly.</p> <p>Danger</p> <p>Check for the halted parameter and never send funds if it is set to true</p> <p><code>Chain</code>: Chain Name</p> <p><code>Address</code>: Fortunas Vault inbound address for that chain., </p> <p><code>Halted</code>: Boolean, if the chain is halted. This should be monitored.</p> <p><code>gas_rate</code>: rate to be used, e.g. in Stats or GWei. See Fees.</p> <p>Info</p> <p>Only pools with \u201cstatus\u201d: \u201cavailable\u201d are available to trade</p> <p>Info</p> <p>Make sure to manually add Native $DOJ as a swappable asset.</p> <p>Info</p> <p>\u201cassetPrice\u201d tells you the asset\u2019s price in DOJ (DOJ Depth/AssetDepth ). In the above example 1 BNB.BTCB-1DE = 11,205 DOJ</p>"},{"location":"core/concepts/querying/#decimals-and-base-units","title":"Decimals and Base Units","text":"<p>All values on HERMESChain are given in 1e8 eg, 100000000 base units (like Bitcoin), and unless postpended by \u201cUSD\u201d, they are in units of DOJ. Even 1e18 assets, such as ETH.ETH, are shortened to 1e8. 1e6 Assets like ETH.USDC, are padded to 1e8. HERMESNode will tell you the decimals for each asset, giving you the opportunity to convert back to native units in your interface. </p>"},{"location":"core/concepts/transaction.memos/","title":"Transaction Memos on Dojima Network","text":"<p>Transaction Memo Details</p>"},{"location":"core/concepts/transaction.memos/#overview","title":"Overview","text":"<p>A memo serves as additional data attached to a transaction, facilitating the communication of user intent to the Hermes Chain. The memo field signifies the type of transaction being executed, such as SWAP, WITHDRAW, or RESERVE, among others. Hermes Chain inspects the transaction object as well as the MEMO in order to process the transaction. It is essential to ensure that both the memo and the transaction are valid; otherwise, Hermes Chain will automatically refund the assets.</p> <p>Different chains employ various methods to include state information within a transaction. Long assets can be shortened using Asset abbreviations (below) as well as Hermes Names to reduce the size of destination/affiliate addresses.</p>"},{"location":"core/concepts/transaction.memos/#format","title":"Format","text":"<p>Memos follow the format:</p> <p><code>TYPE:PARAM1:PARAM2:PARAM3:PARAM4</code></p> <p>The type is invoked by a string, which in turn calls a particular handler in the state machine. The state machine parses the memo looking for the parameters which is simply decodes from human-readable strings. </p> <p>In addition, some parameters are optional. Simply leave them blank, but retain the <code>:</code> separator:</p> <p>TYPE:PARAM1:::PARAM4</p>"},{"location":"core/concepts/transaction.memos/#permitted-memos","title":"Permitted Memos","text":"<p>The following memos are permitted:</p> <ol> <li>SWAP</li> <li>ADD Liquidity</li> <li>WITHDRAW Liquidity</li> <li>BOND, UNBOND &amp; LEAVE</li> <li>DONATE &amp; RESERVE</li> <li>NOOP</li> </ol>"},{"location":"core/concepts/transaction.memos/#swap","title":"Swap","text":"<p>Perform a swap.</p> <p><code>SWAP:ASSET:DESTADDR:LIM:AFFILIATE:FEE</code></p> Parameter Note Conditions Payload Send the asset to swap. Must be an active pool on Hermes Chain. <code>SWAP</code> The swap handler also <code>s,</code> <code>=</code> <code>:ASSET</code> The asset identifier. Can be shortened. <code>:DESTADDR</code> The destination address to send to. Can use HERMESName. <code>:LIM</code> The trade limit ie, set 100000000 to get a minimum of 1 full asset, else a refund. Optional, 1e8 format <code>:AFFILIATE</code> The affiliate address. DOJ is sent to Affiliate. Optional. Must be HERMESName or HERMES Address. <code>:FEE</code> The affiliate fee. Limited from 0 to 1000 Basis Points Optional <p>Examples</p> <p><code>SWAP:ASSET:DESTADDR</code> simply swap</p> <p><code>=:ASSET:DESTADDR:LIM</code> swap with limit</p> <p><code>s:ASSET:DESTADDR:LIM:AFFILIATE:FEE</code> swap with limit and affiliate</p> <p><code>=:DOJIMA.DOJ:dojima1el4ufmhll3yw7zxzszvfakrk66j7fx0tvcslym:19779138111</code></p> <p><code>s:BNB/BUSD-BD1:dojima15s4apx9ap7lazpsct42nmvf0t6am4r3w0r64f2:628197586176</code></p>"},{"location":"core/concepts/transaction.memos/#adding-and-removing-liquidity","title":"Adding and Removing Liquidity","text":"<p>Entering and Leaving a Pool</p> <p>To deposit assets on Hermes Chain, you need a compatible wallet with your assets connected to one of the many User Interfaces.  Liquidity providers can add liquidity to any of the active or pending pools. There is no minimum deposit amount, however,  your deposit will have to cover the deposit and later a withdrawal fee costs. The ability to manage and withdraw assets is completely noncustodial  and does not require any KYC or permission process. Only the original depositor has the ability to withdraw them (based on the address used to deposit the assets). Note, every time you add liquidity, Impermanent Loss Protection time resets.</p> <p>While Symmetrically additions are recommended, Asymmetrical additions are supported, below are the rules:</p> <p>If you add symmetrically first;</p> <ul> <li> <p>You will be able to add asymmetrically with DOJ later </p> </li> <li> <p>You will be able to add asymmetrically with ASSET later but it would create a new LP position </p> </li> <li> <p>You will be able to add symmetrically later</p> </li> </ul> <p>If you add asymmetrically with ASSET first;</p> <ul> <li> <p>You will be able to add asymmetrically with DOJ later but it would create a new LP position</p> </li> <li> <p>You will be able to add asymmetrically with ASSET later</p> </li> <li> <p>You will be able to add symmetrically later but it would create a new LP position</p> </li> </ul> <p>If you add asymmetrically with DOJ first:</p> <ul> <li>You will be able to add asymmetrically with DOJ later</li> <li>You will be able to add asymmetrically with ASSET later but it would create a new LP position</li> <li>You will not be able to add symmetrically later </li> </ul>"},{"location":"core/concepts/transaction.memos/#ilp-how-hermes-chain-protects-its-liquidity-providers","title":"ILP: How Hermes Chain protects its Liquidity Providers","text":"<p>Liquidity Providers will receive 100% Impermanent Loss Protection (ILP) after they have been in the pool for 100 days, getting 1% coverage for each day in the pool. Essentially this means you are adding 1% protection for every day that you provide liquidity. 49 days provided = 49% IL protection, 100 days = 100% IL protection.</p> <p>Impermanent Loss Protection (ILP) ensures that you will not be worse off providing liquidity into Hermes Chain than just holding two assets, DOJ and ASSET, in your wallet. Protection is always recorded and applied symmetrically to both assets after the deposit is rebalanced to 50/50. Impermanent Loss Protection can also be thought of as deposit protection compared to holding both assets. Minimum withdrawal value will be the same as if you held both assets.</p> <p>NOTE: The coverage will reset every time you add liquidity to the same pool and withdrawal fees will affect the withdrawal amount. Partial withdrawals do not reset the ILP counter.</p>"},{"location":"core/concepts/transaction.memos/#add-liquidity","title":"Add Liquidity","text":"<p>There are rules for adding liquidity, see the rules here and regardless of how it is added, it is subject to Impermanent Loss Protection. </p> <p><code>ADD:POOL:PAIREDADDR:AFFILIATE:FEE</code></p> Parameter Note Conditions Payload The asset to add liquidity with. Must be supported by Hermes Chain. <code>ADD</code> The Add Liquidity handler. also <code>a,</code> <code>+</code> <code>:POOL</code> The pool to add liquidity to. Can be shortened. <code>:PAIREDADDR</code> The other address to link with. If on external chain, link to HERMES address. If on Hermes Chain, link to external address. If a paired address is found, the LP is matched and added. If none is found, the liquidity is put into pending. Optional. If not specified, a single-sided add-liquidity action is created. <code>:AFFILIATE</code> The affiliate address. The affiliate is added in to the pool as an LP. Optional. Must be HERMESName or HERMES Address. <code>:FEE</code> The affiliate fee. Fee is allocated to the affiliate. Optional. Limited from 0 to 1000 Basis Points. <p>Examples</p> <p><code>ADD:POOL</code> single-sided add liquidity.  If this is a position\u2019s first add, liquidity can only be withdrawn to the same address.</p> <p><code>+:POOL:PAIREDADDR</code> add on both sides. </p> <p><code>a:POOL:PAIREDADDR:AFFILIATE:FEE</code> add with affiliate</p> <p><code>+:BTC.BTC:</code></p>"},{"location":"core/concepts/transaction.memos/#withdraw-liquidity","title":"Withdraw Liquidity","text":"<p>Withdraw liquidity from a pool.</p> <p>A withdrawal can be either dual-sided (wtihdrawn based on pool\u2019s price) or entirely single-sided (converted to one side and sent out).</p> <p><code>WITHDRAW:POOL:BASISPOINTS:ASSET</code></p> Parameter Note Conditions Payload Send just enough of the asset to cause the transaction to be picked up by Hermes Chain. Caution Dust Limits: BTC,BCH,LTC chains 10k sats; DOGE 1m Sats; ETH 0 wei; HERMES 0 DOJ. <code>WITHDRAW</code> The withdraw handler. also <code>-,</code> <code>wd</code> <code>:POOL</code> The pool to withdraw liquidity from Can be shortened. <code>:BASISPOINTS</code> Basis points (0-10000, where 10000=100%) <code>:ASSET</code> Single-sided withdraw to one side. Optional. Can be shortened. Must be either DOJ or the ASSET. <p>Examples</p> <p><code>WITHDRAW:POOL:10000</code> dual-sided 100% withdraw liquidity.  If a single-address position, this withdraws single-sidedly instead.</p> <p><code>-:POOL:1000</code> dual-sided 10% withdraw liquidity.</p> <p><code>wd:POOL:5000:ASSET</code> withdraw 50% liquidity as the asset specified while the rest stays in the pool, eg: <code>wd:BTC.BTC:5000:BTC.BTC</code></p>"},{"location":"core/concepts/transaction.memos/#donate-reserve","title":"DONATE &amp; RESERVE","text":"<p>Donate to a pool or the RESERVE.</p> <p><code>DONATE:POOL</code></p> Parameter Note Conditions Payload The asset to donate to a Hermes Chain pool. Must be supported by Hermes Chain. Can be DOJ or ASSET. <code>DONATE</code> The donate handler. also <code>%</code> <code>:POOL</code> The pool to withdraw liquidity from. Can be shortened. <p><code>RESERVE</code></p> Parameter Note Conditions Payload HERMES.DOJ The DOJ to credit to the RESERVE. <code>RESERVE</code> The reserve handler."},{"location":"core/concepts/transaction.memos/#bond-unbond-leave","title":"BOND, UNBOND &amp; LEAVE","text":"<p>Perform node maintenance features. </p> <p><code>BOND:NODEADDR:PROVDER:FEE</code></p> Parameter Note Conditions Payload The asset to bond to a  Node. Must be DOJ. <code>BOND</code> The bond handler. Anytime <code>:NODEADDR</code> The node to bond with. <code>:PROVIDER</code> Whitelist in a provider. Optional, add a provider <code>:FEE</code> Specify an Operator Fee in Basis Points. Optional, default will be the mimir value (2000 Basis Points). Can be changed anytime. <p><code>UNBOND:NODEADDR:AMOUNT</code></p> Parameter Note Conditions Payload None required Use <code>MsgDeposit</code> <code>UNBOND</code> The unbond handler. <code>:NODEADDR</code> The node to unbond from. Must be in standby only. <code>:AMOUNT</code> The amount to unbond. In 1e8 format. If setting more than actual bond, then capped at bond. <p><code>LEAVE:NODEADDR</code></p> Parameter Note Conditions Payload None required Use <code>MsgDeposit</code> <code>LEAVE</code> The leave handler. <code>:NODEADDR</code> The node to force to leave. If in Active, request a churn out to Standby for 1 churn cycle. If in Standby, forces a permanent leave. <p>Examples</p> <p><code>BOND:hermes1xd4j3gk9frpxh8r22runntnqy34lwzrdkazldh</code></p> <p><code>LEAVE:hermes18r8gnfm4qjak47qvpjdtw66ehsx49w99c5wewd</code></p>"},{"location":"core/concepts/transaction.memos/#noop","title":"NOOP","text":"<p>Dev-centric type to fix Hermes Chain state. Caution: may cause loss of funds if not done exactly right at the right time. </p> <p>NOOP</p> Parameter Note Conditions Payload The asset to credit to a vault. Must be ASSET or DOJ. <code>NOOP</code> The  noop handler Adds to the vault balance, but does not add to the pool. <code>:NOVAULT</code> Do not credit the vault. Optional. Just fix the insolvency issue."},{"location":"core/concepts/transaction.memos/#refunds","title":"Refunds","text":"<p>The following are the conditions for refunds:</p> Conditions Note Invalid <code>MEMO</code> If the <code>MEMO</code> is incorrect the user will be refunded. Invalid Assets If the asset for the transaction is incorrect (adding an asset into a wrong pool) the user will be refunded. Exceeding Price Limit If the final value achieved in a trade differs to expected, they are refunded. <p>Refunds cost fees to prevent Denial of Service attacks. The user will pay the correct outbound fee for that chain.</p>"},{"location":"core/concepts/transaction.memos/#asset-notation","title":"Asset Notation","text":"<p>The following is the notation for Assets in Hermes Chain\u2019s system:</p> <p></p> <p>Note: CHAIN.ASSET denotes native asset. CHAIN/ASSET denotes a Synthetic Asset</p> <p>Examples</p> Assets Notation Bitcoin BTC.BTC (Native) Bitcoin BTC/BTC (Synth) Ethereum ETH.ETH USDT ETH.USDT-0xdac17f958d2ee523a2206206994597c13d831ec7 BNB BNB.BNB (Native) BNB BNB/BNB (Synth) DOJ (BEP2) BNB.DOJ-B1A DOJ (NATIVE) HERMES.DOJ"},{"location":"core/concepts/transaction.memos/#asset-abbreviations","title":"Asset Abbreviations","text":"<p>Assets can be abbreviated using fuzzy logic. The following will all be matched appropriately. If there are conflicts then the deepest pool is matched. (To prevent attacks).</p> Notation ETH.USDT ETH.USDT-ec7 ETH.USDT-6994597c13d831ec7 ETH.USDT-0xdac17f958d2ee523a2206206994597c13d831ec7"},{"location":"core/concepts/transaction.memos/#mechanism-for-transaction-intent","title":"Mechanism for Transaction Intent","text":"Chain Mechanism Notes Bitcoin OP_RETURN Limited to 80 bytes. Ethereum Smart Contract Input Use <code>deposit(vault, asset, amount, memo)</code>function, where <code>memo</code> is string Binance Chain MEMO Each transaction has an optional memo, limited to 128 bytes. Monero Extra Data Each transaction can have attached <code>extra data</code> field, that has no limits. <p>Each chain will have a unique way of adding state to a transaction. Long assets can be shortened using Asset abbreviations (below) as well as HERMESNames to reduce the size of destination/affiliate addresses.\u200b</p>"},{"location":"core/d11kguide/arweave/","title":"<code>@d11k-ts/arweave</code>","text":""},{"location":"core/d11kguide/arweave/#modules","title":"Modules","text":"<ul> <li><code>client</code> - Custom client for communicating with arweave by using <code>arweave</code></li> </ul>"},{"location":"core/d11kguide/arweave/#installation","title":"Installation","text":"<pre><code>yarn add @d11k-ts/arweave\n</code></pre>"},{"location":"core/d11kguide/arweave/#documentation-basic-usage-examples","title":"Documentation : Basic usage examples","text":""},{"location":"core/d11kguide/arweave/#connect-wallet-to-new-arweaveclient","title":"Connect wallet to new ArweaveClient","text":"<ul> <li>Create new Arweave client</li> <li>Network default is <code>Mainnet</code></li> </ul> <pre><code>// Imports\nimport { ArweaveClient } from '@d11k-ts/arweave'\nimport { Network } from '@d11k-ts/client'\n\n//Connect wallet, get address and check balance \nconst connectWallet = async () =&gt; {\n  let phrase = \"phrase\"\n  // Mainnet\n  const arClient = new ArweaveClient({phrase})\n  // testnet\n  // const arClient = new ArweaveClient({\n  //   phrase,\n  //   network: Network.Testnet,\n  //   config:{\n    //   host: \"ar-test.h4s.dojima.network\",\n    //   protocol: \"https\",\n    //   timeout: 100000,\n    // }\n  // })\n  let address = arClient.getAddress()\n  try {\n      const balance = await arClient.getBalance(address)\n      console.log(`Adress: ${address} with balance ${balance}`)\n\n    } catch (error) {\n      console.log(`Caught: ${error} `)\n    }\n}\n</code></pre>"},{"location":"core/d11kguide/arweave/#mint-testnet-ar-tokens-using-arweaveclient","title":"Mint testnet \u2018ar\u2019 tokens using ArweaveClient","text":"<ul> <li>Create new Arweave client</li> <li>Network is set to <code>Testnet</code></li> <li>By default <code>2 AR</code> tokens were added to address on every call</li> <li><code>Note: Testnet tokens are not useful in Mainnet</code></li> </ul> <pre><code>//Connect wallet, get address, mint tokens and check balance \nconst mintTokensToWallet = async () =&gt; {\n  let phrase = \"phrase\"\n  // testnet\n  const arClient = new ArweaveClient({\n    phrase,\n    network: Network.Testnet,\n    config:{\n      host: \"ar-test.h4s.dojima.network\",\n      protocol: \"https\",\n      timeout: 100000,\n    }\n  })\n  let address = arClient.getAddress()\n  try {\n      await arClient.mintArTokens(address)\n        const balance = await arClient.getBalance(address)\n      console.log(`Address: ${address} with balance ${balance}`)\n\n    } catch (error) {\n      console.log(`Caught: ${error} `)\n    }\n}\n</code></pre>"},{"location":"core/d11kguide/arweave/#transfer-ar-using-arweaveclient","title":"Transfer ar using ArweaveClient","text":"<ul> <li>Create new ArweaveClient instance</li> <li>Build transaction</li> <li>Returns txHash as string</li> </ul> <pre><code>const transferAr = async () =&gt; {\n  // First initiate ArweaveClient\n  let amountToTransfer = 0.001\n  let recipient = 'insert address'\n  console.log(\"Building transaction\")\n  try {\n    const txid = await arClient.transfer({ \n      recipient,\n      amount: amountToTransfer\n    })\n    console.log(`Transaction sent: ${txid}`)\n    return txid\n  } catch (error) {\n    console.log(`Caught: ${error} `)\n  }\n}\n</code></pre>"},{"location":"core/d11kguide/arweave/#get-transaction-data-transaction-history","title":"Get transaction Data &amp; transaction History","text":"<ul> <li>Create new ArweaveClient instance</li> <li>Call getTransactionData(hash) returns hash-details</li> <li>Call getTransactionsHistory(address) returns list of transactions (if any)</li> </ul> <pre><code>// Retrieve transaction data for a particular hash\nconst transactionData = async () =&gt; {\n  let hash = \"insert hash\"\n  let Address = arClient.getAddress()\n  try {\n    const txData = await arClient.getTransactionData(\n      hash\n    )\n    console.log(`Transaction data ${txData}`)\n  } catch (error) {\n    console.log(`Caught: ${error} `)\n  }\n}\n\n// Retrieve transaction history for a particular address\nconst transactionHistory = async () =&gt; {\n  let Address = arClient.getAddress()\n  try {\n    const txHistory = await arClient.getTransactionsHistory({\n      address: Address\n    })\n    console.log(`Found ${txHistory.total.toString()}`)\n    txHistory.txs.forEach(tx =&gt; console.log(tx))\n  } catch (error) {\n    console.log(`Caught: ${error} `)\n  }\n}\n</code></pre>"},{"location":"core/d11kguide/arweave/#get-gas-fee-for-transaction","title":"Get gas fee for transaction","text":"<ul> <li>Retrieve gas fee for transaction from build tx</li> </ul> <pre><code>const fee = async () =&gt; {\n  let amountToTransfer = 0.001\n  let recipient = 'insert address'\n  try {\n    const rawTx = await arClient.createTransaction(\n        recipient, \n       amountToTransfer\n    )\n    const fees = arClient.getFees(rawTx)\n    console.log(`Fees Fast: ${fees.average} Fastest: ${fees.fast} Average: ${fees.slow}`)\n  } catch (error) {\n    console.log(`Caught ${error}`)\n  }\n}\n</code></pre>"},{"location":"core/d11kguide/arweave/#get-arweave-inbound-address","title":"Get Arweave Inbound address","text":"<ul> <li>Get Arweave Inbound address from hermes chain</li> <li>Can be used in adding liquidity pool and swapping</li> </ul> <pre><code>const inboundAddr = async () =&gt; {\n  try {\n    const inboundAddress = await arClient.getArweaveInboundAddress()\n    console.log('Inbound Address :: ', inboundAddress)\n  } catch (error) {\n    console.log(`Caught ${error}`)\n  }\n}\n</code></pre>"},{"location":"core/d11kguide/arweave/#get-default-liquidity-pool-gas-fee","title":"Get default liquidity pool gas fee","text":"<ul> <li>Get Arweave default liquidity pool gas fee from hermes chain</li> </ul> <pre><code>const defaultLPGasFee = async () =&gt; {\n  try {\n    const LPDefaultGasFee = await arClient.getDefaultLiquidityPoolGasFee()\n    console.log('Liquidity pool default gas fee :: ', LPDefaultGasFee)\n  } catch (error) {\n    console.log(`Caught ${error}`)\n  }\n}\n</code></pre>"},{"location":"core/d11kguide/arweave/#add-ar-token-into-liquidity-pool","title":"Add AR token into liquidity pool","text":"<ul> <li>Add AR tokens into liquidity pool</li> <li>Get Arweave Inbound address from hermes chain</li> </ul> <pre><code>const addARToLiquidityPool = async () =&gt; {\n  let amountToTransfer = 0.001\n  const inboundAddress = await arClient.getArweaveInboundAddress()\n  try {\n    const liquidityPoolHash = await arClient.addLiquidityPool(\n      amountToTransfer,\n      inboundAddress,\n      dojAddress,           // optional dojima address\n    )\n    console.log('Liquidity pool hash : ', liquidityPoolHash)\n  } catch (error) {\n    console.log(`Caught ${error}`)\n  }\n}\n</code></pre>"},{"location":"core/d11kguide/arweave/#swap-ar-tokens","title":"Swap AR tokens","text":"<ul> <li>Swap AR tokens to required token using receiver address</li> <li>Get Arweave Inbound address from hermes chain</li> <li>Supported tokens for swapping - \u2018DOT\u2019, \u2018DOJ\u2019, \u2018ETH\u2019, \u2018SOL\u2019</li> </ul> <pre><code>import {SwapAssetList} from '@d11k-ts/utils'\n\nconst swapAR = async () =&gt; {\n  let amountToTransfer = 0.001\n  const inboundAddress = await arClient.getArweaveInboundAddress()\n  try {\n    const swapHash = await arClient.swap(\n       amountToTransfer,\n      SwapAssetList,\n      inboundAddress,\n      reciepient                // Respective receiver SwapAssetList token address\n    )\n    console.log('Swap tx hash : ', swapHash)\n  } catch (error) {\n    console.log(`Caught ${error}`)\n  }\n}\n</code></pre>"},{"location":"core/d11kguide/arweave/#example-code","title":"Example Code","text":"<p>For sample code check out example test case in <code>Arweeave</code></p>"},{"location":"core/d11kguide/binance-becon/","title":"<code>@d11k-ts/binance-beacon</code>","text":""},{"location":"core/d11kguide/binance-becon/#modules","title":"Modules","text":"<ul> <li><code>client</code> - Custom client for communicating with Binance Chain by   using <code>binance-chain/javascript-sdk</code></li> <li><code>types</code> - TypeScript type definitions   for <code>binance-chain/javascript-sdk</code> (not completed)   and <code>Binance WebSocket Streams</code>.</li> <li><code>util</code> - Utitilies for using <code>binance-chain/javascript-sdk</code></li> </ul>"},{"location":"core/d11kguide/binance-becon/#installation","title":"Installation","text":"<pre><code>yarn add @d11k-ts/binance-beacon\n</code></pre> <p>Following dependencies have to be installed into your project. These are not included in <code>@d11k-ts/binance-beacon</code>.</p> <pre><code>yarn add @binance-chain/javascript-sdk\n</code></pre>"},{"location":"core/d11kguide/binance-becon/#service-providers","title":"Service Providers","text":"<p>This package uses the following service providers:</p> Function Service Notes Rate limits Balances Binance Dex https://docs.binance.org/api-reference/dex-api/paths.html#apiv1accountaddress 5 requests per IP per second. Transaction history Binance Dex https://docs.binance.org/api-reference/dex-api/paths.html#apiv1transactions 60 requests per IP per minute Transaction details by hash Binance Dex https://docs.binance.org/api-reference/dex-api/paths.html#apiv1txhash 10 requests per IP per second Transaction fees Binance Dex https://docs.binance.org/api-reference/dex-api/paths.html#apiv1fees 1 request per IP per second Transaction broadcast Binance Dex https://docs.binance.org/api-reference/dex-api/paths.html#apiv1broadcast 5 requests per IP per second Explorer Binance Dex Explorer https://explorer.binance.org <p>This package gets the node information (<code>https://docs.binance.org/api-reference/dex-api/paths.html#apiv1node-info</code>) to transfer tokens.</p>"},{"location":"core/d11kguide/binance-becon/#documentation-basic-usage-example","title":"Documentation : Basic Usage Example","text":""},{"location":"core/d11kguide/binance-becon/#connect-wallet-to-new-binance-beacon-chain-client","title":"Connect wallet to new Binance-beacon Chain Client","text":"<ul> <li>Create new BinanceBeaconChain client</li> <li>Network default is <code>Mainnet</code></li> </ul> <pre><code>//Imports \nimport {BinanceBeaconClient} from '@d11k-ts/binance-beacon'\nimport {Network} from '@d11k-ts/client'\nimport {AssetBNB, assetAmount, assetToBase, baseToAsset} from '@d11k-ts/utils'\n\n// Connect wallet to new btc client \nconst connectWallet = async () =&gt; {\n  let phrase = \"phrase\"\n  // mainnet\n  const bnbClient = new BinanceBeaconClient({phrase})\n  // testnet\n  // const bnbClient = new BinanceBeaconClient({ phrase, network: Network.Testnet })\n  let address = bnbClient.getAddress()\n  console.log(`Asset Address is: ${address}`)\n\n  let balances = await bnbClient.getBalance(address, [AssetBNB])\n  try {\n    let assetAmount = (baseToAsset(balances[0].amount)).amount()\n    console.log(`with balance: ${assetAmount}`)\n  } catch (error) {\n    console.log('no balance')\n  }\n}\n</code></pre>"},{"location":"core/d11kguide/binance-becon/#transfer-bnb-using-binance-beacon-client","title":"Transfer bnb using Binance-beacon Client","text":"<ul> <li>Default feeRate is <code>fast</code></li> <li>Create new Binance-beaconClient instance</li> <li>Convert amount to transfer to base amount</li> <li>Build transaction</li> <li>Returns txHash as string</li> </ul> <pre><code>const transferBnb = async () =&gt; {\n  // First initiate BinanceBeaconClient\n  let amountToTransfer = 0.0001\n  let recipient = 'insert address'\n  let amount = assetToBase(assetAmount(amountToTransfer, 8))\n  console.log(\"Building transaction\")\n  try {\n    const txid = await bnbClient.transfer({\n      \"amount\": amount,\n      \"recipient\": recipient,\n      \"memo\": \"memo\",             // optional\n      \"walletIndex\": 0,            // optional (default)\n      \"asset\": AssetBNB,          // optional (default)\n\n    })\n    console.log(`Amount ${amount.amount().toString()} ${AssetBNB.symbol} TransactionId: ${txid}`)\n  } catch (error) {\n    console.log(`Transfer failed: ${error}`)\n  }\n}\n</code></pre>"},{"location":"core/d11kguide/binance-becon/#get-transaction-data-transaction-history","title":"Get transaction Data &amp; transaction History","text":"<ul> <li>Create new Binance-beaconClient instance</li> <li>Call getTransactionData(hash) returns hash-details</li> <li>Call getTransactions(address) returns list of transactions (if any)</li> </ul> <pre><code>let hash = \"insert hash string\"\ntry {\n  const txData = await bnbClient.getTransactionData(hash)\n  console.log(txData)\n\n} catch (error) {\n  console.log(`Error: ${error}`)\n}\n\n// Retrieve transaction history for a set address\n// txHistoryParams &gt; address, offset, startTime, asset? \ntry {\n  const txHistory = await bnbClient.getTransactions({address: Address, limit: 4})\n  console.log(`Found ${txHistory.total.toString()}`)\n  txHistory.txs.forEach(tx =&gt; console.log(tx))\n\n} catch (error) {\n  console.log(`Error: ${error}`)\n}\n</code></pre>"},{"location":"core/d11kguide/binance-becon/#get-transfer-fees","title":"Get transfer fees","text":"<ul> <li>Bnb has fixed fee client, average, fast and fastest return the same value.</li> <li>getFees() returns current fees for the network</li> </ul> <pre><code>try {\n  const fee = await bnbClient.getFees()\n  console.log(`Fees average:  ${baseToAsset(fee.average).amount()}`)\n  console.log(`Fees fast:  ${baseToAsset(fee.fast).amount()}`)\n  console.log(`Fees fastest:  ${baseToAsset(fee.fastest).amount()}`)\n\n} catch (error) {\n  console.log(error)\n}\n</code></pre>"},{"location":"core/d11kguide/binance-becon/#example-code","title":"Example Code","text":"<p>For sample code check out example test case in <code>Binance-Beacon</code></p>"},{"location":"core/d11kguide/bitcoin/","title":"<code>@d11k-ts/bitcoin</code>","text":""},{"location":"core/d11kguide/bitcoin/#modules","title":"Modules","text":"<ul> <li><code>client</code> - Client for communicating with Bitcoin using BIP39   , bitcoinjs-lib and WIF</li> <li><code>types</code> - TypeScript type definitions based on <code>@d11k-ts/client</code> and <code>@d11k-ts/utils</code></li> <li><code>utils</code> - Utitilies for using <code>haskoin</code> and <code>sochain</code> endpoints in Bitcoin client</li> </ul>"},{"location":"core/d11kguide/bitcoin/#installation","title":"Installation","text":"<pre><code>yarn add @d11k-ts/bitcoin\n</code></pre> <p>Following dependencies have to be installed into your project. These are not included in <code>@d11k-ts/bitcoin</code>.</p> <pre><code>yarn add axios coinselect\n</code></pre>"},{"location":"core/d11kguide/bitcoin/#service-providers","title":"Service Providers","text":"<p>This package uses the following service providers:</p> Function Service Notes Balances Sochain https://chain.so/api/v2#get-balance Transaction history Sochain https://chain.so/api/v2#get-display-data-address, https://chain.so/api/v2#get-tx Transaction details by hash Sochain https://chain.so/api/v2#get-tx Transaction fees Bitgo https://app.bitgo.com/docs/#operation/v2.tx.getfeeestimate Transaction broadcast / utxos Sochain / Haskoin https://chain.so/api/v2#send-transaction,    https://haskoin.ninerealms.com/btc Explorer Blockstream https://blockstream.info <p>Sochain API rate limits: https://chain.so/api/v2#rate-limits (300 requests/minute)</p> <p>Bitgo API rate limits: https://app.bitgo.com/docs/#section/Rate-Limiting (10 requests/second)</p> <p>Haskoin API : https://haskoin.ninerealms.com/btc</p>"},{"location":"core/d11kguide/bitcoin/#documentation-basic-usage-example","title":"Documentation : Basic Usage Example","text":""},{"location":"core/d11kguide/bitcoin/#connect-wallet-to-new-bitcoinclient","title":"Connect wallet to new BitcoinClient","text":"<ul> <li>Create new Bitcoin client</li> <li>Network default is <code>Mainnet</code></li> </ul> <pre><code>//Imports\nimport {BTC_DECIMAL, BitcoinClient} from '@d11k-ts/bitcoin'\nimport {Network} from '@d11k-ts/client'\nimport {AssetBTC, assetAmount, assetToBase, baseToAsset} from '@d11k-ts/utils'\n\n// Connect wallet to new btc client \nconst connectWallet = async () =&gt; {\n  let phrase = \"phrase\"\n  // Mainnet\n  const btcClient = new BitcoinClient({phrase})\n  // testnet\n  // const bnbClient = new BitcoinClient({ phrase, network: Network.Testnet })\n  let address = btcClient.getAddress()\n  console.log(`Asset Address is: ${address}`)\n\n  let balances = await btcClient.getBalance(address, [AssetBTC])\n  try {\n    let assetAmount = (baseToAsset(balances[0].amount)).amount()\n    console.log(`Asset address balance: ${assetAmount}`)\n  } catch (error) {\n    console.log('Address has no balance')\n  }\n}\n</code></pre>"},{"location":"core/d11kguide/bitcoin/#transfer-btc-using-bitcoinclient","title":"Transfer btc using BitcoinClient","text":"<ul> <li>Default feeRate is <code>fast</code></li> <li>Create new BitcoinClient instance</li> <li>Convert amount to transfer to base amount</li> <li>Build transaction</li> <li>Returns txHash as string</li> </ul> <pre><code>const transfer = async () =&gt; {\n  // First initiate BitcoinClient\n  let amountToTransfer = 0.0001\n  let recipient = 'insert address'\n  let amount = assetToBase(assetAmount(amountToTransfer, BTC_DECIMAL))\n  try {\n    const txid = await btcClient.transfer({\n      asset: AssetBTC,\n      recipient: recipient,\n      amount: amount,\n      memo: \"payment\"         // optional\n    })\n    console.log(`Amount: ${amount.amount().toString()} ${AssetBTC.symbol} Transaction id: ${txid}`)\n  } catch (error) {\n    console.log(`Transfer failed ${error}`)\n  }\n}\n</code></pre>"},{"location":"core/d11kguide/bitcoin/#transfer-by-setting-feerate","title":"Transfer by setting feeRate","text":"<ul> <li>Build transaction using parameters</li> <li>Set feeRate in transaction parameters Or use getFeeRates()</li> </ul> <pre><code>//Returns FeeRates &gt; this allows for dynamic feeRate adjustment on selection\nconst {fast, fastest, average} = await btcClient.getFeeRates()\n\ntry {\n  const txid = await btcClient.transfer({\n    'asset': AssetBTC,\n    'recipient': recipient,\n    'amount': amount,\n    'memo': \"test transfer\",        // optional\n    feeRate: fast\n  })\n  console.log(`Amount ${baseToAsset(amount).amount()} ${AssetBTC.symbol} Transaction id ${txid}`)\n} catch (error) {\n  console.log(`Transfer failed ${error}`)\n}\n</code></pre>"},{"location":"core/d11kguide/bitcoin/#get-fees-feerates-estimations","title":"Get Fees &amp; FeeRates estimations","text":"<pre><code>//Get Fees - returns FeeOption &amp; fee in BaseAmount \n` Fees Fast: 0.00001 Fastest: 0.0000468 Average: 0.00001 `\ntry {\n  const {fast, fastest, average} = await btcClient.getFees()\n  console.log(`Fees Fast: ${baseToAsset(fast).amount()} Fastest: ${baseToAsset(fastest).amount()} Average: ${baseToAsset(average).amount()}`)\n\n} catch (error) {\n  console.log(error)\n}\n\n//Get FeeRates - returns FeeOption &amp; rate  \n` Fast: 12, Fastest 60, Average: 6 `\n\ntry {\n  const {fast, fastest, average} = await btcClient.getFeeRates()\n  console.log(`Fast: ${fast}, Fastest ${fastest}, Average: ${average}`)\n\n} catch (error) {\n  console.log(error)\n}\n</code></pre>"},{"location":"core/d11kguide/bitcoin/#get-transaction-data","title":"Get transaction data","text":"<ul> <li>Create new BitcoinClient instance</li> <li>Call getTransaction(hash) returns hashDetails</li> </ul> <pre><code>const transactionData = async () =&gt; {\n  let hash = \"txhash string\"\n  try {\n    const txData = await btcClient.getTransactionData(hash)\n    console.log(`From ${JSON.stringify(txData)}`)\n\n  } catch (error) {\n    console.log(`Error: ${error}`)\n  }\n}\n</code></pre>"},{"location":"core/d11kguide/bitcoin/#get-transaction-history","title":"Get Transaction History","text":"<ul> <li>Create new Binance-beaconClient instance</li> <li>Call getTransactions(address) returns list of transactions (if any)</li> </ul> <pre><code>const transactionHistory = async () =&gt; {\n  // Retrieve transaction history for a set address\n  // txHistoryParams &gt; address, offset, startTime, asset?\n  try {\n    const txHistory = await btcClient.getTransactions({address: Address, limit: 4})\n    console.log(`Found ${txHistory.total.toString()}`)\n    txHistory.txs.forEach(tx =&gt; console.log(tx))\n\n  } catch (error) {\n    console.log(`Error: ${error}`)\n  }\n}\n</code></pre>"},{"location":"core/d11kguide/bitcoin/#example-code","title":"Example Code","text":"<p>For sample code check out example test case in <code>Bitcoin</code></p>"},{"location":"core/d11kguide/client/","title":"<code>@d11k-ts/client</code>","text":""},{"location":"core/d11kguide/client/#installation","title":"Installation","text":"<pre><code>yarn add @d11k-ts/client\n</code></pre> <p>Initialise and set up the client to connect to its necessary third-party services to fulfil basic functionality. The third-party services used must be at a minimum to fulfil the wallet functionality, such as displaying balances and sending transactions.</p>"},{"location":"core/d11kguide/client/#d11k-ts-wallet-client-interface","title":"D11K-ts Wallet Client Interface","text":"<p>A specification for a generalised interface for crypto wallets clients, to be used by D11K-ts implementations. The client should not have any functionality to generate a key, instead, the <code>asgardex-crypto</code> library should be used to ensure cross-chain compatible keystores are handled. The client is only ever passed a master BIP39 phrase, from which a temporary key and address is decoded.</p>"},{"location":"core/d11kguide/cosmos/","title":"<code>@d11k-ts/cosmos</code>","text":"<p>Cosmos Module for <code>D11K</code> clients</p>"},{"location":"core/d11kguide/cosmos/#installation","title":"Installation","text":"<pre><code>yarn add @d11k-ts/cosmos\n</code></pre> <p>Following dependencies have to be installed into your project. These are not included in <code>@d11k-ts/cosmos</code>.</p> <pre><code>yarn add axios @cosmos-client/core@^0.45.13\n</code></pre> <p>NOTE : Make sure to install same version of @cosmos-client/core as @d11k-ts/cosmos is using (currently \u201c@cosmos-client/core\u201d: \u201c^0.45.13\u201d, ). In other case things might break.</p>"},{"location":"core/d11kguide/cosmos/#cosmos-client-testing","title":"Cosmos Client Testing","text":"<pre><code>yarn install\nyarn test\n</code></pre>"},{"location":"core/d11kguide/cosmos/#documentation","title":"Documentation","text":"<p>Yet to be added.</p>"},{"location":"core/d11kguide/cosmos/#service-providers","title":"Service Providers","text":"<p>This package uses the following service providers:</p> Function Service Notes Balances Cosmos RPC https://cosmos.network/rpc/v0.37.9 (<code>GET /bank/balances/{address}</code>) Transaction history Cosmos RPC https://cosmos.network/rpc/v0.37.9 (<code>GET /txs</code>) Transaction details by hash Cosmos RPC https://cosmos.network/rpc/v0.37.9 (<code>GET /txs/{hash}</code>) Transaction broadcast Cosmos RPC https://cosmos.network/rpc/v0.37.9 (<code>POST /txs</code>) Explorer BigDipper https://cosmos.bigdipper.live <p>Rate limits: No</p>"},{"location":"core/d11kguide/crypto/","title":"<code>@d11k-ts/crypto</code>","text":"<p>The D11K CRYPTO package is a crypto package used by all <code>D11K</code> clients.</p> <p>D11K-CRYPTO encrypts a master phrase to a keystore. This keystore can then be exported to other D11K wallets or stored securely.</p> <p>Users can export their phrase and import them into other wallets since it is a BIP39 compatible phrase.</p>"},{"location":"core/d11kguide/crypto/#installation","title":"Installation","text":"<ul> <li>Install <code>@d11k-ts/crypto</code> from <code>npm</code></li> </ul> <pre><code>yarn add @d11k-ts/crypto\n</code></pre>"},{"location":"core/d11kguide/crypto/#build","title":"Build","text":"<pre><code>yarn build\n</code></pre>"},{"location":"core/d11kguide/crypto/#tests","title":"Tests","text":"<pre><code>yarn test\n</code></pre>"},{"location":"core/d11kguide/crypto/#constants","title":"Constants","text":"<pre><code>// Crypto Constants for chain\nconst cipher = 'aes-128-ctr'\nconst kdf = 'pbkdf2'\nconst prf = 'hmac-sha256'\nconst dklen = 32\nconst c = 262144\nconst hashFunction = 'sha256'\nconst meta = 'd11k-keystore'\n</code></pre>"},{"location":"core/d11kguide/crypto/#keystore-type","title":"Keystore Type","text":"<pre><code>export type Keystore = {\n  address: string,\n  crypto: {\n    cipher: string,\n    ciphertext: string,\n    cipherparams: {\n      iv: string\n    },\n    kdf: string,\n    kdfparams: {\n      prf: string,\n      dklen: number,\n      salt: string,\n      c: number,\n    },\n    mac: string,\n  },\n  id: string,\n  version: number,\n  meta: string,\n}\n</code></pre>"},{"location":"core/d11kguide/ethereum/","title":"<code>@d11k-ts/ethereum</code>","text":""},{"location":"core/d11kguide/ethereum/#modules","title":"Modules","text":"<ul> <li><code>client</code> - Custom client for communicating with Ethereum by using <code>ethers</code></li> </ul>"},{"location":"core/d11kguide/ethereum/#installation","title":"Installation","text":"<pre><code>yarn add @d11k-ts/ethereum\n</code></pre> <p>Following dependencies have to be installed into your project. These are not included in <code>@d11k-ts/ethereum</code>.</p> <pre><code>yarn add axios ethers\n</code></pre>"},{"location":"core/d11kguide/ethereum/#service-providers","title":"Service Providers","text":"<p>This package uses the following service providers:</p> Function Service Notes ETH balances Etherscan https://etherscan.io/apis#accounts (module=<code>account</code>, action=<code>balance</code>) Token balances Etherscan https://etherscan.io/apis#tokens (module=<code>account</code>, action=<code>tokenbalance</code>) ETH transaction history Etherscan https://etherscan.io/apis#accounts (module=<code>account</code>, action=<code>txlistinternal</code>) Token transaction history Etherscan https://etherscan.io/apis#accounts (module=<code>account</code>, action=<code>tokentx</code>) Transaction fees Etherscan https://etherscan.io/apis#gastracker (module=<code>gastracker</code>, action=<code>gasoracle</code>) Transaction broadcast Etherscan https://sebs.github.io/etherscan-api/#eth_sendrawtransaction Explorer Etherscan https://etherscan.io/ <p>Etherscan API rate limits: https://info.etherscan.com/api-return-errors/</p> <ul> <li> <p>Testnet API - https://api-goerli.etherscan.io/ , Explorer - https://goerli.etherscan.io/</p> </li> <li> <p>This package uses <code>etherjs</code> library, by default it uses several providers. (<code>https://docs.ethers.io/v5/api-keys/</code>)</p> </li> </ul>"},{"location":"core/d11kguide/ethereum/#documentation-basic-usage-examples","title":"Documentation : Basic usage examples","text":""},{"location":"core/d11kguide/ethereum/#connect-wallet-to-new-ethereumclient","title":"Connect wallet to new EthereumClient","text":"<ul> <li>Create new EthereumChain client</li> <li>Network default is <code>Mainnet</code></li> </ul> <pre><code>// Imports\nimport {Network} from '@d11k-ts/client'\nimport {ETH_DECIMAL, EthereumClient} from '@d11k-ts/ethereum'\nimport {assetAmount, assetToBase, baseToAsset} from '@d11k-ts/utils'\n\n//Connect wallet, validate address and check balance \nconst connectWallet = async () =&gt; {\n  let phrase = \"phrase\"\n  // Mainnet\n  const ethClient = new EthereumClient({phrase})\n  // testnet\n  // const bnbClient = new EthereumClient({ \n  //    phrase, \n  //    network: Network.Testnet,\n  //    etherscanApiKey: 'get-etherscan-api-key',\n  //    ethplorerApiKey: 'get-ethplorer-api-key',\n  //  })\n  let address = ethClient.getAddress()\n  let isValid = ethClient.validateAddress(address)\n  console.log(address)\n  if (isValid === true) {\n    try {\n      const balance = await ethClient.getBalance(address)\n      let assetAmount = (baseToAsset(balance[0].amount)).amount()\n      console.log(`Adress: ${address} with balance ${assetAmount}`)\n\n    } catch (error) {\n      console.log(`Caught: ${error} `)\n    }\n  } else {\n    console.log(`Address: ${address} is invalid`)\n  }\n}\n</code></pre>"},{"location":"core/d11kguide/ethereum/#transfer-eth-using-ethereumclient","title":"Transfer eth using EthereumClient","text":"<ul> <li>Create new EthereumClient instance</li> <li>Convert amount to transfer to base amount</li> <li>Build transaction</li> <li>Returns txHash as string</li> </ul> <pre><code>// Transfer ethereum other TxParams &gt; feeOptionKey?, gasLimit?, gasPrice? \nconst transferEth = async () =&gt; {\n  // First initiate EthereumClient\n  let amountToTransfer = 0.001\n  let recipient = 'insert address'\n  let amount = assetToBase(assetAmount(amountToTransfer, ETH_DECIMAL))\n  console.log(\"Building transaction\")\n  try {\n    const txid = await ethClient.transfer({\n      amount,\n      recipient,\n      \"memo\": \"memo\",               // optional\n      \"walletIndex\": 0,             // optional (default)\n      \"asset\": AssetETH,            // optional (default)\n    })\n    console.log(`Transaction sent: ${txid}`)\n    return txid\n  } catch (error) {\n    console.log(`Caught: ${error} `)\n  }\n}\n</code></pre>"},{"location":"core/d11kguide/ethereum/#get-transaction-data-transaction-history","title":"Get transaction Data &amp; transaction History","text":"<ul> <li>Create new EthereumClient instance</li> <li>Call getTransactionData(hash) returns hash-details</li> <li>Call getTransactions(address) returns list of transactions (if any)</li> </ul> <pre><code>// Retrieve transaction data for a particular hash\nconst transactionData = async () =&gt; {\n  let hash = \"insert hash\"\n  let Address = ethClient.getAddress()\n  try {\n    const txData = await ethClient.getTransactionData(\n      hash,\n      Address         // optional\n    )\n    console.log(`Transaction data ${txData}`)\n  } catch (error) {\n    console.log(`Caught: ${error} `)\n  }\n}\n\n// Retrieve transaction history for a particular address\nconst transactionHistory = async () =&gt; {\n  let Address = ethClient.getAddress()\n  try {\n    const txHistory = await ethClient.getTransactions({address: Address})\n    console.log(`Found ${txHistory.total.toString()}`)\n    txHistory.txs.forEach(tx =&gt; console.log(tx))\n  } catch (error) {\n    console.log(`Caught: ${error} `)\n  }\n}\n</code></pre>"},{"location":"core/d11kguide/ethereum/#get-transfer-fees-estimations","title":"Get transfer Fees estimations","text":"<ul> <li>Retrieve estimated gas prices and gas limits from ethereum client</li> </ul> <pre><code>// Retrieve fee estimations from transaction parameters\nconst feeEstimations = async () =&gt; {\n  let amountToTransfer = 0.001\n  let amount = assetToBase(assetAmount(amountToTransfer, ETH_DECIMAL))\n  let recipient = \"insert address\"\n  try {\n    const fees = await ethClient.estimateFeesWithGasPricesAndLimits({\n      \"amount\": amount,\n      \"recipient\": recipient\n    })\n    console.log(`Fees average : ${baseToAsset(fees.fees.average).amount()}, gas limits: ${fees.gasLimit}, gas prices average: ${baseToAsset(fees.gasPrices.average).amount()}`)\n\n  } catch (error) {\n    console.log(`Caught: ${error} `)\n  }\n}\n</code></pre>"},{"location":"core/d11kguide/ethereum/#example-code","title":"Example Code","text":"<p>For sample code check out example test case in <code>Ethereum</code></p>"},{"location":"core/d11kguide/hermes/","title":"<code>@d11k-ts/hermes</code>","text":"<p>Hermes Module for Dojima chain</p>"},{"location":"core/d11kguide/hermes/#installation","title":"Installation","text":"<pre><code>yarn add @d11k-ts/hermes\n</code></pre> <p>Following dependencies have to be installed into your project. These are not included in <code>@d11k-ts/hermes</code>.</p> <pre><code>yarn add axios @cosmos-client/core@^0.45.13 bech32-buffer@^0.2.1\n</code></pre> <p>NOTE: Make sure to install same version of @cosmos-client/core and bech32-buffer as @d11k-ts/cosmos is using ( currently \u201c@cosmos-client/core\u201d: \u201c^0.45.13\u201d, \u201cbech32-buffer\u201d: \u201c^0.2.1\u201d). In other case things might break.</p>"},{"location":"core/d11kguide/hermes/#service-providers","title":"Service Providers","text":"<p>This package uses the following service providers:</p> Network Node RPC Testnet https://api-dev.h4s.dojima.network https://rpc-dev.h4s.dojima.network/ Mainnet NA NA <p>Note : \u2018Mainnet\u2019 is currently under process. Not applicable yet.</p> Function Service Notes Balances Cosmos RPC https://cosmos.network/rpc/v0.37.9 (<code>GET /bank/balances/{address}</code>) Transaction history Tendermint RPC https://docs.tendermint.com/master/rpc/#/Info/tx_search Transaction details by hash Cosmos RPC https://cosmos.network/rpc/v0.37.9 (<code>GET /txs/{hash}</code>) Transaction broadcast Cosmos RPC https://cosmos.network/rpc/v0.37.9 (<code>POST /txs</code>) <p>Rate limits: No</p>"},{"location":"core/d11kguide/hermes/#documentation-basic-usage-example","title":"Documentation: Basic usage example","text":""},{"location":"core/d11kguide/hermes/#connect-wallet-to-new-hermes-client","title":"Connect wallet to new Hermes Client","text":"<ul> <li>Create new HermesChain client</li> <li>Network default is <code>Mainnet</code></li> </ul> <pre><code>// Imports \nimport {Network} from '@d11k-ts/client'\nimport {DOJ_DECIMAL, HermesClient} from '@d11k-ts/hermes'\nimport {AssetDOJNative, assetAmount, assetToBase, baseToAsset} from '@d11k-ts/utils'\n\n\n// Create new instance of the client and query chain for balances. \nconst connectWallet = async () =&gt; {\n\n  let phrase = \"phrase\"\n  // mainnet\n  const hermesClient = new HermesClient({phrase})\n  // testnet\n  // const hermesClient = new HermesClient({ phrase, network: Network.Testnet })\n\n  let address = hermesClient.getAddress()\n  console.log(`Address: ${address}`)\n  try {\n    const balance = await hermesClient.getBalance(address, [AssetDOJNative])\n    let assetAmount = (baseToAsset(balance[0].amount)).amount()\n    console.log(`With balance: ${assetAmount}`)\n  } catch (error) {\n    console.log(`Caught ${error}`)\n  }\n}\n</code></pre>"},{"location":"core/d11kguide/hermes/#transfer-doj-using-hermes-client","title":"Transfer doj using Hermes Client","text":"<ul> <li>Default feeRate is <code>fast</code></li> <li>Create new HermesChain client instance</li> <li>Convert amount to transfer to base amount</li> <li>Build transaction</li> <li>Returns txHash as string</li> </ul> <pre><code>const transferDoj = async () =&gt; {\n\n  // First initiate HermesClient\n  let amountToTransfer = 0.1\n  let amount = assetToBase(assetAmount(amountToTransfer, DOJ_DECIMAL))\n  let recipient = \"insert address\"\n  try {\n    const txid = await hermesClient.transfer({\n      \"amount\": amount,\n      \"recipient\": recipient,\n      \"memo\": \"test\",             // optional\n      \"asset\": AssetDOJNative,    // optional (default)\n      \"walletIndex\": 0            // optional (default)\n    })\n    console.log(`Transaction sent: ${txid}`)\n  } catch (error) {\n    console.log(`Caught ${error}`)\n  }\n}\n</code></pre>"},{"location":"core/d11kguide/hermes/#get-transaction-data-transaction-history","title":"Get transaction Data &amp; transaction History","text":"<ul> <li>Create new HermesClient instance</li> <li>Call getTransactionData(hash) returns hash-details</li> <li>Call getTransactions(address) returns list of transactions (if any)</li> </ul> <pre><code>const transactionData = async () =&gt; {\n\n  // First initiate HermesClient\n  let hash = \"insert hash\"\n  let address = hermesClient.getAddress()\n  try {\n    const txData = await hermesClient.getTransactionData(hash, address)\n    console.log(txData)\n  } catch (error) {\n    console.log(`Caught ${error}`)\n  }\n}\n// By default getTransactions() returns the transactions for the current address\n// Optional param - any dojima address\nconst transactionHistory = async () =&gt; {\n  try {\n    const txHistory = await hermesClient.getTransactions(address)\n    console.log(`Found ${txHistory.total}`)\n    txHistory.txs.forEach(tx =&gt; console.log(tx.hash))\n  } catch (error) {\n    console.log(`Caught ${error}`)\n  }\n}\n</code></pre>"},{"location":"core/d11kguide/hermes/#get-transfer-fees","title":"Get transfer Fees","text":"<ul> <li>Hermeschain runs on fee type of Flatfee set to <code>0.02</code> DOJ</li> </ul> <pre><code>// Returns Fees Fast: 0.02 Fastest: 0.02 Average: 0.02\nconst fee = async () =&gt; {\n\n  // First initiate HermesClient\n  try {\n    const {fast, fastest, average} = await hermesClient.getFees()\n    console.log(`Fees Fast: ${baseToAsset(fast).amount()} Fastest: ${baseToAsset(fastest).amount()} Average: ${baseToAsset(average).amount()}`)\n  } catch (error) {\n    console.log(`Caught ${error}`)\n  }\n}\n</code></pre>"},{"location":"core/d11kguide/hermes/#deposit-doj-using-hermes-client","title":"Deposit doj using Hermes Client","text":"<ul> <li>Create new HermesChain client instance</li> <li>Convert amount to transfer to base amount</li> <li>Deposit transaction</li> <li>Returns txHash as string</li> </ul> <pre><code>import {SwapAssetList} from '@d11k-ts/utils'\n\nconst transferDoj = async () =&gt; {\n\n  // First initiate HermesClient\n  let amountToTransfer = 0.1\n  let amount = assetToBase(assetAmount(amountToTransfer, DOJ_DECIMAL))\n  // amount: number     Note: convert amount to 'BaseAmount' before passing to transfer function\n  // memo: string\n  'ADD:{SwapAssetList}:{respective-token-address}'\n  'SWAP:{SwapAssetList}:{receiver-token-address}'\n  try {\n    // 'memo' with ADD\n    const txid = await hermesClient.deposit({\n      amount,\n      memo: `ADD:{SwapAssetList}:{respective-token-address}`,\n    })\n    // 'memo' with SWAP\n    // const depositHash = await hermesClient.deposit({\n    //   amount,\n    //   memo: `SWAP:{SwapAssetList}:{receiver-token-address}`,\n    // })\n    console.log(`Deposit tx hash: ${txid}`)\n  } catch (error) {\n    console.log(`Caught ${error}`)\n  }\n}\n</code></pre>"},{"location":"core/d11kguide/hermes/#example-code","title":"Example Code","text":"<p>For sample code check out example test case in <code>Hermes</code></p>"},{"location":"core/d11kguide/polkadot/","title":"<code>@d11k-ts/polkadot</code>","text":""},{"location":"core/d11kguide/polkadot/#modules","title":"Modules","text":"<ul> <li><code>client</code> - Custom client for communicating with polkadot by using @polkadot/api</li> </ul>"},{"location":"core/d11kguide/polkadot/#installation","title":"Installation","text":"<pre><code>yarn add @d11k-ts/polkadot\n</code></pre>"},{"location":"core/d11kguide/polkadot/#documentation-basic-usage-examples","title":"Documentation : Basic usage examples","text":""},{"location":"core/d11kguide/polkadot/#connect-wallet-to-new-polkadotclient","title":"Connect wallet to new PolkadotClient","text":"<ul> <li>Create new Polkadot client</li> <li>Network default is <code>Mainnet</code></li> </ul> <pre><code>// Imports\nimport { Network } from '@d11k-ts/client'\nimport { PolkadotClient } from '@d11k-ts/polkadot'\n\n//Connect wallet, get address and check balance \nconst connectWallet = async () =&gt; {\n  let phrase = \"phrase\"\n  // Mainnet\n  const polkaClient = new PolkadotClient({phrase})\n  // testnet\n  // const polkaClient = new PolkadotClient({ \n  //    phrase, \n  //    network: Network.Testnet \n  //    provider: 'wss://dotws-test.h4s.dojima.network:9944'\n  // })\n  let address = polkaClient.getAddress()\n  try {\n      const balance = await polkaClient.getBalance(address)\n      console.log(`Adress: ${address} with balance ${balance}`)\n\n    } catch (error) {\n      console.log(`Caught: ${error} `)\n    }\n  process.exit()\n}\n</code></pre>"},{"location":"core/d11kguide/polkadot/#transfer-dot-using-polkadotclient","title":"Transfer dot using PolkadotClient","text":"<ul> <li>Create new PolkadotClient instance</li> <li>Build transaction</li> <li>Returns txHash as string</li> </ul> <pre><code>const transferDot = async () =&gt; {\n  // First initiate PolkadotClient\n  let amountToTransfer = 0.001\n  let recipient = 'insert address'\n  console.log(\"Building transaction\")\n  try {\n    const txid = await polkaClient.transfer({ \n      recipient,\n      amount: amountToTransfer\n    })\n    console.log(`Transaction sent: ${txid}`)\n    return txid\n  } catch (error) {\n    console.log(`Caught: ${error} `)\n  }\n  process.exit()\n}\n</code></pre>"},{"location":"core/d11kguide/polkadot/#get-transaction-data-transaction-history","title":"Get transaction Data &amp; transaction History","text":"<ul> <li>No code for retrieving tx data and history in @d11k-ts/polkadot.</li> <li>View tx details in explorer</li> <li>Mainnet : polkadot-subscan</li> </ul>"},{"location":"core/d11kguide/polkadot/#get-gas-fee-for-transaction","title":"Get gas fee for transaction","text":"<ul> <li>Retrieve gas fee for transaction from build tx</li> </ul> <pre><code>const fee = async () =&gt; {\n  let amountToTransfer = 0.001\n  let recipient = 'insert address'\n  try {\n    const fees = polkaClient.getFees({\n      recipient,\n      amount: amountToTransfer\n    })\n    console.log(`Fees Fast: ${fees.average} Fastest: ${fees.fast} Average: ${fees.slow}`)\n  } catch (error) {\n    console.log(`Caught ${error}`)\n  }\n  process.exit()\n}\n</code></pre>"},{"location":"core/d11kguide/polkadot/#get-polkadot-inbound-address","title":"Get Polkadot Inbound address","text":"<ul> <li>Get Polkadot Inbound address from hermes chain</li> <li>Can be used in adding liquidity pool and swapping</li> </ul> <pre><code>const inboundAddr = async () =&gt; {\n  try {\n    const inboundAddress = await polkaClient.getPolkadotInboundAddress()\n    console.log('Inbound Address :: ', inboundAddress)\n  } catch (error) {\n    console.log(`Caught ${error}`)\n  }\n  process.exit()\n}\n</code></pre>"},{"location":"core/d11kguide/polkadot/#get-default-liquidity-pool-gas-fee","title":"Get default liquidity pool gas fee","text":"<ul> <li>Get Polkadot default liquidity pool gas fee from hermes chain</li> </ul> <pre><code>const defaultLPGasFee = async () =&gt; {\n  try {\n    const LPDefaultGasFee = await polkaClient.getDefaultLiquidityPoolGasFee()\n    console.log('Liquidity pool default gas fee :: ', LPDefaultGasFee)\n  } catch (error) {\n    console.log(`Caught ${error}`)\n  }\n  process.exit()\n}\n</code></pre>"},{"location":"core/d11kguide/polkadot/#add-dot-token-into-liquidity-pool","title":"Add DOT token into liquidity pool","text":"<ul> <li>Add DOT tokens into liquidity pool</li> <li>Get Polkadot Inbound address from hermes chain</li> </ul> <pre><code>const addDotToLiquidityPool = async () =&gt; {\n  let amountToTransfer = 0.001\n  const inboundAddress = await polkaClient.getPolkadotInboundAddress()\n  try {\n    const liquidityPoolHash = await polkaClient.addLiquidityPool(\n      amountToTransfer,\n      inboundAddress,\n      dojAddress,           // optional dojima address\n    )\n    console.log('Liquidity pool hash : ', liquidityPoolHash)\n  } catch (error) {\n    console.log(`Caught ${error}`)\n  }\n  process.exit()\n}\n</code></pre>"},{"location":"core/d11kguide/polkadot/#swap-dot-tokens","title":"Swap DOT tokens","text":"<ul> <li>Swap DOT tokens to required token using receiver address</li> <li>Get Polkadot Inbound address from hermes chain</li> <li>Supported tokens for swapping - \u2018AR\u2019, \u2018DOJ\u2019, \u2018ETH\u2019, \u2018SOL\u2019</li> </ul> <pre><code>import {SwapAssetList} from '@d11k-ts/utils'\n\nconst swapDOT = async () =&gt; {\n  let amountToTransfer = 0.001\n  const inboundAddress = await polkaClient.getPolkadotInboundAddress()\n  try {\n    const swapHash = await polkaClient.swap(\n       amountToTransfer,\n      SwapAssetList,\n      inboundAddress,\n      reciepient                // Respective receiver SwapAssetList token address\n    )\n    console.log('Swap tx hash : ', swapHash)\n  } catch (error) {\n    console.log(`Caught ${error}`)\n  }\n  process.exit()\n}\n</code></pre>"},{"location":"core/d11kguide/polkadot/#example-code","title":"Example Code","text":"<p>For sample code check out example test case in <code>Polkadot</code></p>"},{"location":"core/d11kguide/solana/","title":"<code>@d11k-ts/solana</code>","text":""},{"location":"core/d11kguide/solana/#modules","title":"Modules","text":"<ul> <li><code>client</code> - Custom client for communicating with solana by   using <code>@solana/web3.js</code></li> </ul>"},{"location":"core/d11kguide/solana/#installation","title":"Installation","text":"<pre><code>yarn add @d11k-ts/solana\n</code></pre> <p>Following dependencies have to be installed into your project. These are not included in <code>@d11k-ts/solana</code>.</p> <pre><code>yarn add axios\n</code></pre>"},{"location":"core/d11kguide/solana/#documentation-basic-usage-examples","title":"Documentation : Basic usage examples","text":""},{"location":"core/d11kguide/solana/#connect-wallet-to-new-solanaclient","title":"Connect wallet to new SolanaClient","text":"<ul> <li>Create new Solana client</li> <li>Network default is <code>Mainnet</code></li> </ul> <pre><code>// Imports\nimport {SolanaClient} from '@d11k-ts/solana'\nimport {Network} from \"@d11k-ts/client\";\n\n//Connect wallet, get address and check balance \nconst connectWallet = async () =&gt; {\n  let phrase = \"phrase\"\n  // Mainnet\n  const solClient = new SolanaClient({phrase})\n  // devnet\n  // const solClient = new SolanaClient({\n  //    phrase, \n  //    network: Network.Stagenet\n  //    endpoint: 'https://sol-test.h4s.dojima.network:8899'\n  // })\n  let address = solClient.getAddress()\n  try {\n    const balance = await solClient.getBalance(address)\n    console.log(`Adress: ${address} with balance ${balance}`)\n\n  } catch (error) {\n    console.log(`Caught: ${error} `)\n  }\n}\n</code></pre>"},{"location":"core/d11kguide/solana/#request-airdrop-testnet-sol-tokens-using-solanaclient","title":"Request airdrop - testnet \u2018sol\u2019 tokens using SolanaClient","text":"<ul> <li>Create new Solana client</li> <li>Network is set to <code>devnet</code></li> <li>By default <code>2 SOL</code> tokens were added to address on every call</li> <li><code>Note: Devnet tokens are not useful in Mainnet</code></li> </ul> <pre><code>// Imports\nimport {SolanaClient} from '@d11k-ts/solana'\nimport {Network} from \"@d11k-ts/client\";\n\n//Connect wallet, get address, request sol tokens and check balance \nconst connectWallet = async () =&gt; {\n  let phrase = \"phrase\"\n  // Mainnet\n  const solClient = new SolanaClient({phrase})\n  // devnet\n  // const solClient = new SolanaClient({\n  //    phrase, \n  //    network: Network.Stagenet\n  //    endpoint: 'https://sol-test.h4s.dojima.network:8899'\n  // })\n  let address = solClient.getAddress()\n  try {\n    await solClient.requestSolTokens(address)\n    const balance = await solClient.getBalance(address)\n    console.log(`Address: ${address} with balance ${balance}`)\n\n  } catch (error) {\n    console.log(`Caught: ${error} `)\n  }\n}\n</code></pre>"},{"location":"core/d11kguide/solana/#transfer-sol-using-solanaclient","title":"Transfer sol using SolanaClient","text":"<ul> <li>Create new SolanaClient instance</li> <li>Build transaction</li> <li>Returns txHash as string</li> </ul> <pre><code>const transferSol = async () =&gt; {\n  // First initiate SolanaClient\n  let amountToTransfer = 0.001\n  let recipient = 'insert address'\n  console.log(\"Building transaction\")\n  try {\n    const txid = await solClient.transfer({\n      recipient,\n      amount: amountToTransfer\n    })\n    console.log(`Transaction sent: ${txid}`)\n    return txid\n  } catch (error) {\n    console.log(`Caught: ${error} `)\n  }\n}\n</code></pre>"},{"location":"core/d11kguide/solana/#get-transaction-data-transaction-history","title":"Get transaction Data &amp; transaction History","text":"<ul> <li>Create new SolanaClient instance</li> <li>Call getTransactionData(hash) returns hash-details</li> <li>Call getTransactionsHistory(address) returns list of transactions (if any)</li> </ul> <pre><code>// Retrieve transaction data for a particular hash\nconst transactionData = async () =&gt; {\n  let hash = \"insert hash\"\n  let Address = solClient.getAddress()\n  try {\n    const txData = await solClient.getTransactionData(\n      hash\n    )\n    console.log(`Transaction data ${txData}`)\n  } catch (error) {\n    console.log(`Caught: ${error} `)\n  }\n}\n\n// Retrieve transaction history for a particular address\nconst transactionHistory = async () =&gt; {\n  let Address = solClient.getAddress()\n  try {\n    const txHistory = await solClient.getTransactionsHistory({\n      address: Address\n    })\n    console.log(`Found ${txHistory.total.toString()}`)\n    txHistory.txs.forEach(tx =&gt; console.log(tx))\n  } catch (error) {\n    console.log(`Caught: ${error} `)\n  }\n}\n</code></pre>"},{"location":"core/d11kguide/solana/#get-gas-fee-for-transaction","title":"Get gas fee for transaction","text":"<ul> <li>Solana has fixed fee client, average, fast and fastest return the same value</li> </ul> <pre><code>const fee = async () =&gt; {\n  try {\n    const fees = solClient.getFees()\n    console.log(`Fees Fast: ${fees.average} Fastest: ${fees.fast} Average: ${fees.slow}`)\n  } catch (error) {\n    console.log(`Caught ${error}`)\n  }\n}\n</code></pre>"},{"location":"core/d11kguide/solana/#get-solana-inbound-address","title":"Get Solana Inbound address","text":"<ul> <li> <p>Get Solana Inbound address from hermes chain</p> </li> <li> <p>Can be used in adding liquidity pool and swapping</p> </li> </ul> <pre><code>const inboundAddr = async () =&gt; {\n  try {\n    const inboundAddress = await solClient.getSolanaInboundAddress()\n    console.log('Inbound Address :: ', inboundAddress)\n  } catch (error) {\n    console.log(`Caught ${error}`)\n  }\n}\n</code></pre>"},{"location":"core/d11kguide/solana/#get-default-liquidity-pool-gas-fee","title":"Get default liquidity pool gas fee","text":"<ul> <li>Get Solana default liquidity pool gas fee from hermes chain</li> </ul> <pre><code>const defaultLPGasFee = async () =&gt; {\n  try {\n    const LPDefaultGasFee = await solClient.getDefaultLiquidityPoolGasFee()\n    console.log('Liquidity pool default gas fee :: ', LPDefaultGasFee)\n  } catch (error) {\n    console.log(`Caught ${error}`)\n  }\n}\n</code></pre>"},{"location":"core/d11kguide/solana/#add-sol-token-into-liquidity-pool","title":"Add SOL token into liquidity pool","text":"<ul> <li>Add SOL tokens into liquidity pool</li> <li>Get Solana Inbound address from hermes chain</li> </ul> <pre><code>const addSOLToLiquidityPool = async () =&gt; {\n  let amountToTransfer = 0.001\n  const inboundAddress = await solClient.getSolanaInboundAddress()\n  try {\n    const liquidityPoolHash = await solClient.addLiquidityPool(\n      amountToTransfer,\n      inboundAddress,\n      dojAddress,           // optional dojima address\n    )\n    console.log('Liquidity pool hash : ', liquidityPoolHash)\n  } catch (error) {\n    console.log(`Caught ${error}`)\n  }\n}\n</code></pre>"},{"location":"core/d11kguide/solana/#swap-sol-tokens","title":"Swap SOL tokens","text":"<ul> <li>Swap SOL tokens to required token using receiver address</li> <li>Get Solana Inbound address from hermes chain</li> <li>Supported tokens for swapping - \u2018DOT\u2019, \u2018DOJ\u2019, \u2018ETH\u2019, \u2018AR\u2019</li> </ul> <pre><code>import {SwapAssetList} from '@d11k-ts/utils'\nconst swapSOL = async () =&gt; {\n  let amountToTransfer = 0.001\n  const inboundAddress = await solClient.getSolanaInboundAddress()\n  try {\n    const swapHash = await solClient.swap(\n      amountToTransfer,\n      SwapAssetList,\n      inboundAddress,\n      reciepient                // Respective receiver SwapAssetList token address\n    )\n    console.log('Swap tx hash : ', swapHash)\n  } catch (error) {\n    console.log(`Caught ${error}`)\n  }\n}\n</code></pre>"},{"location":"core/d11kguide/solana/#example-code","title":"Example Code","text":"<p>For sample code check out example test case in <code>Solana</code></p>"},{"location":"core/d11kguide/utils/","title":"<code>@d11k-ts/utils</code>","text":"<p>Utility helpers for D11k clients</p>"},{"location":"core/d11kguide/utils/#modules-in-alphabetical-order","title":"Modules (in alphabetical order)","text":"<ul> <li><code>asset</code> - Utilities for handling assets</li> <li><code>async</code> - Utilities for <code>async</code> handling</li> <li><code>bn</code> - Utilities for using <code>bignumber.js</code></li> <li><code>chain</code> - Utilities for multi-chain</li> <li><code>string</code> - Utilities for strings</li> </ul>"},{"location":"core/d11kguide/utils/#installation","title":"Installation","text":"<p><pre><code>yarn add @d11k-ts/utils\n</code></pre> The following peer dependencies have to be installed into your project. These are not included in <code>@d11k-ts/utils</code>.</p> <pre><code>yarn add bignumber.js\n</code></pre>"},{"location":"core/network/endpoints/","title":"Network Endpoints","text":""},{"location":"core/network/endpoints/#testnet","title":"Testnet","text":"Field Testnet Network Name Dojima chain RPC URL https://api-dev.d11k.dojima.network/ WS URL https://rpc-dev.d11k.dojima.network/ Chain ID 1001 Currency symbol DOJ Block Explorer URL https://explorer-dev.dojima.network/"},{"location":"core/network/endpoints/#stagenet","title":"Stagenet","text":"Field Stagenet Network Name Dojima chain RPC URL https://api.d11k.dojima.network/ WS URL https://rpc.d11k.dojima.network/ Chain ID 1401 Currency symbol DOJ Block Explorer URL https://explorer.dojima.network/"},{"location":"core/resources/endpoints/","title":"Endpoint Resources in Dojima Network","text":""},{"location":"core/resources/endpoints/#testnet","title":"Testnet","text":"Field Testnet Network Name Hermes Dojima Http Api URL https://api-dev.h4s.dojima.network/ New RPC URL https://rpc-dev.h4s.dojima.network/ Chain ID hermes-testnet Currency symbol DOJ"},{"location":"core/resources/endpoints/#stagenet","title":"Stagenet","text":"Field Testnet Network Name Hermes Dojima Http Api URL https://api.h4s.dojima.network/ New RPC URL https://rpc.h4s.dojima.network/ Chain ID hermeschain-stagenet Currency symbol DOJ"},{"location":"core/resources/faucet/","title":"Dojima Network Faucet Guide","text":"<p>The Faucet is a web-based service that can send you some test tokens so that you can explore and experiment with testnet without having to pay for anything.</p>"},{"location":"core/resources/faucet/#prerequisites","title":"Prerequisites","text":"<p>Before we begin, you must have the testnet address of the respective chain. To obtain an address, Login or Register into Dojima Wallet. If you don\u2019t have a seed phrase, follow these steps.</p> <p>To request tokens using the faucet.</p>"},{"location":"core/resources/faucet/#1-before-requesting-testnet-tokens-check-the-table-for-available-faucet-balances","title":"1. Before requesting TestNet tokens check the table for available faucet balances.","text":""},{"location":"core/resources/faucet/#2-select-the-hermes-token-and-copy-the-address","title":"2. \u00a0Select the Hermes token and copy the address.","text":""},{"location":"core/resources/faucet/#3-choose-a-chain-for-token-requests","title":"3. Choose a chain for token requests.","text":""},{"location":"core/resources/faucet/#4-paste-address-in-the-address-input-or-use-self-address-checkbox","title":"4. Paste address in the address input or use self address checkbox.","text":""},{"location":"core/resources/faucet/#5-click-the-submit-button-following-submission-a-popup-will-appear-indicating-whether-the-transaction-was-successful-or-unsuccessful-to-close-the-popup-press-anywhere","title":"5. Click the \u201csubmit\u201d button. Following submission, a popup will appear indicating whether the transaction was successful or unsuccessful. To close the popup, press anywhere.","text":""},{"location":"core/resources/faucet/#6-if-the-pop-up-indicates-a-successful-transaction-you-can-check-your-test-token-balance-on-your-dojima-wallet-dashboard","title":"6 If the pop-up indicates a successful transaction, you can check your test token balance on your Dojima wallet dashboard.","text":""},{"location":"core/resources/faucet/#stagenet","title":"Stagenet","text":"<p>During a specified period, Stagenet tokens are accessible to users, offering a unique opportunity for participation in a limited-time token distribution.</p> <p></p>"},{"location":"core/resources/transaction/","title":"Transaction Resources on Dojima Network","text":""},{"location":"core/resources/transaction/#guide-to-sending-a-dojima-coin-to-any-account","title":"Guide to sending a Dojima coin to any account","text":""},{"location":"core/resources/transaction/#1-first-log-into-your-dojima-wallet-if-you-dont-have-a-seed-phrase-follow-these-steps","title":"1. First, log into your Dojima Wallet. If you don\u2019t have a seed phrase, follow these steps.","text":"<p>Info</p> <p>If you don\u2019t have Hermes Tokens, proceed to FAUCET to get testnet tokens.</p>"},{"location":"core/resources/transaction/#2-click-on-send-and-receive-option","title":"2. Click on Send and Receive option.","text":""},{"location":"core/resources/transaction/#3-to-send-digital-assets-just-click-on-the-send-option-beside-your-chosen-token","title":"3. To send digital assets, just click on the \u201cSEND\u201d option beside your chosen token.","text":""},{"location":"core/resources/transaction/#4-specify-the-amount-of-the-token-you-want-to-transfer","title":"4. Specify the amount of the token you want to transfer..","text":""},{"location":"core/resources/transaction/#5-to-input-an-amount-in-usd-users-should-toggle-the-input-usd-option-on-and-then-enter-the-desired-amount-in-usd","title":"5. To input an amount in USD, users should toggle the \u201cInput USD\u201d option on and then enter the desired amount in USD..","text":""},{"location":"core/resources/transaction/#6-to-proceed-with-the-sending-process-users-must-input-the-recipients-public-address","title":"6. To proceed with the sending process, users must input the recipient\u2019s public address..","text":""},{"location":"core/resources/transaction/#7select-the-gas-fee-users-have-the-option-to-choose-between-fast-average-and-slow-gas-fees-and-click-on-continue","title":"7.Select the gas fee, users have the option to choose between fast, average, and slow gas fees and click on Continue.","text":""},{"location":"core/resources/transaction/#8-the-next-step-is-the-review-page-where-users-can-carefully-examine-all-transaction-details-including-the-amount-they-are-sending-the-chosen-gas-fee-and-the-total-amount-they-are-paying-if-they-wish-to-make-any-changes-they-can-click-on-the-edit-option-otherwise-they-should-proceed-by-clicking-on-the-send-option-to-complete-the-transaction","title":"8. The next step is the review page, where users can carefully examine all transaction details, including the amount they are sending, the chosen gas fee, and the total amount they are paying. If they wish to make any changes, they can click on the \u201cEDIT\u201d option. Otherwise, they should proceed by clicking on the \u201cSEND\u201d option to complete the transaction.","text":""},{"location":"core/resources/transaction/#8-thats-it-the-transaction-is-complete-for-more-details-on-the-transaction-users-can-click-on-the-view-on-explorer-option","title":"8. That\u2019s it! The transaction is complete. For more details on the transaction, users can click on the \u201cView on Explorer\u201d option.","text":""},{"location":"developer/","title":"Developer Resources for Dojima Network","text":"Developers <p>Your resource hub for seamless onboarding and support within our evolving ecosystem.</p> Templates <p>Explore our library of ready-made templates, offering instant integration of common use cases or smart contracts, streamlining your blockchain development process.</p> Faucet <p>The Faucet is a web-based service that can send you some test tokens so that you can explore and experiment with testnet without having to pay for anything.</p>"},{"location":"developer/faucet/","title":"Developer Faucet for Dojima Network","text":"<p>The Faucet is a web-based service that can send you some test tokens so that you can explore and experiment with testnet without having to pay for anything.</p>"},{"location":"developer/faucet/#prerequisites","title":"Prerequisites","text":"<p>Before we begin, you must have the testnet address of the respective chain. To obtain an address, Login or Register into Dojima Wallet. If you don\u2019t have a seed phrase, follow these steps.</p> <p>To request tokens using the faucet.</p>"},{"location":"developer/faucet/#1-before-requesting-testnet-tokens-check-the-table-for-available-faucet-balances","title":"1. Before requesting TestNet tokens check the table for available faucet balances.","text":""},{"location":"developer/faucet/#2-select-the-hermes-token-and-copy-the-address","title":"2. \u00a0Select the Hermes token and copy the address.","text":""},{"location":"developer/faucet/#3-choose-a-chain-for-token-requests","title":"3. Choose a chain for token requests.","text":""},{"location":"developer/faucet/#4-paste-address-in-the-address-input-or-use-self-address-checkbox","title":"4. Paste address in the address input or use self address checkbox.","text":""},{"location":"developer/faucet/#5-click-the-submit-button-following-submission-a-popup-will-appear-indicating-whether-the-transaction-was-successful-or-unsuccessful-to-close-the-popup-press-anywhere","title":"5. Click the \u201csubmit\u201d button. Following submission, a popup will appear indicating whether the transaction was successful or unsuccessful. To close the popup, press anywhere.","text":""},{"location":"developer/faucet/#6-if-the-pop-up-indicates-a-successful-transaction-you-can-check-your-test-token-balance-on-your-dojima-wallet-dashboard","title":"6 If the pop-up indicates a successful transaction, you can check your test token balance on your Dojima wallet dashboard.","text":""},{"location":"developer/faucet/#stagenet","title":"Stagenet","text":"<p>During a specified period, Stagenet tokens are accessible to users, offering a unique opportunity for participation in a limited-time token distribution.</p> <p></p>"},{"location":"developer/quickstart/","title":"Introduction to Dojima PoS","text":"<p>Warning</p> <p>UPDATING THE DEVELOP DOCS</p> <p>The docs are being updated, enhanced, and improved. They are subject to change. Please feel free to raise an issue or pull request if you have any queries or suggestions.</p> <p>Welcome to Dojima The most innovative and exciting platform to develop your blockchain application. Blockchain technology is poised to revolutionize how the digital world manages data and conducts business. You can join this revolution by getting a head start on Dojima\u2019s decentralized application (dApp) development.</p> <p>This guide will introduce you to the Dojima ecosystem. You\u2019ll find links to valuable resources and websites that will bring you up to speed on building, not only on Dojima but also on general blockchain application development.</p> <p>Tip</p> <p>STAY IN THE KNOW</p> <p>Keep up with the latest builder updates from the Dojima team and the community by subscribing to the .</p>"},{"location":"developer/quickstart/#building-on-dojima","title":"Building on Dojima","text":"<p>If you are an Ethereum developer, you are already a Dojima developer. Simply switch to the Dojima RPC and get started. All the tools you are familiar with on the Ethereum blockchain are supported on Dojima by default, such as Truffle, Remix, and Web3js.</p> <p>You can deploy decentralized applications to either Dojima Testnet or the Mainnet. The Dojima Testnet connects with the Ethereum Go\u00ebrli Testnet, which acts as its ParentChain. You can find all the network-related details in the [network documentation].</p>"},{"location":"developer/quickstart/#wallets","title":"Wallets","text":"<p>To interact with the Dojima Network, you need to have an Ethereum-based wallet because Dojima runs on Ethereum Virtual Machine (EVM). You can choose to set up a Metamask or Arkane Wallet. More on wallet-related information and why you need one can be found in our wallet documentation.</p>"},{"location":"developer/quickstart/#smart-contracts","title":"Smart Contracts","text":"<p>Dojima supports many services you can use to test, compile, debug, and deploy decentralized applications onto the Dojima Network. These include deployment using Alchemy, Chainstack, QuickNode, Remix, Truffle, Hardhat, and Replit.</p>"},{"location":"developer/quickstart/#building-a-new-dapp-on-dojima","title":"Building a new dApp on Dojima?","text":"<p>Decentralized applications (dApps) act as the bridge between users and their data privacy on the blockchain. The increasing number of dApps validates their usefulness within the blockchain ecosystem, solving challenges like executing transactions between two participants without the need for central authority via smart contracts.</p> <p>Suppose you have no prior experience building decentralized applications (dApps). In that case, the below-mentioned resources will give you a head start on the tools required to build, debug, and deploy dApps on the Dojima Network.</p> <p>Full Stack dApp: Tutorial Series - Web3.js - Ethers.js - Remix - Truffle - Metamask - Arkane - Develop a dApp using Fauna, Dojima and React</p>"},{"location":"developer/quickstart/#already-have-a-dapp","title":"Already have a dApp?","text":"<p>If you already have a decentralized application (dApp) and are looking for a platform to help you scale efficiently, then you are at the right place because Dojima allows you to:</p> <ol> <li> <p>Easily migrate from Ethereum Virtual Machine (EVM) based chain: Dojima prides itself in being the ultimate Layer-2 scaling solution for Ethereum. You don\u2019t have to worry about the underlying architecture while moving or deploying your dApps to the Dojima Network as long as it is EVM-compatible</p> </li> <li> <p>Use Dojima as a faster transaction layer: Deploying your dApp to the Dojima Mainnet allows you to leverage Dojima as a faster transaction layer for your dApp. Additionally, you can get your tokens mapped by us. You can join our technical discussions group on Telegram to learn more.</p> </li> </ol>"},{"location":"developer/quickstart/#side-note","title":"Side Note","text":"<p>If this is overwhelming, that\u2019s alright! You can jump right into the action and start hacking. Here are some notes before you start diving into resources, repositories, and docs:</p> <ol> <li> <p>Beware the cost of being on the bleeding edge: Like typical niche programming, dApps and blockchain development moves very quickly. While researching, you may find complex code repositories, 404s on a documentation site, or even no documentation. Use that opportunity to reach out to us via any social media channel.</p> </li> <li> <p>The learning curve may be daunting, but the barrier to entry is low: The community is very open and welcoming! Projects welcome pull requests from outsiders and resolve any blockers actively. We\u2019re working on creating a better world and contribution in any form is appreciated. We\u2019ll be grateful to onboard you into this amazing Web3 ecosystem.</p> </li> </ol> <p>Info</p> <p>STAY UPDATED</p> <p>Decentralized application development encourages network decentralization. Follow our social media handles for more insights and updates about the Dojima ecosystem. You can find the links to all the Dojima communities here.</p>"},{"location":"developer/transactions/","title":"Managing Transactions in Dojima Network","text":""},{"location":"developer/transactions/#heres-the-guide-to-sending-a-dojima-coin-to-any-account","title":"Here\u2019s the guide to sending a Dojima coin to any account","text":""},{"location":"developer/transactions/#1-first-log-into-your-dojima-wallet-account-if-you-dont-have-a-seed-phrase-follow-these-steps","title":"1. First, log into your Dojima Wallet account. If you don\u2019t have a seed phrase, follow these steps.","text":"<p>Info</p> <p>If you don\u2019t have Doj Tokens, proceed to FAUCET to get testnet tokens.</p>"},{"location":"developer/transactions/#2-select-dojima-coin-and-select-send","title":"2. Select Dojima coin and select \u2018Send\u2019.","text":""},{"location":"developer/transactions/#3-enter-the-receivers-dojima-public-address","title":"3. Enter the receiver\u2019s Dojima Public Address.","text":""},{"location":"developer/transactions/#4-enter-the-amount-to-send","title":"4. Enter the amount to send.","text":""},{"location":"developer/transactions/#5-choose-the-network-speed","title":"5. Choose the network speed.","text":""},{"location":"developer/transactions/#7-verify-the-details-like-the-receivers-public-address-the-transfer-amount-and-the-network-speed","title":"7. Verify the details, like the receiver\u2019s public address, the transfer amount, and the network speed","text":""},{"location":"developer/transactions/#8-transaction-completed-anf-details-get-displayed","title":"8. Transaction completed anf details get displayed","text":""},{"location":"developer/verifying-smart-contract/","title":"Verifying Smart Contracts on Dojima","text":"<p>Once verified, a smart contract or token contract\u2019s source code becomes publicly available and verifiable. This creates transparency and trust. Plus, it\u2019s easy to do! Verification is available for Solidity.</p>"},{"location":"developer/verifying-smart-contract/#smart-contract-verification-with-blockscout","title":"Smart Contract Verification with Blockscout","text":"<p>1)  You will be given an address to check a pending transaction after the contract is created. If it doesn\u2019t take you to https://doj-bex-test.dojima.network/, go to Dojima Chain block explorer, make sure you\u2019re on the chain where the contract was set up, then type the address of the contract into the search field. Your contract details should come up.  </p> <p>2) To view the bytecode, select the Code tab and press the Verify and Publish button. Several options for verification will be available to you. Please select the \u201cvia flattened source code\u201d (solidity) option.</p> <p></p>"},{"location":"developer/verifying-smart-contract/#via-flattened-source-code","title":"Via Flattened Source Code","text":"<ol> <li>Contract Address: The 0x address entered when the contract was created</li> <li>Contract Name: The name of the class that was mentioned in the.sol files. In the <code>contract MyContract {..</code> MyContract , for example, the contract\u2019s name is MyContract.</li> <li>Include Nightly Builds: If you wish to display nightly builds, then yes.</li> <li>Compiler: Taken from the first line of the <code>X.X.X. contract's pragma solidity</code>. Use the appropriate compiler instead of the nightly build.</li> <li>EVM Version: See EVM version details.</li> <li>Optimization: Check yes if you made optimization available during compilation.</li> <li>Optimization Runs: The default value for the Solidity Compiler is 200. change only if you modified this value during compilation.</li> <li>Enter the Solidity Contract Code: If your solidity code uses a library or inherits dependencies from another contract, you might need to flatten it. The POA solidity flattener or the truffle flattener are our recommendations.</li> <li>Try to fetch constructor arguments automatically: Similar contracts might be offered if they exist.</li> <li>ABI-encoded Constructor Arguments: See this page for more info.</li> <li>Add Contract Libraries: For any necessary libraries that must be called in the .sol file, enter their name and 0x address. Choose <code>\"Verify and Publish\"</code> from the menu. If everything is going well, you should notice a tick next to Code in the code tab and a new tab labelled <code>\"Read Contract.\"</code>Any transactions related to your contract will now be listed in BlockScout with the contract name.</li> </ol>"},{"location":"developer/Wallet/getstarted/","title":"Getting Started with Dojima Wallet","text":"<p>Tip</p> <p>STAY IN THE KNOW</p> <p>Keep up with the latest Wallet Suite updates from the Dojima team and community by subscribing to our Notifications.</p> <p>Wallets that support Dojima allow for key management, access to accounts controlled by private keys, and interfaces that allow users to perform chain actions and sign transactions. The following page serves as a wallet index for wallets compatible with Dojima. Please note that this is not an exhaustive index.</p> <p>Warning</p> <p>THIRD-PARTY WALLETS</p> <p>These third-party wallets have integrated Dojima and support a variety of features. You should do your own due diligence before using them. The official Dojima Support cannot provide assistance for issues with these wallets or other non-native wallets</p> <p>Info</p> <p>CENTRALIZED EXCHANGES (CEXS)</p> <p>For a list of CEXs that support Dojima, visit a third-party tracking website such as CoinMarketCap.</p>"},{"location":"developer/Wallet/getstarted/#native-wallets","title":"Native Wallets","text":"<p>Dojima Support can provide assistance to users and address issues related to the following wallets:</p> Wallet Custody Account Type Multi-Sig NFT dApp Browser Bridge Support Fiat On-Ramp Platforms 1inch non-custodial EOA no interface yes yes no mobile Alpha Wallet* non-custodial EOA no interface yes yes yes mobile, api/sdk Atomic Wallet* non-custodial EOA no no no no yes mobile, desktop, api/sdk Ambire non-custodial smart contract no interface no yes yes browser BitKeep non-custodial EOA no interface no yes yes mobile Bitski custodial EOA no interface yes no browser, api/sdk Coin98 non-custodial EOA no interface yes yes yes mobile, browser, api/sdk Coinbase hybrid EOA no interface yes yes yes mobile, browser, api/sdk CypherD non-custodial EOA no no yes mobile D\u2019Cent* hybrid EOA no interface yes yes no mobile Exodus* non-custodial EOA no no no yes mobile, desktop Gnosis Safe* non-custodial smart contract yes interface yes no no mobile, browser, api/sdk Guarda non-custodial EOA no no no yes yes mobile, browser, desktop Huobi non-custodial EOA no no no yes no mobile Ledger* non-custodial EOA no interface no no no hardware, mobile, desktop Loopring non-custodial smart contract no no no mobile, api/sdk Magic* custodial EOA no no no mobile, browser, api/sdk MathWallet* custodial EOA no no no yes yes mobile, browser, api/sdk MetaMask* non-custodial EOA no interface yes no no mobile, browser, api/sdk Multis* non-custodial EOA no no no mobile, desktop MyEtherWallet* non-custodial EOA no interface no mobile Opera Crypto Browser* non-custodial EOA no support yes mobile, browser Pillar non-custodial EOA no interface no mobile Rainbow non-custodial EOA no interface yes mobile, api/sdk SafePal* non-custodial EOA no no yes hardware, mobile, api/sdk Sequence non-custodial smart contract no interface no browser, api/sdk SimpleHold non-custodial EOA no no no mobile, api/sdk SteakWallet non-custodial EOA no interface no mobile, api/sdk TokenPocket non-custodial EOA no support yes yes no mobile, browser, api/sdk Torus non-custodial EOA no support no no no browser, api/sdk Trezor* non-custodial EOA no support no hardware, mobile Trust Wallet* non-custodial EOA no support yes mobile Unstoppable non-custodial EOA no no yes mobile, api/sdk Venly hybrid smart contract no interface no browser, api/sdk Wirex* non-custodial EOA no no no mobile XDeFi non-custodial EOA no interface no no no browser Zerion non-custodial EOA no no yes mobile, browser <p>Warning</p> <p>NON-NATIVE WALLET SUPPORT</p> <p>Wallets denoted with * in the table above are not natively supported with the wallet software and require manual steps to add the Dojima network.</p>"},{"location":"developer/Wallet/getstarted/#key-management-strategy","title":"Key Management Strategy","text":"<p>The following basic steps allow for the integration of a client-side application with Dojima:</p> <ol> <li>Set up Web3: web3.js is a javascript library that allows a client-side application to talk to the blockchain. We configure web3 to communicate via a developer-based wallet like MetaMask. Use the web3.js docs  to learn about adding <code>web3.js</code> to your project.</li> <li>Set up an Account: You will be able to send transactions (specifically ones that alter the state of the blockchain).</li> <li>Instantiate Contracts: Once a web3 object in place, we next instantiate our deployed contract, with which we interact.</li> <li>Call functions: Fetch data via functions in the contract - through our contract object.</li> </ol>"},{"location":"developer/Wallet/MetaMask/config-dojima-on-metamask/","title":"Configuring Dojima on MetaMask","text":"<p>In order to view the flow of funds in your accounts, on the Dojima Network, you will need to configure Dojima <code>{testnet, mainnet}</code> URL on Metamask.</p> <p>There are two ways to do it:</p> <ol> <li>Using Dojimascan</li> <li>Add the Dojima network manually</li> </ol>"},{"location":"developer/Wallet/MetaMask/config-dojima-on-metamask/#using-dojimascan","title":"Using Dojimascan","text":"<p>Note</p> <p>Please make sure you have already installed Metamask!</p> Dojima-Testnet <p>Please follow the steps to add Dojima\u2019s Testnet:</p> <ul> <li>Navigate to https://doj-bex-test.dojima.network/</li> </ul> <p></p> <ul> <li>Scroll down to the bottom of the page and click on the button <code>Add Dojima Network</code></li> </ul> <p></p> <ul> <li>Once you click the button you will see a Metamask Notification, now click on Approve. You will be directly switched to Dojima\u2019s Testnet now in the network dropdown list. You can now close the dialog.</li> </ul> <p>If you are facing any issue, Add the Network Manually(steps given below)</p>"},{"location":"developer/Wallet/MetaMask/config-dojima-on-metamask/#add-the-dojima-network-manually","title":"Add the Dojima network manually","text":"Dojima-Testnet <ol> <li>To add the Dojima Testnet to your Metamask extension for testing and development purposes, begin by launching the extension. </li> <li>Click on the three dots icon to access additional options, then select \u201cSettings\u201d to proceed with configuring the Metamask extension. </li> <li>Navigate to the \u201cNetworks\u201d section and select \u201cAdd Network\u201d to begin configuring a new network for integration with the Metamask extension.  </li> <li>Choose the \u201cAdd Network Manually\u201d option to manually input the details of the Dojima Testnet network into the Metamask extension. </li> <li>Enter <code>Dojima Chain</code> as the network name in the corresponding field to accurately identify the network within the Metamask extension settings. </li> <li>Input the new RPC URL <code>https://api-dev.d11k.dojima.network/</code> into the designated field to establish the connection with the Dojima Chain network. </li> <li>Set the Chain ID to <code>1001</code> in the provided field to uniquely identify the Dojima Chain network within the Metamask extension. </li> <li>Specify the Currency Symbol as <code>DOJ</code> to represent the native currency of the Dojima Chain network within the Metamask extension settings  </li> <li>Congratulations! You have successfully added the Dojima Testnet to your Metamask extension. You can now begin testing and developing on the Dojima Chain network with ease.  </li> </ol>"},{"location":"developer/Wallet/MetaMask/custom-tokens/","title":"Adding Custom Tokens on MetaMask","text":"<p>This page demonstrates the process of configuring/adding custom tokens to Metamask. Specifically, we have demonstrated adding the example <code>TEST</code> ERC20 and ERC721 tokens to the G\u00f6rli testnet as well as the Dojima testnet,</p> <p>You can use this process to add any custom ERC20 tokens to any network on Metamask.</p> <p>Adding the <code>TEST</code> token (ERC20) to your Metamask account on the G\u00f6rli Network</p> <p>To display <code>TEST</code> tokens on your account on the G\u00f6rli Network, you can click on the Add Tokens option in Metamask. It will then navigate you to a screen. You then click on Custom Token tab and copy-paste the address below in the Token Address field.</p> <p>The <code>TEST</code> token contract address on G\u00f6rli is <code>0x3f152B63Ec5CA5831061B2DccFb29a874C317502</code>. Note that the <code>TEST</code> token is an example ERC20 token contract that is used throughout Dojima developer docs for illustration purposes.</p> <p>The other fields will auto-populate. Click on Save and then click on Add Tokens. The <code>TEST</code> token should now be displayed on your account on Metamask.</p> <p>Configuring <code>DOJ TST</code> tokens to Metamask</p> <p>You will also need to configure the <code>TST</code> tokens to Dojima\u2019s Testnet for visualization if you are following the introductory D11.js tutorial. *Switch the network on Metamask to point to the Dojima testnet - https://api-dev.d11k.dojima.network/ *. On Metamask, this will be shown as <code>Private Network</code> or whatever you have named it when adding the custom rpc </p> <p>The corresponding <code>TST</code> token address on Dojima testnet is <code>0x2d7882beDcbfDDce29Ba99965dd3cdF7fcB10A1e</code>. Note that this token contract address is different from that of Goerli - since this is the <code>TST</code> token on the Dojima Network. A detailed, screen-by-screen guide to add custom tokens is shown here:</p> <p>You can open Metamask and then click on the option for Add Token.</p> <p></p> <p>You will see a screen to either search from a list of already available tokens or add a custom token. Click on Custom Token.</p> <p>You will see a field to add the Token Address. Paste the token address in the form, and configure the token name as <code>TST</code>.</p> <p></p> <p>You can then click on Next.</p> <p></p> <p>And then click on Add Tokens. You will be navigated back to the home screen and the new token will be displayed in the token list.</p> <p>Adding the <code>ERC721-TESTV4</code> token (ERC721) to your Metamask account on the G\u00f6rli Network</p> <p>To display <code>ERC721-TESTV4</code> tokens on your account on the G\u00f6rli Network, you can click on the Add Tokens option in Metamask. It will then navigate you to a screen. You then click on Custom Token tab and copy-paste the address below in the Token Address field.</p> <p>The <code>ERC721-TESTV4</code> token contract address on G\u00f6rli is <code>0xfA08B72137eF907dEB3F202a60EfBc610D2f224b</code>. Note that the <code>ERC721-TESTV4</code> token is an example ERC721 token contract.</p> <p>The token symbol is <code>ERC721-Testv4</code> and token of precision is <code>18</code>. Click on Add Tokens. The <code>ERC721-TESTV4</code> token should now be displayed on your account on Metamask.</p> <p>Adding the <code>ERC721-TESTV4</code> token (ERC721) to your Metamask account on the Dojima Testnet Network</p> <p>*Switch the network on Metamask to point to the Dojima testnet - https://api-dev.d11k.dojima.network/ *. On Metamask, this will be shown as <code>Private Network</code> or whatever you have named it when adding the custom rpc .</p> <p>To display <code>ERC721-TESTV4</code> tokens on your account on the Dojima Testnet Network, you can click on the Add Tokens option in Metamask. It will then navigate you to a screen. You then click on Custom Token tab and copy-paste the address below in the Token Address field.</p> <p>The <code>ERC721-TESTV4</code> token contract address on Dojima Testnet is <code>0x33FC58F12A56280503b04AC7911D1EceEBcE179c</code>. Note that the <code>ERC721-TESTV4</code> token is an example ERC721 token contract.</p> <p>The token symbol is <code>ERC721-Testv4</code> and token of precision is <code>18</code>. Click on Add Tokens. The <code>ERC721-TESTV4</code> token should now be displayed on your account on Metamask.</p> <p>Adding a test ERC1155 token to your Metamask account</p> <p>While the Dojima network supports ERC1155, Metamask does not yet support the standard. This update is expected in the fourth quarter of 2021.</p>"},{"location":"developer/Wallet/MetaMask/multiple-accounts/","title":"Managing Multiple Accounts on MetaMask","text":"<p>In case you are new to Ethereum and Metamask, here is a guide on how to create multiple accounts and import them:</p>"},{"location":"developer/Wallet/MetaMask/multiple-accounts/#create-account","title":"Create Account","text":"<p>To create multiple accounts, you click on Profile icon on Metamask and then click on Create Account</p> <p></p> <p>You can then add an account name and click on Create.</p> <p></p> <p>You can create more accounts this way. When you create multiple accounts, your addresses will be different at your end.</p>"},{"location":"developer/Wallet/MetaMask/multiple-accounts/#import-account","title":"Import Account","text":"<ul> <li>Open your wallet browser extension from your browser</li> <li>Select Settings &gt; Import Account</li> <li>Copy the Private key(You can find this in the Account Details) from your local account, paste it into the window provided, and select Import</li> </ul>"},{"location":"developer/Wallet/MetaMask/overview/","title":"MetaMask Overview with Dojima Network","text":"<p>MetaMask is a crypto wallet that can be used in a web browser and on mobile devices to interact with the Ethereum blockchain. It allows you to run Ethereum Dapps (Decentralized Apps) right in your browser without running a full Ethereum node.</p> <p>Type: Non-custodial/HD Private Key Storage: User\u2019s local browser storage Communication to Ethereum Ledger: Infura Private key encoding: Mnemonic</p> <p>Danger</p> <p>Please Backup your Secret Recovery Phrase, if your device breaks, is lost, stolen, or has data corruption, there is no other way to recover it. The Secret Recovery Phrase is the only way to recover your MetaMask accounts. Check more Basic Safety and Security Tips for MetaMask!</p>"},{"location":"developer/Wallet/MetaMask/overview/#guide-to-setup-metamask-for-dojima","title":"Guide to Setup Metamask for Dojima","text":"<ul> <li>Download &amp; Install MetaMask</li> <li>Configure Dojima on MetaMask</li> <li>Config Custom Tokens</li> <li>Create &amp; Import Accounts</li> </ul> <p>Get Test Tokens - Dojima Faucet</p>"},{"location":"developer/Wallet/MetaMask/overview/#1-set-up-web3","title":"1. Set up Web3","text":"<p>Step 1 Install the following in your DApp:</p> <pre><code>npm install --save web3\n</code></pre> <p>Create a new file, name it web3.js and insert the following code in it:</p> <pre><code>import Web3 from 'web3';\n\nconst getWeb3 = () =&gt; new Promise((resolve) =&gt; {\n  window.addEventListener('load', () =&gt; {\n    let currentWeb3;\n\n    if (window.ethereum) {\n      currentWeb3 = new Web3(window.ethereum);\n      try {\n        // Request account access if needed\n        window.ethereum.enable();\n        // Acccounts now exposed\n        resolve(currentWeb3);\n      } catch (error) {\n        // User denied account access...\n        alert('Please allow access for the app to work');\n      }\n    } else if (window.web3) {\n      window.web3 = new Web3(web3.currentProvider);\n      // Acccounts always exposed\n      resolve(currentWeb3);\n    } else {\n      console.log('Non-Ethereum browser detected. You should consider trying MetaMask!');\n    }\n  });\n});\n\n\nexport default getWeb3;\n</code></pre> <p>The above file exports a function called <code>getWeb3()</code> - the purpose of which is to request metamask account\u2019s access via detecting a global object (<code>ethereum</code> or <code>web3</code>) injected by Metamask.</p> <p>According to Metamask\u2019s API documentation: </p> <p>MetaMask injects a global API into websites visited by its users at window.ethereum (Also available at window.web3.currentProvider for legacy reasons). This API allows websites to request user login, load data from blockchains the user has a connection to, and suggest the user sign messages and transactions. You can use this API to detect the user of a web3 browser.</p> <p>In simpler terms, it basically means, having Metamask\u2019s extension/add-on installed in your browser, you\u2019d have a global variable defined, called <code>ethereum</code> (<code>web3</code> for older versions) - using this variable we instantiate our web3 object.</p> <p>Step 2</p> <p>Now, in your client code, import the above file, <pre><code>  import getWeb3 from '/path/to/web3';\n</code></pre> and call the function: <pre><code>  getWeb3()\n    .then((result) =&gt; {\n      this.web3 = result;// we instantiate our contract next\n    });\n</code></pre></p>"},{"location":"developer/Wallet/MetaMask/overview/#2-set-up-account","title":"2. Set up account","text":"<p>Now to send transactions (specifically those that alter the state of the blockchain) we\u2019ll need an account to sign those transactions from We instantiate our contract instance from the web3 object we created above: <pre><code>  this.web3.eth.getAccounts()\n  .then((accounts) =&gt; {\n    this.account = accounts[0];\n  })\n</code></pre> The <code>getAccounts()</code> function returns an array of all the accounts on user\u2019s metamask, and <code>accounts[0]</code> is the one currently selected by the user.</p>"},{"location":"developer/Wallet/MetaMask/overview/#3-instantiate-your-contracts","title":"3. Instantiate your contracts","text":"<p>Once we have our <code>web3</code> object in place, we\u2019ll next instantiate our contracts &gt; Assuming you have your contract ABI and address already in place :) <pre><code>  const myContractInstance = new this.web3.eth.Contract(myContractAbi, myContractAddress)\n</code></pre></p>"},{"location":"developer/Wallet/MetaMask/overview/#4-call-functions","title":"4. Call functions","text":"<p>Now for any function you\u2019d want to call from your contract, we directly interact with our instantiated contract object (which is <code>myContractInstance</code> declared in Step 2)</p> <p>A quick review: - Functions that alter the state of the contract are called <code>send()</code> functions - Functions that do not alter the state of the contract are called <code>call()</code> functions</p> <p>Calling <code>call()</code> Functions <pre><code>  this.myContractInstance.methods.myMethod(myParams)\n  .call()\n  .then (\n    // do stuff with returned values\n  )\n</code></pre> Calling <code>send()</code> Functions <pre><code>  this.myContractInstance.methods.myMethod(myParams)\n  .send({\n    from: this.account,gasPrice: 0\n  })\n  .then (\n    (receipt) =&gt; {\n      // returns a transaction receipt}\n    )\n</code></pre></p>"},{"location":"developer/Wallet/MetaMask/tutorial-metamask/","title":"MetaMask Tutorial for Dojima Network","text":"<p>If you are wondering how to create a new cryptocurrency wallet, consider creating one by installing the MetaMask extension.</p> <p>MetaMask is a free and secure browser extension that allows web applications to read and interact with the Ethereum blockchain.</p>"},{"location":"developer/Wallet/MetaMask/tutorial-metamask/#step-1-install-metamask-on-your-browser","title":"Step 1. Install MetaMask on your browser","text":"<p>To create a new wallet with MetaMask you need to install the extension first. You can install Metamask for\u00a0Chrome,\u00a0Firefox, Brave and\u00a0Opera\u00a0browsers.</p> <ol> <li>Open\u00a0https://metamask.io\u00a0or search for \u201cMetamask extension\u201d using your favorite search engine.</li> </ol> <p>In this tutorial we will be using Google Chrome as an example, but the workflow is the same for all browsers.</p> <p></p> <p></p> <ol> <li> <p>Click\u00a0Chrome\u00a0to install MetaMask as a Google Chrome extension.</p> </li> <li> <p>Click\u00a0Add to Chrome.</p> </li> <li> <p>Click\u00a0Add Extension.</p> </li> </ol> <p></p> <p></p> <p>That\u2019s it! You have successfully installed MetaMask extension!</p>"},{"location":"developer/Wallet/MetaMask/tutorial-metamask/#step-2-create-an-account","title":"Step 2. Create an account","text":"<p>The next step is to create an account.</p> <ol> <li>Click on the MetaMask icon in the upper right corner to open the extension.</li> <li>To install the latest version of MetaMask, click\u00a0Try it now.</li> <li>Click\u00a0Continue.</li> </ol> <p></p> <ol> <li>You will be asked to create a new password. Create a strong password and click\u00a0Create.</li> </ol> <p>Don\u2019t forget to store your password for safekeeping!</p> <p></p> <p></p> <ol> <li> <p>Proceed by clicking\u00a0Next, then accept Terms of Use.</p> </li> <li> <p>Click\u00a0Reveal secret words.</p> </li> <li> <p>You will see a 12 words seed phrase. Save seed words as a file or copy them to a safe place and click\u00a0Next.</p> </li> </ol> <p>Reveal secret words and copy your secret backup phrase to a safe place</p> <p></p> <p></p> <p>Security tips:Write this phrase on a piece of paper and store in a secure location. If you want even more security, write it down on multiple pieces of paper and store each in 2\u20133 different locations.Memorize this phrase.</p> <ol> <li>Verify your secret phrase by selecting the previously generated phrase. When done, click\u00a0Confirm.</li> </ol> <p></p> <p>By \u201csolving this puzzle\u201d you are confirming that you know your secret phrase</p> <p>Congratulations!\u00a0You have successfully created your MetaMask account. A new Ethereum wallet address was automatically generated for you!</p>"},{"location":"developer/developer-dashboard/contract/","title":"Contract","text":"<p>To deploy a smart contract using Dojima without any complications, you can follow these simplified steps designed for a seamless experience.By simplifying the process into a single-tap deployment, Dojima aims to enhance the user experience for deploying smart contracts on the supported chain (Ex. Dojima, Ethereum \u2026). The platform streamlines the necessary inputs, providing a user-friendly environment for both beginners and experienced developers.</p> <p></p>"},{"location":"developer/developer-dashboard/contract/#step1-enter-required-inputs-for-contract-deployment","title":"Step1: Enter required inputs for contract deployment","text":"<p>Dojima introduces a unique feature that allows users to enter required inputs for contract deployment.By combining a user-friendly interface with dynamic code auto-generation, Dojima bridges the gap between beginners and experienced developers, making smart contract deployment accessible to a wider audience.</p> <p></p>"},{"location":"developer/developer-dashboard/contract/#step2-click-on-deploy-button-to-proceed-to-next-step","title":"Step2: Click on Deploy button to proceed to next step","text":""},{"location":"developer/developer-dashboard/contract/#step3-review-and-deploy","title":"Step3: Review and Deploy","text":"<p>Certainly! Let\u2019s enhance the explanation for the last step where developers review the smart contract details, add arguments if needed, and initiate the deployment. And it takes a moment to complete the deployment process for the selected chain.</p> <p></p>"},{"location":"developer/developer-dashboard/login/","title":"Login","text":""},{"location":"developer/developer-dashboard/login/#single-sign-on-with-google-account","title":"Single Sign-On with Google Account:","text":"<p>Seamlessly access to the Dojima Developer Dashboard by logging in with your Google account. Enjoy a secure and hassle-free authentication process, eliminating the need for multiple usernames and passwords.</p> <p></p>"},{"location":"developer/developer-dashboard/projects/","title":"Projects List","text":"<p>Navigating through your projects has never been more straightforward. We\u2019ve organized your projects in a clear and concise table format, providing you with an instant overview and easy access to vital project details.</p> <p></p>"},{"location":"developer/developer-dashboard/xchain_connections/","title":"XChain Connections","text":"<p>Dojima has made user-friendly process to deploy single-tap deployment of contracts for selected chains in xchain-connections.</p> <p></p>"},{"location":"developer/developer-dashboard/xchain_connections/#step1-seclect-chain-layer","title":"Step1: Seclect Chain Layer","text":"<p>Select the chain layer and you can get the actions popup on the top-left of the screen.</p> <p></p> <p></p>"},{"location":"developer/developer-dashboard/xchain_connections/#step2-select-types-of-chain","title":"Step2: Select types of chain","text":"<p>Select the type from provided contract types and enter Contract Name and Contract Symbol. Additional details can be added such as Features, Access Control, Upgradeability and License. We generate the automated code for you.</p> <p></p> <p></p> <p></p>"},{"location":"developer/developer-dashboard/xchain_connections/#step3-click-on-save-button","title":"Step3: Click on Save button","text":"<p>After entering the details and click on Save button. And Deploy button is activated on the bottom-right of the screen.</p> <p></p> <p></p>"},{"location":"developer/developer-dashboard/xchain_connections/#step4-click-on-deploy-button","title":"Step4: Click on Deploy button","text":"<p>After clicking on deploy button. Deploy popup is displayed to enter additional details for each chain one by one.</p> <p></p> <p></p> <p></p> <p></p>"},{"location":"developer/developer-dashboard/dashboard/new_project/","title":"Create New Project","text":""},{"location":"developer/developer-dashboard/dashboard/new_project/#create-new-project","title":"Create new project:","text":"<p>Welcome to the Template-Driven Project Creation Platform! To begin a new project, navigate to the \u201cCreate New Project\u201d section, where you\u2019ll find a straightforward process to kickstart your endeavor. Follow these steps to initiate your project:</p> <p></p>"},{"location":"developer/developer-dashboard/dashboard/new_project/#enter-project-details","title":"Enter project details:","text":"<p>Enter project details such as Project Name, Project Type and Description of project. Before entering the next section user must enter Project Name and Project Type as they are mandatory fields.</p> <p></p> <p></p>"},{"location":"developer/developer-dashboard/dashboard/new_project/#select-chain","title":"Select Chain","text":"<p>It\u2019s time to take the next step in your project creation. Select one chain from the options provided but Dojima is auto selected as it is a mandatory chain. After next button is clicked the developer is navigated to xchain-connection section.</p> <p></p>"},{"location":"developer/developer-dashboard/dashboard/templates/","title":"Templates","text":""},{"location":"developer/developer-dashboard/dashboard/templates/#select-from-templates","title":"Select from Templates","text":"<p>Navigate to the \u201cSelect from Templates\u201d section to explore our range of existing templates. Each template is designed to address distinct project types, offering you a head start in achieving your project creation.</p> <p></p> <p></p>"},{"location":"developer/sources/basic/","title":"Basic Developer Sources","text":"<ul> <li>What is Ethereum?</li> <li>Mastering Ethereum</li> <li>Full-Stack dApp Tutorial Series</li> <li>Web3 Developer Stack</li> <li>How to Create a Token (ERC20)?</li> <li>Integrating IPFS with Ethereum</li> <li>Hello World Smart Contract</li> <li>How to Create an NFT</li> <li>Lens Protocol | How to Create a Decentralized Twitter</li> <li>Truffle Tutorial</li> <li>Dapp University</li> </ul>"},{"location":"developer/sources/basic/#learn-more-about-blockchain","title":"Learn More about Blockchain","text":"<ul> <li>Integrating Webhooks</li> <li>[Archive Nodes with Debug namespace]</li> </ul>"},{"location":"developer/sources/external/","title":"External Developer Sources","text":"<ul> <li>ConsenSys Academy Developer Course</li> <li>Infura Docs</li> <li>Truffle Docs</li> <li>Geth Docs</li> <li>Remix Docs</li> <li>OpenZeppelin Docs</li> </ul>"},{"location":"developer/sources/external/#useful-tutorials","title":"Useful Tutorials","text":"<ul> <li>Alchemy University</li> <li>CryptoZombies</li> <li>Ethernaut</li> <li>Capture the Ether</li> <li>Road to Web 3</li> </ul>"},{"location":"developer/sources/external/#additional-resources","title":"Additional Resources","text":"<ul> <li>Video Tutorials Library</li> <li>Writings by the Team</li> </ul>"},{"location":"developer/sources/faucet/","title":"Faucet","text":"<p>The Faucet is a web-based service that can send you some test tokens so that you can explore and experiment with testnet without having to pay for anything.</p>"},{"location":"developer/sources/faucet/#prerequisites","title":"Prerequisites","text":"<p>Before we begin, you must have the testnet address of the respective chain. To obtain an address, Login or Register into Dojima Wallet. If you don\u2019t have a seed phrase, follow these steps.</p> <p>To request tokens using the faucet.</p>"},{"location":"developer/sources/faucet/#1-before-requesting-testnet-tokens-check-the-table-for-available-faucet-balances","title":"1. Before requesting TestNet tokens check the table for available faucet balances.","text":""},{"location":"developer/sources/faucet/#2-select-the-hermes-token-and-copy-the-address","title":"2. \u00a0Select the Hermes token and copy the address.","text":""},{"location":"developer/sources/faucet/#3-choose-a-chain-for-token-requests","title":"3. Choose a chain for token requests.","text":""},{"location":"developer/sources/faucet/#4-paste-address-in-the-address-input-or-use-self-address-checkbox","title":"4. Paste address in the address input or use self address checkbox.","text":""},{"location":"developer/sources/faucet/#5-click-the-submit-button-following-submission-a-popup-will-appear-indicating-whether-the-transaction-was-successful-or-unsuccessful-to-close-the-popup-press-anywhere","title":"5. Click the \u201csubmit\u201d button. Following submission, a popup will appear indicating whether the transaction was successful or unsuccessful. To close the popup, press anywhere.","text":""},{"location":"developer/sources/faucet/#6-if-the-pop-up-indicates-a-successful-transaction-you-can-check-your-test-token-balance-on-your-dojima-wallet-dashboard","title":"6 If the pop-up indicates a successful transaction, you can check your test token balance on your Dojima wallet dashboard.","text":""},{"location":"developer/sources/faucet/#stagenet","title":"Stagenet","text":"<p>During a specified period, Stagenet tokens are accessible to users, offering a unique opportunity for participation in a limited-time token distribution.</p> <p></p>"},{"location":"developer/templates/deposit_manager/","title":"Deposit Manager Template Documentation","text":""},{"location":"developer/templates/deposit_manager/#introduction","title":"Introduction","text":"<p>The Deposit Manager contract template is a pivotal tool for Dojima Chain developers, designed to facilitate cross-chain functionalities within decentralized applications (DApps). It emphasizes the management of token deposits across different blockchain networks.</p>"},{"location":"developer/templates/deposit_manager/#key-features","title":"Key Features:","text":"<ul> <li>Cross-Chain Token Management: Efficiently tracks ERC20 tokens (or their equivalents) across multiple chains.</li> <li>Deposit Tracking: Employs unique IDs for each token deposit, alongside the token amount and address.</li> <li>State Synchronization with Inbound State Sender: Leverages inbound state sender for communicating from other chains to the Dojima Chain.</li> <li>Multi-Chain Compatibility: While primarily designed for Ethereum, it\u2019s adaptable for additional blockchain integrations.</li> </ul>"},{"location":"developer/templates/deposit_manager/#use-cases","title":"Use Cases","text":"<ul> <li>Cross-Chain DApps Development: Optimal for DApps that necessitate token fluidity across blockchain ecosystems.</li> <li>Token Deposit Ledger: Ideal for platforms that require an accurate and detailed record of token deposits.</li> </ul>"},{"location":"developer/templates/deposit_manager/#prerequisites","title":"Prerequisites","text":"<ul> <li>Dojima Chain: The Dojima chain is an EVM-based blockchain that stores all the cross-chain data. Read more about the Dojima chain here.</li> <li>Destination Chain: A destination chain will refer to all the chains that are connected to the Dojima chain.   The destination chain could be Ethereum, Solana, or any other chain that is connected to the Dojima chain.   But it doesn\u2019t represent the origin of transaction.   Transaction can originate either from Dojima chain or destination chain (Ethereum, Solana).</li> <li>Hermes Client: The Hermes client is essential for cross-chain communication between Destination and the Dojima Chain and vice versa. Read more about Hermes here.</li> <li>Inbound State Sender: The Inbound State Sender is a key component of the cross-chain data transfer.   It will be deployed on all the destination chains and will be responsible for facilitating the reception of encoded state   messages from destination chains to the Dojima Chain. Read more about inbound state sender and how to use it here.</li> <li>Root Token: In the context of deposit manager contract, root token refers to any token on the destination chains.</li> <li>Child Token: In the context of deposit manager contract, child token refers to the root-tokens counterpart on the Dojima chain.</li> <li>Child Chain: The child chain refers to the contract that is deployed on the Dojima chain. It manages all the root token counterparts (child tokens) on the Dojima chain.</li> </ul>"},{"location":"developer/templates/deposit_manager/#contract-overview","title":"Contract Overview","text":""},{"location":"developer/templates/deposit_manager/#childchain-contract-dojima-chain","title":"ChildChain Contract (Dojima Chain)","text":"<p>Child chain contract will be deployed on the Dojima chain. It is responsible for creating and managing child tokens on the Dojima chain. Each Root Token will have a corresponding child token on the Dojima chain. The child token will be used to track the token balance of users on the Dojima chain. The child token will be minted when a user deposits tokens on the Ethereum chain. The child token will be burned when a user withdraws tokens from the Ethereum chain.</p>"},{"location":"developer/templates/deposit_manager/#key-functionalities","title":"Key Functionalities","text":"<ul> <li>addToken: Creates and maps a child token on the Dojima chain for a specific root token for the specified chain.</li> <li>onStateReceive: Executes the state sync process, minting tokens on the Dojima chain based on the incoming state information from the destination chains.</li> <li>withdrawTokens: Manages tokens\u2019 withdrawal requests, facilitating transfers back to the Destination chain.</li> <li>_depositTokens: Credits tokens on the Dojima chain based on the incoming state information.</li> </ul>"},{"location":"developer/templates/deposit_manager/#childerc20-and-childtoken-contracts","title":"ChildERC20 and ChildToken Contracts","text":"<ul> <li>Support ERC20 token functionalities on the Dojima chain, including standard and cross-chain transactions.</li> </ul>"},{"location":"developer/templates/deposit_manager/#depositmanager-contract-destination-chains","title":"DepositManager Contract (Destination Chains)","text":"<p>Deposit manager contract will be deployed on the destination chains (Ethereum, Solana, etc.). It is responsible for managing the deposit of tokens on the destination chains.</p>"},{"location":"developer/templates/deposit_manager/#constructor","title":"Constructor","text":"<ul> <li>Set up the contract with a specific chain name, establishing a cross-chain context.</li> </ul>"},{"location":"developer/templates/deposit_manager/#key-functions","title":"Key Functions","text":"<ul> <li>updateChildChainAndStateSender: Modifies the child chain and inbound state sender contract addresses.</li> <li>deposit: Facilitates the deposit of ERC20 tokens by users, accurately recording each transaction. It involves locking tokens   in deposit manager and initiate a state sync process to deposit tokens in child chain contract.   <pre><code>inboundStateSender.transferPayload(\n _childChain,\n abi.encode(_chainName, _user, _token, _amount, _depositId)\n)\n</code></pre>   The transferPayload function in the depositBlock method has the following parameters:</li> <li>childChain: The target child chain contract address on the dojima chain for the cross-chain transfer.</li> <li>balanceOf: Retrieves the specific token balance for an account.</li> <li>abi.encode(_chainName, _user, _token, _amount, _depositId): This is the payload that is being transferred to the target blockchain. It\u2019s encoded using Ethereum\u2019s ABI (Application Binary Interface) encoding. The payload includes:<ul> <li>_chainName: The name of the chain where the tokens will be deposited.   This will be same as the chain name passed to the constructor.   Basically the name of the chain where the deposit manager contract is deployed.   In this case <code>Ethereum</code>.</li> <li>_user: The address of the user who will receive the tokens on the target blockchain</li> <li>_token: The address of the token contract(root token) on the destination blockchain.</li> <li>_amount: The number of tokens to be transferred.</li> <li>_depositId: This is a unique identifier for the deposit operation. The <code>depositId</code> could be used to track or identify individual deposit operations.</li> </ul> </li> </ul>"},{"location":"developer/templates/deposit_manager/#events","title":"Events","text":"<ul> <li>Deposit: Announced upon a successful token deposit.</li> <li>Withdrawal: Announced during token withdrawal (yet to be implemented).</li> </ul>"},{"location":"developer/templates/deposit_manager/#system-integration","title":"System Integration","text":""},{"location":"developer/templates/deposit_manager/#inboundstatesender","title":"InboundStateSender","text":"<ul> <li>Functionality: The <code>InboundStateSender</code>\u2019s <code>transferPayload</code> function is crucial in cross-chain communication.   It transmits the encoded state (chain name,user address, token amount, deposit ID) to the Dojima chain.</li> <li>Usage in <code>transferToChain</code>:</li> </ul> <pre><code>  inboundStateSender.transferPayload(\n   _childChain,\n   abi.encode(_chainName, _user, _token, _amount, _depositId)\n  )\n</code></pre> <p>Note: Read more about inbound state sender and how to use it here.</p>"},{"location":"developer/templates/deposit_manager/#workflow","title":"Workflow","text":"<ol> <li>Token Registration: Utilizes <code>ChildChain.addToken</code> for mapping tokens on the Dojima chain.</li> <li>Token Deposit (Ethereum): Users make token deposits into the <code>DepositManager</code>.</li> <li>State Synchronization: Encoded deposit data is sent to the Dojima chain for synchronization.</li> <li>Token Deposit (Dojima): <code>ChildChain</code> decodes the data, allocating tokens correspondingly.</li> </ol>"},{"location":"developer/templates/deposit_manager/#interaction-with-child-chain","title":"Interaction with Child Chain","text":"<p>The Deposit Manager ensures tokens deposited on Ethereum are mirrored on the Dojima Chain through:</p> <ul> <li>Inbound State Sender: Facilitates the reception of encoded state messages from Ethereum and other chains to the Dojima Chain, ensuring that deposit data is accurately transmitted for processing.</li> <li>Token Minting on Dojima: Upon receiving deposit data, the Child Chain mints equivalent child tokens, crediting them to the respective user\u2019s account on the Dojima Chain, maintaining consistency across chains.</li> <li>Security and Verification: The State Syncer Verifier, exclusive to the Dojima Chain, authenticates the incoming state messages, permitting the Child Chain to mint tokens securely.</li> </ul>"},{"location":"developer/templates/deposit_manager/#security-and-cautions","title":"Security and Cautions","text":"<ul> <li>Accurate State Sender Address: Essential verification of the state sender address for security.</li> <li>Cross-Chain Protocol Security: Evaluate the security measures of the Hermes bridge and related platforms.</li> <li>Comprehensive Smart Contract Audits: Essential to identify and mitigate potential vulnerabilities.</li> <li>Robust User Authentication: Critical for ensuring secure user interaction with the DApp.</li> </ul>"},{"location":"developer/templates/deposit_manager/#conclusion","title":"Conclusion","text":"<p>This template, alongside the Child Chain, establishes a foundational framework for developing cross-chain DApps, particularly for token transfers between Ethereum and the Dojima Chain. By leveraging this template, developers are equipped to enable streamlined and secure cross-chain token transfers, broadening the interoperability and utility of their applications.</p>"},{"location":"developer/templates/omni_chain_ERC20/","title":"OmniChain ERC20 template Documentation","text":""},{"location":"developer/templates/omni_chain_ERC20/#introduction","title":"Introduction","text":"<p>The OmniChain ERC20 template is a pivotal tool for Dojima Chain developers, facilitating the seamless transfer and management of a token across different blockchain networks, including Ethereum, Solana, and others.</p>"},{"location":"developer/templates/omni_chain_ERC20/#key-features","title":"Key Features:","text":"<ul> <li>Cross-Chain Transfer: Enables the transfer of tokens from the Dojima chain to other blockchains.</li> <li>State Synchronization with Outbound State Sender: Leverages outbound state sender for communicating from the Dojima Chain to other chains.</li> <li>Multi-Chain Compatibility: It allows user to transfer tokens from the Dojima chain to any other chain that is connected to the Dojima chain.</li> </ul>"},{"location":"developer/templates/omni_chain_ERC20/#use-cases","title":"Use Cases","text":"<ul> <li>Cross-Chain DApps Development: Optimal for DApps that necessitate token fluidity across blockchain ecosystems.</li> <li>Multi-Chain Token Management: Ideal for platforms that require a single token to be used across multiple blockchains.</li> </ul>"},{"location":"developer/templates/omni_chain_ERC20/#prerequisites","title":"Prerequisites","text":"<ul> <li>Primary Chain: The primary chain refers to the Dojima Chain.</li> <li>Secondary Chain: The secondary chain refers to the chains other than the Dojima Chain. For example, Ethereum, Solana, Polkadot, etc.</li> <li>Dojima Chain: The Dojima chain is an EVM-based blockchain that stores all cross-chain data. Read more about the Dojima chain here.</li> <li>Source Chain: The source chain refers to the chain from which the cross-chain transfer originates. In the context of the OmniChainERC20Contract, the source chain is the Dojima chain.</li> <li>Destination Chain: A destination chain will refer to all the chains that are connected to the Dojima chain.   The destination chain could be Ethereum, Solana, or any other chain that is connected to the Dojima chain.   It doesn\u2019t represent the origin of transaction.</li> <li>Hermes Client: The Hermes client is essential for cross-chain communication between the destination and the Dojima Chain and vice versa. Read more about Hermes here.</li> <li>Outbound State Sender: The Outbound State Sender is a key component of the cross-chain data transfer.   It will be deployed on the Dojima chain and will be responsible   for facilitating the transmission of encoded state messages from the Dojima chain to destination chains.   Read more about outbound state sender and how to use it here.</li> <li>XToken: The XToken is an ERC20 token that will be used for cross-chain transfer.   It will be deployed on the Dojima chain and will be used to track the token balance of users on the Dojima chain.</li> <li>CrossChainERC20Contract: This token contract will be deployed on the Ethereum chain.   It will be used to manage the lifecycle of ERC20 tokens on the secondary chains (Ethereum, Solana, Polkadot, etc.).   and will be able to communicate with OmniChainERC20Contract through the Hermes Client.</li> </ul>"},{"location":"developer/templates/omni_chain_ERC20/#contract-overview","title":"Contract Overview","text":""},{"location":"developer/templates/omni_chain_ERC20/#omnichainerc20contract","title":"OmniChainERC20Contract","text":"<p>Omni chain ERC20 contract is a standard ERC20 contract deployed on the Dojima chain. It is responsible for the minting and burning of XToken on the Dojima chain. It facilitates the transfer of XTokens from the Dojima chain to other chains.</p>"},{"location":"developer/templates/omni_chain_ERC20/#requirements","title":"Requirements","text":"<ul> <li>Outbound State Sender: This is the contract address that is used to send updates from the primary chain (Dojima Chain) to the Secondary Chain (Ethereum, Solana, Polkadot etc.).</li> <li>OnStateReceive: This is a function that needs to be implemented in the primary chain (Dojima Chain) to process the state updates received from the secondary chain contract.</li> </ul> <p>\u26a0\ufe0f Warning: Only State Syncer Verifier is allowed to call <code>onStateReceive</code> function on dojima chain contracts. Syncer verifier is a system-controlled account with exclusive rights to mint tokens on the Dojima chain.</p>"},{"location":"developer/templates/omni_chain_ERC20/#key-functions","title":"Key Functions:","text":"<ul> <li>transferToChain: This function enables the transfer of tokens from the Dojima chain to other blockchains.   It involves burning tokens on the Source Chain (Dojima chain)   and initiates a state sync process to mint destination chain token.   <pre><code>    function transferToChain(\n      bytes32 destinationChain,\n      bytes memory user,\n      uint256 amount,\n      bytes memory destinationContractAddress\n  ) external nonReentrant {\n      _burn(msg.sender, amount);\n    outboundStateSender.transferPayload(\n      destinationChain,\n      destinationContractAddress,\n      refundAddress,\n      abi.encode(user, amount, depositID)\n    );\n  }\n</code></pre>   The transferPayload function in the transferToChain method has the following parameters:</li> <li><code>destinationChain</code>: The destination chain will be either Ethereum, Polkadot, Solana etc. for the cross-chain transfer. Basically the name of the secondary chains where we want to send the state update.</li> <li><code>destinationContractAddress</code>: This is the address of the contract on the secondary chain (Ethereum, Polkadot, Solana etc.) that will receive, decode and process the payload. It\u2019s usually the address of a smart contract that has a function to handle such incoming payloads.</li> <li><code>refundAddress</code>: This is the address of the entity on the primary chain (Dojima Chain) <code>usually a user address or another contract</code> that will be receiving the refund if the state update fails.</li> <li><code>abi.encode(user, amount, depositID)</code>: This is the payload that is being transferred to the target blockchain. It\u2019s encoded using Ethereum\u2019s ABI (Application Binary Interface) encoding. The payload includes:<ul> <li><code>user</code>: The address of the user who will receive the tokens on the destination chain</li> <li><code>amount</code>: The number of tokens to be transferred.</li> <li><code>depositID</code>: The <code>depositId</code> could be used to track or identify individual token transfer operations.</li> </ul> </li> <li>onStateReceive:   Executed by the <code>_stateVerifier</code> (Dojima system account),   this function handles the minting of tokens on the Dojima chain based on the state received from other chains.   It decodes the user address, amount, and deposit ID from the received encoded data.</li> </ul>"},{"location":"developer/templates/omni_chain_ERC20/#roles-and-security","title":"Roles and Security:","text":"<ul> <li>_stateVerifier Role: A system-controlled account with exclusive rights to mint tokens on the Dojima chain, ensuring security in the token minting process.</li> <li>Security Concerns: Robust error handling and transaction monitoring are essential to maintain integrity in cross-chain communication and prevent unauthorized minting or burning of tokens.</li> </ul>"},{"location":"developer/templates/omni_chain_ERC20/#xerc20contract","title":"XERC20Contract","text":"<p>This contract represents the ERC20 tokens on the Dojima Chain, detailing their properties and providing functions for their management within the Dojima ecosystem.</p>"},{"location":"developer/templates/omni_chain_ERC20/#crosschainerc20contract","title":"CrossChainERC20Contract","text":"<p>Manages the lifecycle of ERC20 tokens on the secondary chains (Ethereum, Solana, Polkadot, etc.). And links with OmniChainERC20Contract through the Hermes Client. The total supply of the token will be minted on during the contract initialization.</p> <ul> <li>Burn: The Contract will burn user token on the secondary chain (Ethereum, Solana, Polkadot etc.)   and will send the state update to the Dojima chain to mint the XERC20 token on the Dojima chain for the user.</li> <li>Minting: The Contract will mint the ERC20 on the secondary chain based on the payload received from the Dojima chain by the <code>executeState</code> function.</li> </ul>"},{"location":"developer/templates/omni_chain_ERC20/#requirements_1","title":"Requirements","text":"<ul> <li>Inbound State Sender: This is the contract used to send updates from the secondary chain (Ethereum, Solana, Polkadot etc.) to the primary chain (Dojima Chain).</li> <li>ExecuteState: This is a function that needs to be implemented in the secondary chain contract to process the state updates received from the primary chain (Dojima Chain).</li> </ul> <p>\u26a0\ufe0f Warning: Only State Inbound State Sender contract address is allowed to call <code>executeState</code> function on secondary chains (Ethereum, Solana, Polkadot etc.).</p>"},{"location":"developer/templates/omni_chain_ERC20/#workflow","title":"Workflow","text":""},{"location":"developer/templates/omni_chain_ERC20/#transfer-from-omnichainerc20contract-to-crosschainerc20contract","title":"Transfer From OmniChainERC20Contract to CrossChainERC20Contract","text":"<ul> <li>Source Chain: The source chain here is Dojima Chain (Primary Chain).</li> <li>Transfer From Source: ERC20 token transfers are initiated on the Dojima Chain through the OmniChainNFTContract, specifying the token amount, user address and destination contract address (CrossChainERC20 contract address).</li> <li> <p>State Synchronization: The transfer\u2019s state is encoded and transmitted across chains via the Hermes Client, utilizing the outbound state sender for secure communication.</p> </li> <li> <p>Functionality: The <code>OutboundStateSender</code>\u2019s <code>transferPayload</code> function is crucial in cross-chain communication. It transmits the encoded state (user address, token amount, deposit ID) from the Dojima chain\u2019s OmniChainERC20Contract to destination chain contracts.</p> </li> <li>Significance: Ensures the synchronization of token states across chains, triggering corresponding actions (burn or mint) in the connected contracts.</li> <li>Usage in <code>transferToChain</code>:     <pre><code>    outboundStateSender.transferPayload(\n        destinationChain,\n        destinationContractAddress,\n        msg.sender,\n        abi.encode(user, amount, depositID)\n    )\n</code></pre></li> </ul> <p>\u26a0\ufe0f Warning:   The <code>outboundStateSender</code> contract is very crucial for the cross-chain transfer make sure you follow the steps   mentioned in the doc.</p> <ul> <li>After transfer payload: Once above step is successfully executed on a primary chain (Dojima Chain) the state update will be sent to the secondary chains (Ethereum, Solana, Polkadot etc.).</li> <li>Minting on Destination Chain: Upon receiving the state, the CrossChainERC20 contract on the secondary chain will mint the specified number of tokens for the intended recipient through <code>executeState</code> function, completing the cross-chain transfer.     <pre><code>    function executeState(uint256 depositID, bytes calldata payload) external {\n        // Decode the payload\n        (address userAddress, uint256 amount, uint256 depositId) = abi.decode(\n            stateData, (address, uint256, uint256)\n        );\n        // Mint the ERC20 token for the user\n        // Process the state update\n    }\n</code></pre></li> </ul>"},{"location":"developer/templates/omni_chain_ERC20/#transfer-from-crosschainerc20contract-to-omnichainerc20contract","title":"Transfer From CrossChainERC20Contract to OmniChainERC20Contract","text":"<ul> <li>Destination Chain: The destination chain here is Secondary Chains (Ethereum, Solana, Polkadot).</li> <li>Burn on Destination Chain: The CrossChainERC20 contract will burn the specified number of tokens for the user on the secondary chain.</li> <li>Transfer From Destination Chain: Encode the payload (user address, amount, depositID) and transfer from the secondary chains (Ethereum, Solana, Polkadot etc.) to the Dojima chain through the Inbound State Sender   to mint the same amount of XERC20 token on the Dojima chain for the specified user.</li> <li>Usage in <code>transferToOmniChain</code>:     <pre><code>   function transferToOmniChain(bytes memory user, uint256 amount) external nonReentrant {\n        _burn(senderAddress, amount);\n        inboundStateSender.transferPayload(\n          omniChainContractAddress,\n          abi.encode(user, amount, depositID)\n        );\n    }\n</code></pre></li> <li>After transfer payload: Once above step is successfully executed on secondary chains (Ethereum, Solana, Polkadot etc.) the state update will be sent to the Dojima chain.</li> <li>State Receive on Source Chain: Upon receiving the state,   OmniChainERC20Contract which is on Dojima Chain will decode the user address, amount,   deposit ID will mint the specified number of tokens for the intended recipient, completing the cross-chain transfer.   and deposit IDand mints the XERC20 token for the user.</li> </ul>"},{"location":"developer/templates/omni_chain_ERC20/#security-and-best-practices","title":"Security and Best Practices","text":"<ul> <li>Audit Compliance: Ensure all contracts undergo thorough security audits.</li> <li>Transaction Monitoring: Implement systems to monitor and verify cross-chain transactions regularly.</li> <li>Role Management: Strictly manage role assignments, especially for critical roles like <code>_stateVerifier</code>.</li> <li>Gas Optimization: Aim for efficiency in contract execution to minimize transaction costs.</li> </ul>"},{"location":"developer/templates/omni_chain_ERC20/#conclusion","title":"Conclusion","text":"<p>The OmniChainERC20Contract Suite represents a significant step towards seamless blockchain interoperability, with a focus on security, efficiency, and developer-friendliness. It is crucial for developers to understand the intricacies of the suite to leverage its full potential in their DApp development.</p>"},{"location":"developer/templates/omni_chain_NFT/","title":"OmniChain NFT Template Documentation","text":""},{"location":"developer/templates/omni_chain_NFT/#introduction","title":"Introduction","text":"<p>The OmniChainNFT template provides a comprehensive framework for Dojima Chain developers to facilitate the cross-chain transfer of Non-Fungible Tokens (NFTs), enabling seamless interoperability and utilization across various blockchain ecosystems.</p>"},{"location":"developer/templates/omni_chain_NFT/#key-features","title":"Key Features","text":"<ul> <li>Cross-Chain NFT Transfers: Allows for the seamless transfer of NFTs across different blockchain networks.</li> <li>State Synchronization : Utilizes the outbound state sender for robust cross-chain communication.</li> <li>Multi-Chain Compatibility: Ensures NFTs are accessible and transferable across a wide range of blockchain networks.</li> </ul>"},{"location":"developer/templates/omni_chain_NFT/#use-cases","title":"Use Cases","text":"<ul> <li>Cross-Chain NFT Marketplaces: Allows NFTs to be listed, bought, and sold across different blockchain marketplaces.</li> <li>NFT Collections: Enables collectors to move their NFTs across chains, broadening the exposure and utility of their collections.</li> </ul>"},{"location":"developer/templates/omni_chain_NFT/#prerequisites","title":"Prerequisites","text":"<ul> <li>Primary Chain: The primary chain refers to the Dojima Chain.</li> <li>Secondary Chain: The secondary chain refers to the chains other than the Dojima Chain. For example, Ethereum, Solana, Polkadot, etc.</li> <li>Source Chain: The source chain refers to the chain from which the cross-chain transfer originates.</li> <li>Destination Chain: A destination chain will refer to the chains where the cross-chain transfer will be received.</li> <li>Hermes Client: Proficiency with the Hermes Client, a crucial component for enabling the communication between the Dojima Chain and other blockchains. The Hermes Client facilitates the secure and efficient transfer of state information across chains.</li> <li>Dojima Chain: The Dojima chain is an EVM-based blockchain that stores all cross-chain data. Read more about the Dojima chain here.</li> <li>OutboundStateSender: The OutboundStateSender contract will be used to send state updates from the primary chain (Dojima Chain) to the secondary chain (Ethereum, Solana, Polkadot).</li> <li>InboundStateSender: The InboundStateSender contract will be used to send state updates from the secondary chain (Ethereum, Solana, Polkadot) to the primary chain (Dojima Chain).</li> <li>XNFTContract: The XNFTContract is an ERC721 standard token contract that will be used for cross-chain NFT transfer.   It will be deployed on the Dojima chain and will be used to track the NFTs\u2019 of users on the Dojima chain.</li> <li>CrossChainNFTContract: This NFT contract will be deployed on the secondary chains (Ethereum, Solana, Polkadot, etc.).   It will be used to manage the lifecycle of NFTs\u2019 on the secondary chain (Ethereum, Solana, Polkadot, etc.) network   and will be able to communicate with OmniChainNFTContract through the Hermes Client.</li> </ul>"},{"location":"developer/templates/omni_chain_NFT/#contract-overview","title":"Contract Overview","text":""},{"location":"developer/templates/omni_chain_NFT/#omnichainnftcontract","title":"OmniChainNFTContract","text":"<p>A pivotal contract deployed on the primary chain (Dojima Chain) to manage the lifecycle of NFTs during the cross-chain transfer process, including functionalities for burning and minting NFTs across chains.</p>"},{"location":"developer/templates/omni_chain_NFT/#requirements","title":"Requirements","text":"<ul> <li>Outbound State Sender: This is the contract address used to send updates from the primary chain (Dojima Chain) to the secondary chain (Ethereum, Solana, Polkadot).</li> <li>OnStateReceive: This function is responsible for receiving the state updates from the secondary chain and processing them on the Dojima Chain.</li> </ul> <p>\u26a0\ufe0f Warning: Only State Syncer Verifier is allowed to call <code>onStateReceive</code> function on dojima chain contracts. Syncer verifier is a system-controlled account with exclusive rights to mint tokens on the Dojima chain.</p>"},{"location":"developer/templates/omni_chain_NFT/#key-functions","title":"Key Functions:","text":"<ul> <li>transferToChain: This function enables the transfer of NFT from the Dojima chain to other blockchains.   It involves burning specified NFT on the Source Chain (Dojima chain)   and initiates a state sync process to mint the same NFT on the destination chain.   <pre><code>  function transferToChain(\n    bytes32 destinationChain,\n    bytes memory user,\n    uint256 amount,\n    bytes memory destinationContractAddress\n) external nonReentrant {\n    _burn(msg.sender, amount);\n  outboundStateSender.transferPayload(\n    destinationChain,\n    destinationContractAddress,\n    refundAddress,\n    abi.encode(user, amount, depositID)\n  );\n}\n</code></pre>   The transferPayload function in the transferToChain method has the following parameters:</li> <li><code>destinationChain</code>: The destination chain will be either Ethereum, Polkadot, Solana etc. for the cross-chain transfer. Basically the name of the secondary chains where we want to send the state update.</li> <li><code>destinationContractAddress</code>: This is the address of the contract on the secondary chain (Ethereum, Polkadot, Solana etc.) that will receive, decode and process the payload. It\u2019s usually the address of a smart contract that has a function to handle such incoming payloads.</li> <li><code>refundAddress</code>: This is the address of the entity on the primary chain (Dojima Chain) <code>usually a user address or another contract</code> that will be receiving the refund if the state update fails.</li> <li><code>abi.encode(user, amount, depositId)</code>: This is the payload that is being transferred to the target blockchain. It\u2019s encoded using Ethereum\u2019s ABI (Application Binary Interface) encoding. The payload includes:<ul> <li><code>user</code>: The address of the user who will receive the tokens on the destination chain</li> <li><code>amount</code>: The number of tokens to be transferred.</li> <li><code>depositID</code>: The <code>depositId</code> could be used to track or identify individual token transfer operations.</li> </ul> </li> <li>onStateReceive:   Executed by the <code>_stateVerifier</code> (Dojima system account),   this function handles the minting of tokens on the primary chain (Dojima chain) based on the state received from other chains.   It decodes the user address, amount, and deposit ID from the received encoded data.</li> </ul>"},{"location":"developer/templates/omni_chain_NFT/#roles-and-security","title":"Roles and Security:","text":"<ul> <li>_stateVerifier Role: A system-controlled account with exclusive rights to mint NFTs\u2019 on the Dojima chain, ensuring security in the token minting process.</li> <li>Security Concerns: Robust error handling and transaction monitoring are essential to maintain integrity in cross-chain communication and prevent unauthorized minting or burning of tokens.</li> </ul>"},{"location":"developer/templates/omni_chain_NFT/#xnftcontract","title":"XNFTContract","text":"<p>This contract represents the NFTs on the Dojima Chain, detailing their properties and providing functions for their management within the Dojima ecosystem.</p>"},{"location":"developer/templates/omni_chain_NFT/#crosschainnft","title":"CrossChainNFT","text":"<p>Manages the lifecycle of NFTs\u2019 on the secondary chains (Ethereum, Solana, Polkadot, etc.). And links with OmniChainNFTContract through the Hermes Client.</p> <ul> <li>Burn: The Contract will burn user NFT on the secondary chain (Ethereum, Solana, Polkadot etc.)   and will send the state update to the Dojima chain to mint the same NFT on the Dojima chain for the same user.</li> <li>Minting: The Contract will mint the NFT on the secondary chain based on the payload received from the Dojima chain by the <code>executeState</code> function.</li> </ul>"},{"location":"developer/templates/omni_chain_NFT/#requirements_1","title":"Requirements","text":"<ul> <li>Inbound State Sender: This is the contract address that is used to send updates from the secondary chain (Ethereum, Solana, Polkadot) to the primary chain (Dojima Chain).</li> <li>ExecuteState: This is a function that needs to be implemented in the secondary chain contract to process the state updates received from the primary chain (Dojima Chain).</li> </ul> <p>\u26a0\ufe0f Warning: Only State Syncer Verifier is allowed to call <code>onStateReceive</code> function on dojima chain contracts. Syncer verifier is a system-controlled account with exclusive rights to mint tokens on the Dojima chain.</p>"},{"location":"developer/templates/omni_chain_NFT/#workflow","title":"Workflow","text":""},{"location":"developer/templates/omni_chain_NFT/#transfer-from-omnichainerc20contract-to-crosschainerc20contract","title":"Transfer From OmniChainERC20Contract to CrossChainERC20Contract","text":"<ul> <li>Source Chain: The source chain here is Dojima Chain (Primary Chain).</li> <li>Burning NFT for Transfer: In <code>transferToChain</code>, NFT for the user are burned on the primary chain (Dojima chain) to initiate cross-chain transfer.</li> <li>Transfer Initiation: NFT transfers are initiated on the Dojima Chain through the OmniChainNFTContract, specifying the NFT and its destination.</li> <li>State Synchronization: The transfer\u2019s state is encoded and transmitted across chains via the Hermes Client, utilizing the outbound state sender for secure communication.</li> <li>Functionality: The <code>OutboundStateSender</code>\u2019s <code>transferPayload</code> function is crucial in cross-chain communication. It transmits the encoded state (user address, token amount, deposit ID) from the Dojima chain\u2019s OmniChainERC20Contract to the secondary chain (Ethereum, Solana, Polkadot, etc.) CrossChainNFT contracts.</li> <li>Usage in <code>transferToChain</code>:     <pre><code>outboundStateSender.transferPayload(\n    destinationChain,\n    destinationContractAddress,\n    msg.sender,\n    abi.encode(user, tokenId, depositID)\n)\n</code></pre></li> </ul> <p>\u26a0\ufe0f Warning: The <code>outboundStateSender</code> contract is very crucial for the cross-chain transfer make sure you follow the steps mentioned in the doc.</p> <ul> <li>After transfer payload: Once above step is successfully executed on a primary chain (Dojima Chain) the state update will be sent to the secondary chains (Ethereum, Solana, Polkadot etc.).</li> <li>Minting on Destination Chain: Upon receiving the state, the CrossChainNFT contract on the secondary chain will mint the NFT for the intended recipient, completing the cross-chain transfer.   <pre><code>    function executeState(uint256 depositID, bytes calldata payload) external {\n        // Decode the payload\n        (address userAddress, uint256 tokenId, uint256 depositId) = abi.decode(\n            stateData, (address, uint256, uint256)\n        );\n        // Mint the NFT for the user\n        // Process the state update\n    }\n</code></pre></li> </ul>"},{"location":"developer/templates/omni_chain_NFT/#transfer-from-crosschainerc20contract-to-omnichainerc20contract","title":"Transfer From CrossChainERC20Contract to OmniChainERC20Contract","text":"<ul> <li>Destination Chain: The destination chain here is Secondary Chains (Ethereum, Solana, Polkadot).</li> <li>Burn on Destination Chain: The CrossChainNFT contract will burn the specified NFT for the user on the secondary chain.</li> <li>Transfer From Destination Chain: Encode the payload (user address, tokenID, depositID) and transfer from the secondary chains (Ethereum, Solana, Polkadot etc.) to the Dojima chain through the Inbound State Sender</li> <li>Usage in <code>transferToOmniChain</code>:     <pre><code>   function transferToOmniChain(bytes memory user, uint256 amount) external nonReentrant {\n        _burn(tokenId);\n        inboundStateSender.transferPayload(\n          omniChainContractAddress,\n          abi.encode(user, tokenId, depositID)\n        );\n    }\n</code></pre></li> <li>After transfer payload: Once above step is successfully executed on secondary chains (Ethereum, Solana, Polkadot etc.) the state update will be sent to the Dojima chain.</li> <li>State Receive on Source Chain: Upon receiving the state,   OmniChainERC20Contract which is on Dojima Chain will decode the user address, amount,   deposit ID will mint the specified number of tokens for the intended recipient, completing the cross-chain transfer.   and deposit IDand mints the XERC20 token for the user.</li> </ul>"},{"location":"developer/templates/omni_chain_NFT/#security-and-best-practices","title":"Security and Best Practices","text":"<ul> <li>Smart Contract Audits: Ensure comprehensive audits of all contracts involved in the NFT transfer process to identify and mitigate potential security risks.</li> <li>Secure Communication Channels: Utilize secure and verified communication channels for the transmission of state information between chains.</li> <li>Role-Based Access Control: Implement and strictly enforce role-based access control within contracts to prevent unauthorized actions.</li> </ul>"},{"location":"developer/templates/omni_chain_NFT/#conclusion","title":"Conclusion","text":"<p>The OmniChainNFT Suite marks a significant advancement towards achieving seamless NFT interoperability across blockchain networks. By providing a standardized framework for cross-chain NFT transfers, it opens up new possibilities for NFT utilization and enhances the overall blockchain ecosystem\u2019s connectivity.</p>"},{"location":"tools/","title":"Tools for Dojima Network Users","text":"Tools <p>Explore our versatile tools section featuring a cross-chain wallet, innovative FAAS solution, and developer dashboard for seamless integration.</p> Dojima Wallet <p>Dojima wallet lets you organise major layer 1 tokens in one place.</p> Dojima FAAS <p>You can get blockchain functionality as a service from Dojima FAAS, like signing transactions, viewing transaction histories and more.</p>"},{"location":"tools/dojima-faas/","title":"Dojima FaaS Overview","text":""},{"location":"tools/dojima-faas/#dojima-faas","title":"Dojima faas","text":"<p>Dojima faas provides you blockchain functionality as a service. Blockchain functionality such as creating an account, gas rates for transaction, signing transaction, dollar price, transaction history, submit transaction e.t.c.</p>"},{"location":"tools/dojima-faas/#features","title":"Features","text":"<ul> <li>One Api - Single endpoint for all blockchain functionality to develop dapps.</li> <li>Create Account - create an account for any blockchain by just providing a chain name.</li> <li>Gas Rates - slow, average, fast gas rates for transaction to be processed.</li> <li>Dollar price - dollar price of any token instantly.</li> <li>Transaction history - transaction history of any blockchain providing necessary details.</li> <li>Price History - price of daily, weekly, yearly, all-time token.</li> </ul>"},{"location":"tools/dojima-faas/#user","title":"User","text":"<p>These endpoints are used to create, delete, find or update user.</p> <p>POST Create user</p> <pre><code> https://faas-test.dojima.network/dojima-faas/v1/user/create?name=robot1&amp;email=robot1@gmail.com&amp;plan=monthly\n</code></pre> <p>Returns user details along with apikey based on inputs provided.</p>"},{"location":"tools/dojima-faas/#params","title":"PARAMS","text":"name robot1 Required. Name of the user email <code>robot1@gmail.com</code>  Required. Provide valid email of the user to receive updates or notifications plan monthly  Required. \u2018monthly or yearly\u2019. Provide a plan type to get access until the selected period.  &gt; monthly - 10,000 calls/month yearly - 1,80,000 calls/year <p>GET Find user</p> <pre><code> https://faas-test.dojima.network/dojima-faas/v1/user/data?api=c226c9df7eb08c82c4f4c22266dd\n</code></pre> api c226c9df7eb08c82c4f4c22266dd"},{"location":"tools/dojima-faas/#account","title":"Account","text":"<p>These endpoints return details such as public address from seed phrase/mnemonic, balance of the respective input token.</p> <p>GET Address</p> <pre><code> https://faas-test.dojima.network/dojima-faas/v1/account/address?mnemonic=letter ethics correct bus asset pipe tourist vapor envelope kangaroo warm dawn&amp;network=testnet\n</code></pre> <p>Returns public addresses of the provided seed phrase of the user and network type.</p>"},{"location":"tools/dojima-faas/#headers","title":"HEADERS","text":"X-API-KEY c226c9df7eb08c82c4f4c22266dd  Required. Api Key of the user for endpoint to generate result Doesn\u2019t have one? Navigate to \u201cUser-&gt;Create user\u201d endpoint and get one. Note: Never share, disclouse or save \u2018apikey\u2019 publicly."},{"location":"tools/dojima-faas/faasaccount/","title":"Managing FaaS Accounts on Dojima","text":"<p>These endpoints return details such as public address from seed phrase/mnemonic, balance of the respective input token.</p>"},{"location":"tools/dojima-faas/faasaccount/#get-address","title":"GET Address","text":"<pre><code> https://faas-test.dojima.network/dojima-faas/v1/account/address?mnemonic=letter ethics correct bus asset pipe tourist vapor envelope kangaroo warm dawn&amp;network=testnet\n</code></pre> <p>Returns public addresses of the provided seed phrase of the user and network type.</p>"},{"location":"tools/dojima-faas/faasaccount/#headers","title":"HEADERS","text":"<p>Doesn\u2019t have one? Navigate to \u201cUser-&gt;Create user\u201d endpoint and get one. Note: Never share, disclouse or save \u2018apikey\u2019 publicly.</p> Parameter Description X-API-KEY c226c9df7eb08c82c4f4c22266dd  Required: Api Key of the user for endpoint to generate result"},{"location":"tools/dojima-faas/faasaccount/#params","title":"Params","text":"<p>Note</p> <p>Public address of the respective tokens were generated:</p> <ul> <li>Bitcoin</li> <li>Arweave</li> <li>Ethereum</li> <li>Solana </li> </ul> Parameter Description mnemonic letter ethics correct bus asset pipe tourist vapor envelope kangaroo warm dawn Required: Seed phrase of the user to generate addresses. network testnet Required: \u2018mainnet or testnet or devnet\u2019"},{"location":"tools/dojima-faas/faasaccount/#example-request-and-response","title":"Example Request and Response","text":"REQUESTResponse <p>cURL. <pre><code>curl --location --request GET 'https://faas-test.dojima.network/dojima-faas/v1/account/address?mnemonic=******************************************************&amp;network=testnet' \\\n--header 'X-API-KEY: ********************'\n</code></pre></p> <p>Java Script.</p> <pre><code>var myHeaders = new Headers();\nmyHeaders.append(\"X-API-KEY\", \"********************\");\n\nvar requestOptions = {\n  method: 'GET',\n  headers: myHeaders,\n  redirect: 'follow'\n};\n\nfetch(\"https://faas-test.dojima.network/dojima-faas/v1/account/address?mnemonic=******************************************************&amp;network=testnet\", requestOptions)\n  .then(response =&gt; response.text())\n  .then(result =&gt; console.log(result))\n  .catch(error =&gt; console.log('error', error));\n</code></pre> <pre><code> {\n   \"arweave\": \"7zzxJgYHgDlaURc3xt3wvLITPp6I8oIpYj_yg_xirb4\",\n   \"bitcoin\": \"tb1q8w9emc5tdxwc7d3phupc8ltp0djmsnc2ngxnpp\",\n   \"ethereum\": \"0x0577e1E35C4f30cA8379269B7Fd85cBCE7F084f4\",\n   \"solana\": \"DxehLnrWp8iP5ahoG413BD4azVrkgA8Pob4rXco3mpCS\"\n }\n</code></pre>"},{"location":"tools/dojima-faas/faasaccount/#get-token-balance","title":"GET Token Balance","text":"<p><pre><code>https://faas-test.dojima.network/dojima-faas/v1/account/balance?address=tb1q8w9emc5tdxwc7d3phupc8ltp0djmsnc2ngxnpp&amp;asset=bitcoin&amp;network=testnet\n</code></pre> Returns balance of the token based on inputs.</p>"},{"location":"tools/dojima-faas/faasaccount/#headers_1","title":"HEADERS","text":"<p>Doesn\u2019t have one? Navigate to \u201cUser-&gt;Create user\u201d endpoint and get one. Note: Never share, disclouse or save \u2018apikey\u2019 publicly.</p> Parameter Description X-API-KEY c226c9df7eb08c82c4f4c22266dd  Required: Api Key of the user for endpoint to generate result"},{"location":"tools/dojima-faas/faasaccount/#params_1","title":"Params","text":"<p>Note</p> <p>Public address of the respective tokens were generated:</p> <ul> <li>Bitcoin</li> <li>Arweave</li> <li>Ethereum</li> <li>Solana </li> </ul> Parameter Description mnemonic letter ethics correct bus asset pipe tourist vapor envelope kangaroo warm dawn Required: Seed phrase of the user to generate addresses. network testnet Required: \u2018mainnet or testnet or devnet\u2019"},{"location":"tools/dojima-faas/faasaccount/#example-request-and-response_1","title":"Example Request and Response","text":"REQUESTResponse <p>cURL. <pre><code>curl --location --request GET 'https://faas-test.dojima.network/dojima-faas/v1/account/address?mnemonic=******************************************************&amp;network=testnet' \\\n--header 'X-API-KEY: ********************'\n</code></pre></p> <p>Java Script.</p> <pre><code>var myHeaders = new Headers();\nmyHeaders.append(\"X-API-KEY\", \"********************\");\n\nvar requestOptions = {\n  method: 'GET',\n  headers: myHeaders,\n  redirect: 'follow'\n};\n\nfetch(\"https://faas-test.dojima.network/dojima-faas/v1/account/address?mnemonic=******************************************************&amp;network=testnet\", requestOptions)\n  .then(response =&gt; response.text())\n  .then(result =&gt; console.log(result))\n  .catch(error =&gt; console.log('error', error));\n</code></pre> <pre><code> {\n   \"key\": \"6\",\n   \"name\": \"robot\",\n   \"email\":  \"robot@gmail.com\",\n   \"apiKey\": \"**********************\",\n   \"plan\":\"monthly\",\n   \"limit\":\"100000\",\n   \"createdAt\": \"2022-08-04T05:02:19.000Z\",\n   \"validUntil\": \"2022-09-03T05:02:19.623Z\",\n   \"updatedAt\": \"2022-08-04T05:02:19.000Z\"\n }\n</code></pre>"},{"location":"tools/dojima-faas/faaspricestats/","title":"Price Stats in Dojima FaaS","text":"<p>These endpoints return details such as token latest prices, stats, history based particular date or past n days or in between certain dates.</p>"},{"location":"tools/dojima-faas/faaspricestats/#get-token-latest-price","title":"GET Token latest price","text":"<pre><code>https://faas-test.dojima.network/dojima-faas/v1/prices/latest/token?tokenName=solana\n</code></pre> <p>Returns token current price, market_cap, volume, supply, data related to ath (all time high), atl (all time low).</p>"},{"location":"tools/dojima-faas/faaspricestats/#headers","title":"HEADERS","text":"<p>Doesn\u2019t have one? Navigate to \u201cUser-&gt;Create user\u201d endpoint and get one. Note: Never share, disclouse or save \u2018apikey\u2019 publicly.</p> Parameter Description X-API-KEY Required: Api Key of the user for endpoint to generate result"},{"location":"tools/dojima-faas/faaspricestats/#params","title":"Params","text":"<p>Note</p> <p>Public address of the respective tokens were generated:</p> <ul> <li>Bitcoin</li> <li>Arweave</li> <li>Ethereum</li> <li>Solana </li> </ul> Parameter Description mnemonic Required: Seed phrase of the user to generate addresses. network Required: \u2018mainnet or testnet or devnet\u2019"},{"location":"tools/dojima-faas/faaspricestats/#example-request-and-response","title":"Example Request and Response","text":"REQUESTResponse <p>cURL <pre><code>curl --location --request GET 'https://faas-test.dojima.network/dojima-faas/v1/prices/latest/token?tokenName=solana' \\\n--header 'X-API-KEY: ****************'\n</code></pre></p> <p>Java Script</p> <pre><code>var myHeaders = new Headers();\nmyHeaders.append(\"X-API-KEY\", \"****************\");\n\nvar requestOptions = {\n  method: 'GET',\n  headers: myHeaders,\n  redirect: 'follow'\n};\n\nfetch(\"https://faas-test.dojima.network/dojima-faas/v1/prices/latest/token?tokenName=solana\", requestOptions)\n  .then(response =&gt; response.text())\n  .then(result =&gt; console.log(result))\n  .catch(error =&gt; console.log('error', error));\n</code></pre> <pre><code> {\n   \"current_price\": 39.19,\n   \"market_cap\": 13566176494,\n   \"total_volume\": 1491902699,\n   \"circulating_supply\": 346652190.616162,\n   \"total_supply\": 508180963.57,\n   \"max_supply\": null,\n   \"ath\": 259.96,\n   \"ath_change_percentage\": -84.96585,\n   \"ath_date\": \"Sat, 06 Nov 2021 21:54:35 GMT\",\n   \"atl\": 0.500801,\n   \"atl_change_percentage\": 7704.02799,\n   \"atl_date\": \"Mon, 11 May 2020 19:35:23 GMT\"\n }\n</code></pre>"},{"location":"tools/dojima-faas/faaspricestats/#get-token-latest-stats","title":"GET Token latest stats","text":"<p><pre><code>https://faas-test.dojima.network/dojima-faas/v1/prices/latest/stats?token=BTC\n</code></pre> Returns token stats related to addresses, blocks, transactions, supply, etc.</p>"},{"location":"tools/dojima-faas/faaspricestats/#headers_1","title":"HEADERS","text":"<p>Doesn\u2019t have one? Navigate to \u201cUser-&gt;Create user\u201d endpoint and get one. Note: Never share, disclouse or save \u2018apikey\u2019 publicly.</p> Parameter Description X-API-KEY Required: Api Key of the user for endpoint to generate result"},{"location":"tools/dojima-faas/faaspricestats/#params_1","title":"Params","text":"<p>Note</p> <p>Token list:</p> <ul> <li>btc</li> <li>ar</li> <li>eth</li> <li>sol</li> </ul> Parameter Description token Required: Token id to retrieve stats related to addresses, blocks, transactions, supply, etc."},{"location":"tools/dojima-faas/faaspricestats/#example-request-and-response_1","title":"Example Request and Response","text":"REQUESTResponse <p>cURL Commands <pre><code>curl --location --request GET 'https://faas-test.dojima.network/dojima-faas/v1/prices/latest/stats?token=BTC' \\\n--header 'X-API-KEY: **********************'\n</code></pre></p> <p>Java Script</p> <pre><code>var myHeaders = new Headers();\nmyHeaders.append(\"X-API-KEY\", \"**********************\");\n\nvar requestOptions = {\n  method: 'GET',\n  headers: myHeaders,\n  redirect: 'follow'\n};\n\nfetch(\"https://faas-test.dojima.network/dojima-faas/v1/prices/latest/stats?token=BTC\", requestOptions)\n  .then(response =&gt; response.text())\n  .then(result =&gt; console.log(result))\n  .catch(error =&gt; console.log('error', error));\n</code></pre> <pre><code>     {\n \"id\": 1182,\n \"time\": 1659484800,\n \"symbol\": \"BTC\",\n \"partner_symbol\": \"BTC\",\n \"zero_balance_addresses_all_time\": 985144574,\n \"unique_addresses_all_time\": 1027159686,\n \"new_addresses\": 417758,\n \"active_addresses\": 979238,\n \"average_transaction_value\": 15.41044161368356,\n \"block_height\": 747864,\n \"hashrate\": 199187870.17167962,\n \"difficulty\": 27692567959233.59,\n \"block_time\": 597.1180555555553,\n \"block_size\": 1292170,\n \"current_supply\": 19111662,\n \"transaction_count\": 282037,\n \"transaction_count_all_time\": 753969557,\n \"large_transaction_count\": 18486\n }\n</code></pre>"},{"location":"tools/dojima-faas/faaspricestats/#get-history-by-date","title":"GET History by date","text":"<p><pre><code>https://faas-test.dojima.network/dojima-faas/v1/prices/history/date?tokenName=bitcoin&amp;date=05-07-2021\n</code></pre> Returns token price, market_cap and total_volume on a particular date.</p>"},{"location":"tools/dojima-faas/faaspricestats/#headers_2","title":"HEADERS","text":"<p>Doesn\u2019t have one? Navigate to \u201cUser-&gt;Create user\u201d endpoint and get one. Note: Never share, disclouse or save \u2018apikey\u2019 publicly.</p> Parameter Description X-API-KEY Required: Api Key of the user for endpoint to generate result"},{"location":"tools/dojima-faas/faaspricestats/#params_2","title":"Params","text":"<p>Note</p> <p>Token list:</p> <ul> <li>bitcoin</li> <li>arweave</li> <li>ethereum</li> <li>solana</li> <li>usd-coin</li> </ul> Parameter Description tokenName Required: token price, market_cap and total_volume on a particular date. days Required. DD-MM-YYYY format date"},{"location":"tools/dojima-faas/faaspricestats/#example-request-and-response_2","title":"Example Request and Response","text":"REQUESTResponse <p>cURL Commands</p> <pre><code>  curl --location --request GET 'https://faas-test.dojima.network/dojima-faas/v1/prices/history/date?tokenName=bitcoin&amp;date=22-05-2022' \\\n--header 'X-API-KEY: *******************'\n</code></pre> <p>Java Script</p> <pre><code>  var myHeaders = new Headers();\n  myHeaders.append(\"X-API-KEY\", \"*******************\");\n\n  var requestOptions = {\n    method: 'GET',\n    headers: myHeaders,\n    redirect: 'follow'\n  };\n\n  fetch(\"https://faas-test.dojima.network/dojima-faas/v1/prices/history/date?tokenName=bitcoin&amp;date=22-05-2022\", requestOptions)\n    .then(response =&gt; response.text())\n    .then(result =&gt; console.log(result))\n    .catch(error =&gt; console.log('error', error));\n</code></pre> <pre><code>   [\n     {\n       \"current_price\": 29491.507947760598,\n       \"market_cap\": 561696351558.8424,\n       \"total_volume\": 13561006428.368963\n     }\n   ]\n</code></pre>"},{"location":"tools/dojima-faas/faaspricestats/#get-get-history-by-days","title":"GET GET History by days","text":"<p><pre><code>https://faas-test.dojima.network/dojima-faas/v1/prices/history/days?tokenName=bitcoin&amp;days=20\n</code></pre> Returns token prices, market_cap and total_volume for mentioned no. of days. Minutely data for 1 day, hourly data for 1.</p>"},{"location":"tools/dojima-faas/faaspricestats/#headers_3","title":"HEADERS","text":"<p>Doesn\u2019t have one? Navigate to \u201cUser-&gt;Create user\u201d endpoint and get one. Note: Never share, disclouse or save \u2018apikey\u2019 publicly.</p> Parameter Description X-API-KEY Required: Api Key of the user for endpoint to generate result"},{"location":"tools/dojima-faas/faaspricestats/#params_3","title":"Params","text":"<p>Note</p> <p>Token list:</p> <ul> <li>bitcoin</li> <li>arweave</li> <li>ethereum</li> <li>solana</li> <li>usd-coin</li> </ul> Parameter Description tokenName Required: token price, market_cap and total_volume on a particular date. date Required. Token prices, market_cap and total_volume for mentioned no. of days. Minutely data for 1 day, hourly data for 1&lt;days&lt;=10 and daily data for 10 &lt; days"},{"location":"tools/dojima-faas/faaspricestats/#example-request-and-response_3","title":"Example Request and Response","text":"REQUESTResponse <p>cURL Commands</p> <pre><code>  curl --location --request GET 'https://faas-test.dojima.network/dojima-faas/v1/prices/history/days?tokenName=bitcoin&amp;days=20' \\\n  --header 'X-API-KEY: *******************'\n</code></pre> <p>Java Script</p> <pre><code>var myHeaders = new Headers();\nmyHeaders.append(\"X-API-KEY\", \"*******************\");\n\nvar requestOptions = {\n  method: 'GET',\n  headers: myHeaders,\n  redirect: 'follow'\n};\n\nfetch(\"https://faas-test.dojima.network/dojima-faas/v1/prices/history/days?tokenName=bitcoin&amp;days=20\", requestOptions)\n  .then(response =&gt; response.text())\n  .then(result =&gt; console.log(result))\n  .catch(error =&gt; console.log('error', error));\n</code></pre> <pre><code> [\n   {\n     \"prices\": [\n       {\n         \"date\": \"Sat, 16 Jul 2022 00:00:00 GMT\",\n         \"price\": 20794.811981436706\n       },\n       {\n         \"date\": \"Sun, 17 Jul 2022 00:00:00 GMT\",\n         \"price\": 21193.08334336837\n       },\n       {\n         \"date\": \"Mon, 18 Jul 2022 00:00:00 GMT\",\n         \"price\": 20824.36275165164\n       },\n       {\n         \"date\": \"Tue, 19 Jul 2022 00:00:00 GMT\",\n         \"price\": 22395.365383103952\n       },\n       {\n         \"date\": \"Wed, 20 Jul 2022 00:00:00 GMT\",\n         \"price\": 23366.90769792785\n       },\n       {\n         \"date\": \"Thu, 21 Jul 2022 00:00:00 GMT\",\n         \"price\": 23313.296731959555\n       },\n       {\n         \"date\": \"Fri, 22 Jul 2022 00:00:00 GMT\",\n         \"price\": 23155.207555248304\n       },\n       {\n         \"date\": \"Sat, 23 Jul 2022 00:00:00 GMT\",\n         \"price\": 22696.902754290055\n       },\n       {\n         \"date\": \"Sun, 24 Jul 2022 00:00:00 GMT\",\n         \"price\": 22506.199573628986\n       },\n       {\n         \"date\": \"Mon, 25 Jul 2022 00:00:00 GMT\",\n         \"price\": 22613.719208248454\n       },\n       {\n         \"date\": \"Tue, 26 Jul 2022 00:00:00 GMT\",\n         \"price\": 21330.295450788173\n       },\n       {\n         \"date\": \"Wed, 27 Jul 2022 00:00:00 GMT\",\n         \"price\": 21235.612316085775\n       },\n       {\n         \"date\": \"Thu, 28 Jul 2022 00:00:00 GMT\",\n         \"price\": 22908.884260468687\n       },\n       {\n         \"date\": \"Fri, 29 Jul 2022 00:00:00 GMT\",\n         \"price\": 23822.067597823116\n       },\n       {\n         \"date\": \"Sat, 30 Jul 2022 00:00:00 GMT\",\n         \"price\": 23847.58331873861\n       },\n       {\n         \"date\": \"Sun, 31 Jul 2022 00:00:00 GMT\",\n         \"price\": 23653.459549430798\n       },\n       {\n         \"date\": \"Mon, 01 Aug 2022 00:00:00 GMT\",\n         \"price\": 23379.70052509082\n       },\n       {\n         \"date\": \"Tue, 02 Aug 2022 00:00:00 GMT\",\n         \"price\": 23333.749243312184\n       },\n       {\n         \"date\": \"Wed, 03 Aug 2022 00:00:00 GMT\",\n         \"price\": 23053.846847482677\n       },\n       {\n         \"date\": \"Thu, 04 Aug 2022 00:00:00 GMT\",\n         \"price\": 22860.42098438317\n       },\n       {\n         \"date\": \"Thu, 04 Aug 2022 10:25:46 GMT\",\n         \"price\": 22950.523475823156\n       }\n     ],\n     \"market_cap\": [\n       {\n         \"date\": \"Sat, 16 Jul 2022 00:00:00 GMT\",\n         \"price\": 397285233065.65533\n       },\n       {\n         \"date\": \"Sun, 17 Jul 2022 00:00:00 GMT\",\n         \"price\": 404705642580.89075\n       },\n       {\n         \"date\": \"Mon, 18 Jul 2022 00:00:00 GMT\",\n         \"price\": 397660610560.5498\n       },\n       {\n         \"date\": \"Tue, 19 Jul 2022 00:00:00 GMT\",\n         \"price\": 425756736660.6174\n       },\n       {\n         \"date\": \"Wed, 20 Jul 2022 00:00:00 GMT\",\n         \"price\": 445889013251.1064\n       },\n       {\n         \"date\": \"Thu, 21 Jul 2022 00:00:00 GMT\",\n         \"price\": 446130012149.91077\n       },\n       {\n         \"date\": \"Fri, 22 Jul 2022 00:00:00 GMT\",\n         \"price\": 442379611364.02734\n       },\n       {\n         \"date\": \"Sat, 23 Jul 2022 00:00:00 GMT\",\n         \"price\": 433485926857.3929\n       },\n       {\n         \"date\": \"Sun, 24 Jul 2022 00:00:00 GMT\",\n         \"price\": 429803379587.55133\n       },\n       {\n         \"date\": \"Mon, 25 Jul 2022 00:00:00 GMT\",\n         \"price\": 433819662321.5266\n       },\n       {\n         \"date\": \"Tue, 26 Jul 2022 00:00:00 GMT\",\n         \"price\": 407480099599.8142\n       },\n       {\n         \"date\": \"Wed, 27 Jul 2022 00:00:00 GMT\",\n         \"price\": 405692421501.52716\n       },\n       {\n         \"date\": \"Thu, 28 Jul 2022 00:00:00 GMT\",\n         \"price\": 437193517021.8447\n       },\n       {\n         \"date\": \"Fri, 29 Jul 2022 00:00:00 GMT\",\n         \"price\": 454806622614.75885\n       },\n       {\n         \"date\": \"Sat, 30 Jul 2022 00:00:00 GMT\",\n         \"price\": 459609388579.5554\n       },\n       {\n         \"date\": \"Sun, 31 Jul 2022 00:00:00 GMT\",\n         \"price\": 451726702392.36206\n       },\n       {\n         \"date\": \"Mon, 01 Aug 2022 00:00:00 GMT\",\n         \"price\": 447051019373.1847\n       },\n       {\n         \"date\": \"Tue, 02 Aug 2022 00:00:00 GMT\",\n         \"price\": 445958949620.3002\n       },\n       {\n         \"date\": \"Wed, 03 Aug 2022 00:00:00 GMT\",\n         \"price\": 440954684720.7478\n       },\n       {\n         \"date\": \"Thu, 04 Aug 2022 00:00:00 GMT\",\n         \"price\": 437035641450.2815\n       },\n       {\n         \"date\": \"Thu, 04 Aug 2022 10:25:46 GMT\",\n         \"price\": 438396573850.57587\n       }\n     ],\n     \"total_volume\": [\n       {\n         \"date\": \"Sat, 16 Jul 2022 00:00:00 GMT\",\n         \"price\": 46542248374.33238\n       },\n       {\n         \"date\": \"Sun, 17 Jul 2022 00:00:00 GMT\",\n         \"price\": 42051101694.797554\n       },\n       {\n         \"date\": \"Mon, 18 Jul 2022 00:00:00 GMT\",\n         \"price\": 29615794461.49923\n       },\n       {\n         \"date\": \"Tue, 19 Jul 2022 00:00:00 GMT\",\n         \"price\": 58636734705.48306\n       },\n       {\n         \"date\": \"Wed, 20 Jul 2022 00:00:00 GMT\",\n         \"price\": 57338223361.51413\n       },\n       {\n         \"date\": \"Thu, 21 Jul 2022 00:00:00 GMT\",\n         \"price\": 40775718993.79776\n       },\n       {\n         \"date\": \"Fri, 22 Jul 2022 00:00:00 GMT\",\n         \"price\": 63224249257.511284\n       },\n       {\n         \"date\": \"Sat, 23 Jul 2022 00:00:00 GMT\",\n         \"price\": 40304373301.41499\n       },\n       {\n         \"date\": \"Sun, 24 Jul 2022 00:00:00 GMT\",\n         \"price\": 42519262113.1533\n       },\n       {\n         \"date\": \"Mon, 25 Jul 2022 00:00:00 GMT\",\n         \"price\": 33108916659.05373\n       },\n       {\n         \"date\": \"Tue, 26 Jul 2022 00:00:00 GMT\",\n         \"price\": 42667548128.932236\n       },\n       {\n         \"date\": \"Wed, 27 Jul 2022 00:00:00 GMT\",\n         \"price\": 53995620035.18145\n       },\n       {\n         \"date\": \"Thu, 28 Jul 2022 00:00:00 GMT\",\n         \"price\": 54498281944.45157\n       },\n       {\n         \"date\": \"Fri, 29 Jul 2022 00:00:00 GMT\",\n         \"price\": 55609627980.6571\n       },\n       {\n         \"date\": \"Sat, 30 Jul 2022 00:00:00 GMT\",\n         \"price\": 41089335195.63975\n       },\n       {\n         \"date\": \"Sun, 31 Jul 2022 00:00:00 GMT\",\n         \"price\": 62102072346.807785\n       },\n       {\n         \"date\": \"Mon, 01 Aug 2022 00:00:00 GMT\",\n         \"price\": 31786729326.443203\n       },\n       {\n         \"date\": \"Tue, 02 Aug 2022 00:00:00 GMT\",\n         \"price\": 44489771146.510735\n       },\n       {\n         \"date\": \"Wed, 03 Aug 2022 00:00:00 GMT\",\n         \"price\": 35151096516.75639\n       },\n       {\n         \"date\": \"Thu, 04 Aug 2022 00:00:00 GMT\",\n         \"price\": 41334593234.075066\n       },\n       {\n         \"date\": \"Thu, 04 Aug 2022 10:25:46 GMT\",\n         \"price\": 23908600834.73234\n       }\n     ]\n   }\n ]\n</code></pre>"},{"location":"tools/dojima-faas/faaspricestats/#get-history-by-date-range","title":"GET History by date range","text":"<p><pre><code>https://faas-test.dojima.network/dojima-faas/v1/prices/history/date?tokenName=bitcoin&amp;date=05-07-2021\n</code></pre> Returns token price, market_cap and total_volume for date range. 5 minute interval data data if date difference 1 day, hourly data if date difference is between 1 and 90 and daily data if date difference is more than 90.</p>"},{"location":"tools/dojima-faas/faaspricestats/#headers_4","title":"HEADERS","text":"<p>Doesn\u2019t have one? Navigate to \u201cUser-&gt;Create user\u201d endpoint and get one. Note: Never share, disclouse or save \u2018apikey\u2019 publicly.</p> Parameter Description X-API-KEY Required: Api Key of the user for endpoint to generate result"},{"location":"tools/dojima-faas/faaspricestats/#params_4","title":"Params","text":"<p>Note</p> <p>Token list:</p> <ul> <li>bitcoin</li> <li>arweave</li> <li>ethereum</li> <li>solana</li> <li>usd-coin</li> </ul> Parameter Description tokenName Required: token price, market_cap and total_volume on a particular date. fromDate Required: YYYY-MM-DD format date thruDate Required. YYYY-MM-DD format date"},{"location":"tools/dojima-faas/faaspricestats/#example-request-and-response_4","title":"Example Request and Response","text":"REQUESTResponse <p>cURL Commands</p> <pre><code>  curl --location --request GET 'https://faas-test.dojima.network/dojima-faas/v1/prices/history/date/range?tokenName=bitcoin&amp;fromDate=2022-05-01&amp;thruDate=2022-05-11' \\\n  --header 'X-API-KEY: *****************'\n</code></pre> <p>Java Script</p> <pre><code>  var myHeaders = new Headers();\n  myHeaders.append(\"X-API-KEY\", \"*****************\");\n\n  var requestOptions = {\n    method: 'GET',\n    headers: myHeaders,\n    redirect: 'follow'\n  };\n\n  fetch(\"https://faas-test.dojima.network/dojima-faas/v1/prices/history/date/range?tokenName=bitcoin&amp;fromDate=2022-05-01&amp;thruDate=2022-05-31\", requestOptions)\n    .then(response =&gt; response.text())\n    .then(result =&gt; console.log(result))\n    .catch(error =&gt; console.log('error', error));\n</code></pre> <pre><code> {\n   \"prices\": [\n     {\n       \"date\": \"Sat, 16 Jul 2022 00:00:00 GMT\",\n       \"price\": 1234.0991389763224\n     },\n     {\n       \"date\": \"Sun, 17 Jul 2022 00:00:00 GMT\",\n       \"price\": 1355.04564021949\n     },\n     {\n       \"date\": \"Mon, 18 Jul 2022 00:00:00 GMT\",\n       \"price\": 1344.7202840019017\n     },\n     {\n       \"date\": \"Tue, 19 Jul 2022 00:00:00 GMT\",\n       \"price\": 1570.6589588642053\n     },\n     {\n       \"date\": \"Wed, 20 Jul 2022 00:00:00 GMT\",\n       \"price\": 1542.6298214332235\n     },\n     {\n       \"date\": \"Thu, 21 Jul 2022 00:00:00 GMT\",\n       \"price\": 1527.4139307593093\n     },\n     {\n       \"date\": \"Fri, 22 Jul 2022 00:00:00 GMT\",\n       \"price\": 1576.8252394976823\n     },\n     {\n       \"date\": \"Sat, 23 Jul 2022 00:00:00 GMT\",\n       \"price\": 1536.124922238913\n     },\n     {\n       \"date\": \"Sun, 24 Jul 2022 00:00:00 GMT\",\n       \"price\": 1552.4964891908746\n     },\n     {\n       \"date\": \"Mon, 25 Jul 2022 00:00:00 GMT\",\n       \"price\": 1601.2079670127046\n     },\n     {\n       \"date\": \"Tue, 26 Jul 2022 00:00:00 GMT\",\n       \"price\": 1450.4822852139405\n     },\n     {\n       \"date\": \"Tue, 26 Jul 2022 04:59:49 GMT\",\n       \"price\": 1431.2771658285428\n     }\n   ],\n   \"market_cap\": [\n     {\n       \"date\": \"Sat, 16 Jul 2022 00:00:00 GMT\",\n       \"price\": 147677565536.3019\n     },\n     {\n       \"date\": \"Sun, 17 Jul 2022 00:00:00 GMT\",\n       \"price\": 161839496479.48514\n     },\n     {\n       \"date\": \"Mon, 18 Jul 2022 00:00:00 GMT\",\n       \"price\": 161551223982.244\n     },\n     {\n       \"date\": \"Tue, 19 Jul 2022 00:00:00 GMT\",\n       \"price\": 187518878564.43118\n     },\n     {\n       \"date\": \"Wed, 20 Jul 2022 00:00:00 GMT\",\n       \"price\": 184299116474.0005\n     },\n     {\n       \"date\": \"Thu, 21 Jul 2022 00:00:00 GMT\",\n       \"price\": 183383314168.63928\n     },\n     {\n       \"date\": \"Fri, 22 Jul 2022 00:00:00 GMT\",\n       \"price\": 188807814065.77225\n     },\n     {\n       \"date\": \"Sat, 23 Jul 2022 00:00:00 GMT\",\n       \"price\": 183933879174.97644\n     },\n     {\n       \"date\": \"Sun, 24 Jul 2022 00:00:00 GMT\",\n       \"price\": 185766674503.14\n     },\n     {\n       \"date\": \"Mon, 25 Jul 2022 00:00:00 GMT\",\n       \"price\": 192833875418.8718\n     },\n     {\n       \"date\": \"Tue, 26 Jul 2022 00:00:00 GMT\",\n       \"price\": 176371406952.78534\n     },\n     {\n       \"date\": \"Tue, 26 Jul 2022 04:59:49 GMT\",\n       \"price\": 171509003635.7274\n     }\n   ],\n   \"total_volume\": [\n     {\n       \"date\": \"Sat, 16 Jul 2022 00:00:00 GMT\",\n       \"price\": 16817194904.2499\n     },\n     {\n       \"date\": \"Sun, 17 Jul 2022 00:00:00 GMT\",\n       \"price\": 19025831554.91271\n     },\n     {\n       \"date\": \"Mon, 18 Jul 2022 00:00:00 GMT\",\n       \"price\": 15797648344.457474\n     },\n     {\n       \"date\": \"Tue, 19 Jul 2022 00:00:00 GMT\",\n       \"price\": 26437290054.27533\n     },\n     {\n       \"date\": \"Wed, 20 Jul 2022 00:00:00 GMT\",\n       \"price\": 27749085857.707005\n     },\n     {\n       \"date\": \"Thu, 21 Jul 2022 00:00:00 GMT\",\n       \"price\": 21728126383.56131\n     },\n     {\n       \"date\": \"Fri, 22 Jul 2022 00:00:00 GMT\",\n       \"price\": 19411405082.967407\n     },\n     {\n       \"date\": \"Sat, 23 Jul 2022 00:00:00 GMT\",\n       \"price\": 18084368731.242767\n     },\n     {\n       \"date\": \"Sun, 24 Jul 2022 00:00:00 GMT\",\n       \"price\": 14901008279.154797\n     },\n     {\n       \"date\": \"Mon, 25 Jul 2022 00:00:00 GMT\",\n       \"price\": 16058331978.02615\n     },\n     {\n       \"date\": \"Tue, 26 Jul 2022 00:00:00 GMT\",\n       \"price\": 19852493229.276333\n     },\n     {\n       \"date\": \"Tue, 26 Jul 2022 04:59:49 GMT\",\n       \"price\": 19607955073.403877\n     }\n   ]\n }\n</code></pre>"},{"location":"tools/dojima-faas/faasuser/","title":"User Guide for Dojima FaaS","text":"<p>These endpoints are used to create, delete, find or update user.</p>"},{"location":"tools/dojima-faas/faasuser/#post-create-user","title":"POST Create user","text":"<pre><code> https://faas-test.dojima.network/dojima-faas/v1/user/create?name=robot1&amp;email=robot1@gmail.com&amp;plan=monthly\n</code></pre> <p>Returns user details along with apikey based on inputs provided.</p>"},{"location":"tools/dojima-faas/faasuser/#params","title":"PARAMS","text":"name robot1 Required. Name of the user email <code>robot1@gmail.com</code>  Required. Provide valid email of the user to receive updates or notifications plan monthly  Required. \u2018monthly or yearly\u2019. Provide a plan type to get access until the selected period.  &gt; monthly - 10,000 calls/month yearly - 1,80,000 calls/year"},{"location":"tools/dojima-faas/faasuser/#example-request-and-response","title":"Example Request and Response","text":"REQUESTResponse <p>cURL Commands</p> <pre><code> curl --location --request GET 'https://faas-test.dojima.network/dojima-faas/v1/user/data?api=*******************'\n</code></pre> <p>Java Script</p> <pre><code>   var requestOptions = {\n  method: 'POST',\n  redirect: 'follow'\n};\n\nfetch(\"https://faas-test.dojima.network/dojima-faas/v1/user/create?name=robot&amp;email=robot@gmail.com&amp;plan=monthly\", requestOptions)\n  .then(response =&gt; response.text())\n  .then(result =&gt; console.log(result))\n  .catch(error =&gt; console.log('error', error));\n</code></pre> <pre><code>   {\n     \"key\": 6,\n     \"name\": \"robot\",\n     \"email\": \"robot@gmail.com\",\n     \"apiKey\": \"**********************\",\n     \"plan\": \"monthly\",\n     \"limit\": 100000,\n     \"createdAt\": \"2022-08-04T05:02:19.000Z\",\n     \"validUntil\": \"2022-09-03T05:02:19.623Z\",\n     \"updatedAt\": \"2022-08-04T05:02:19.000Z\"\n   }\n</code></pre>"},{"location":"tools/dojima-faas/faasuser/#get-find-user","title":"GET Find user","text":"<p><pre><code>https://faas-test.dojima.network/dojima-faas/v1/user/data?api=c226c9df7eb08c82c4f4c22266dd\n</code></pre> Query Parameters</p> Parameters Description api c226c9df7eb08c82c4f4c22266dd"},{"location":"tools/dojima-faas/faasuser/#example-request-and-response_1","title":"Example Request and Response","text":"REQUESTResponse <p>cURL Commands</p> <pre><code>curl --location --request GET 'https://faas-test.dojima.network/dojima-faas/v1/user/data?api=*******************'\n</code></pre> <p>Java Script</p> <pre><code>var myHeaders = new Headers();\nmyHeaders.append(\"X-API-KEY\", \"****************\");\n\nvar requestOptions = {\n  method: 'GET',\n  redirect: 'follow'\n};\n\nfetch(\"https://faas-test.dojima.network/dojima-faas/v1/user/data?api=*******************\", requestOptions)\n  .then(response =&gt; response.text())\n  .then(result =&gt; console.log(result))\n  .catch(error =&gt; console.log('error', error));\n</code></pre> <p>``` json {   \u201ckey\u201d: 6,   \u201cname\u201d: \u201crobot\u201d,   \u201cemail\u201d: \u201crobot@gmail.com\u201d,   \u201capiKey\u201d: \u201c******\u201d,   \u201cplan\u201d: \u201cmonthly\u201d,   \u201climit\u201d: 100000,   \u201ccreatedAt\u201d: \u201c2022-08-04T05:02:19.000Z\u201d,   \u201cvalidUntil\u201d: \u201c2022-09-03T05:02:19.623Z\u201d,   \u201cupdatedAt\u201d: \u201c2022-08-04T05:02:19.000Z\u201d }</p> <p>```</p>"},{"location":"tools/dojima-faas/transactiondetails/","title":"Transaction Details in Dojima FaaS","text":"<p>Returns transaction details such as detailed transaction data, transactions history based on mentioned token, network and related data.</p>"},{"location":"tools/dojima-faas/transactiondetails/#history","title":"History","text":"<p>Returns list of transactions done by an address based on respective token input and network.</p>"},{"location":"tools/dojima-faas/transactiondetails/#get-arweave","title":"GET Arweave","text":"<pre><code>https://faas-test.dojima.network/dojima-faas/v1/txs/history/arweave?address=iy3E3sNIM42BPCMIUYns7YZVeNr9Fphg3EjtAxidXys&amp;network=mainnet\n</code></pre> <p>Returns list of transactions done by an address for arweave.</p>"},{"location":"tools/dojima-faas/transactiondetails/#headers","title":"HEADERS","text":"<p>Doesn\u2019t have one? Navigate to \u201cUser-&gt;Create user\u201d endpoint and get one. Note: Never share, disclouse or save \u2018apikey\u2019 publicly.</p> <p>Note</p> <p>Note: Never share, disclouse or save \u2018apikey\u2019 publicly.</p> Parameter Description X-API-KEY Required: Api Key of the user for endpoint to generate result"},{"location":"tools/dojima-faas/transactiondetails/#params","title":"Params","text":"<p>Note</p> <p>Public address of the respective tokens were generated:</p> <ul> <li>Bitcoin</li> <li>Arweave</li> <li>Ethereum</li> <li>Solana </li> </ul> Parameter Description address Required: Public address of the user to which transactions history to be displayed. network Required: Default \u2018mainnet\u2019. Arweave doesn\u2019t have \u2018testnet\u2019 explorer to display transactions. limit Optional. Default 100. Number of transactions to be displayed per call."},{"location":"tools/dojima-faas/transactiondetails/#example-request-and-response","title":"Example Request and Response","text":"REQUESTResponse <p>cURL Commands</p> <pre><code>https://faas-test.dojima.network/dojima-faas/v1/txs/history/arweave?address=iy3E3sNIM42BPCMIUYns7YZVeNr9Fphg3EjtAxidXys&amp;network=mainnet\n</code></pre> <p>Java Script</p> <pre><code>  var myHeaders = new Headers();\n  myHeaders.append(\"X-API-KEY\", \"******************\");\n\n  var requestOptions = {\n    method: 'GET',\n    headers: myHeaders,\n    redirect: 'follow'\n  };\n\n  fetch(\"https://faas-test.dojima.network/dojima-faas/v1/txs/history/arweave?address=iy3E3sNIM42BPCMIUYns7YZVeNr9Fphg3EjtAxidXys&amp;network=mainnet\", requestOptions)\n    .then(response =&gt; response.text())\n    .then(result =&gt; console.log(result))\n    .catch(error =&gt; console.log('error', error));\n</code></pre> <pre><code> {\n   \"outer\": [\n     {\n       \"timestamp\": 1648533262,\n       \"transaction_hash\": \"sAn6BS_kQXYO2tq9NdNcQInzQBy8ai05T1lIoLVOFSE\",\n       \"block\": 902207,\n       \"from\": \"iy3E3sNIM42BPCMIUYns7YZVeNr9Fphg3EjtAxidXys\",\n       \"to\": \"4JOmaT9fFe2ojFJEls3Zow5UKO2CBOk7lOirbPTtX1o\",\n       \"value\": \"0.212303132894\",\n       \"gas_price\": \"0.000000724176\",\n       \"date\": \"29/03/2022\",\n       \"time\": \"11:24:22\"\n     },\n     {\n       \"timestamp\": 1648520642,\n       \"transaction_hash\": \"UygVPWgsvFYJnie_VmFXq4sXkq_48AxMQ2AuGTWWwVM\",\n       \"block\": 902106,\n       \"from\": \"iy3E3sNIM42BPCMIUYns7YZVeNr9Fphg3EjtAxidXys\",\n       \"to\": \"4JOmaT9fFe2ojFJEls3Zow5UKO2CBOk7lOirbPTtX1o\",\n       \"value\": \"263.746368279452\",\n       \"gas_price\": \"0.000000731880\",\n       \"date\": \"29/03/2022\",\n       \"time\": \"07:54:02\"\n     }\n   ],\n   \"inner\": [\n     {\n       \"timestamp\": 1648533262,\n       \"transaction_hash\": \"sAn6BS_kQXYO2tq9NdNcQInzQBy8ai05T1lIoLVOFSE\",\n       \"block\": 902207,\n       \"from\": \"iy3E3sNIM42BPCMIUYns7YZVeNr9Fphg3EjtAxidXys\",\n       \"to\": \"4JOmaT9fFe2ojFJEls3Zow5UKO2CBOk7lOirbPTtX1o\",\n       \"value\": \"0.212303132894\",\n       \"gas_price\": \"0.000000724176\",\n       \"date\": \"29/03/2022\",\n       \"time\": \"11:24:22\",\n       \"signature\": \"FTALC7RxZVXkd1cETUl83Zt8ZV-zOfy2lqPpC8XzKdzcu_pLBGCdq-UNT-YMfgiurPm4Tt673p7VgudNu55Lu76njnFi2oqnK7Ixn9pp3oMZVtNFEFf3u_MILeRC45arkzFUhZkPDRJkvHIDiKvDKHF1fUkJw20Eg0EiCZTjlkm7g-Uw3vHdESEwNVUv8O43Hg60yvk3Ky8c7k-blVxoD1GRcmLiayLoYRbpYLYyiyYgHZXkdeXLDll2DVjnjVT8RaQqG_EBlZRMkMKHX-FLmwFwmA0nM9PSaz9jQqk8ostxB_Qyl8lsTJ4UzviPfi8MS_f66s6vCL1_JOg2aBiyVTjy_d_Xk6LS7K6T8-5wtuJsz7TTSFzmSsrkrpMap1t2RDmzbNdYiTna0S0CAVWtoS8pZOr_MxUpfvEvrFrcS_EJfg37XzWnT5djVZGcpIs9xYGCechoH6t6Vptn4hYgBBmxUbPfl_LiCU0qevJeyd6rNbg-_23tX7owRUR1GzLBov2o4FRI5A2A2xuP6unNdLWoXOSc0DY5rupToQbj4DjYK1cbeCbvJcGi6MadRaxSRushhRyhhF1ugdwOj7VRPw_m41VR1pm5S4MWuPIWnSUNDgULkFRKKs4XUJLmon77AHlDHvymYVuNFEBXmoWdcvqakcsq60D7irlsmmFiyyg\",\n       \"block_hash\": \"LUIt2kLzASel09V0VhYQWd4cyrNtTW_QVqOXakuuIZLALWE87t88LQjCZl9aA9XV\"\n     },\n     {\n       \"timestamp\": 1648520642,\n       \"transaction_hash\": \"UygVPWgsvFYJnie_VmFXq4sXkq_48AxMQ2AuGTWWwVM\",\n       \"block\": 902106,\n       \"from\": \"iy3E3sNIM42BPCMIUYns7YZVeNr9Fphg3EjtAxidXys\",\n       \"to\": \"4JOmaT9fFe2ojFJEls3Zow5UKO2CBOk7lOirbPTtX1o\",\n       \"value\": \"263.746368279452\",\n       \"gas_price\": \"0.000000731880\",\n       \"date\": \"29/03/2022\",\n       \"time\": \"07:54:02\",\n       \"signature\": \"fLsUf_CNzFi2uRje-L4lRd2d4uDAuoZkml9XUn4dyZ4aPsEQZHOMPLuwT3w2nubO0PHvIdPPNPmvjQtcCsc9BIhjXPJWNT3mig03l9s66x1BWaikkbKPYhQ5AF457AhEwqVkXTDARMWSURc3rbjhCAzeHwnwNGmkDd9CS3OGLwfboJa_MArbArzIgz80cuBZ6LCtAWz1xzZ_4TZycKrbhhrXpjeGkYrYxpNJSSK8gaKJTnln2Nb24JkprNtSJtTnmdrg4_iyDbHyj2kYopDtNXOhwx2Q6QqjgmxRC35z5F-QqCwlzJRBQsNkNNEjsszI4klfenQCa9slnCukPuPW1gVzV6RmzYcXApHL_M8ZSF38qCMok67qhbPAnl0psv1Vkz9lXBTixA26UVg4fJRALGxsu5jp3dxbKmZCDWZciSXctjjYj1CAyXcPY-UDkdWleOAAKUFUvfs8G2S9JeNwO-g3J_VOticujYgB6Aypac8LJFAiBpRAZP8tspqsZBDXxw3X0u9s3mk715mIWLDExhg6D38LD75Ve2XeM1iDEJ19DBfeom3kHoX3gP3NPIYMuPqMw1b9nliTQGBNkswP-kNqurGLooiFh_vKQsRKCeHeN1sdiaaVGKZ6DteEEl7ETcWZPh3Grmi0gDVexWj7_prnGCBtESMKCkkAlY5UyNg\",\n       \"block_hash\": \"6hC5-XX2FQYHNgxx_2_fXGLF8rOt5JJXify0CJk2NzzeXrNKB_B_6HJn1RKH0Fpi\"\n     }\n   ]\n }\n</code></pre>"},{"location":"tools/dojima-faas/transactiondetails/#get-bitcoin","title":"GET Bitcoin","text":"<pre><code>https://faas-test.dojima.network/dojima-faas/v1/txs/history/bitcoin?address=tb1q8w9emc5tdxwc7d3phupc8ltp0djmsnc2ngxnpp&amp;network=testnet\n</code></pre> <p>Returns list of transactions done by an address for bitcoin.</p>"},{"location":"tools/dojima-faas/transactiondetails/#headers_1","title":"HEADERS","text":"<p>Doesn\u2019t have one? Navigate to \u201cUser-&gt;Create user\u201d endpoint and get one. Note: Never share, disclouse or save \u2018apikey\u2019 publicly.</p> <p>Note</p> <p>Note: Never share, disclouse or save \u2018apikey\u2019 publicly.</p> Parameter Description X-API-KEY Required: Api Key of the user for endpoint to generate result"},{"location":"tools/dojima-faas/transactiondetails/#params_1","title":"Params","text":"<p>Note</p> <p>Public address of the respective tokens were generated:</p> <ul> <li>Bitcoin</li> <li>Arweave</li> <li>Ethereum</li> <li>Solana </li> </ul> Parameter Description address Required: Public address of the user to which transactions history to be displayed. network Required: Default \u2018mainnet\u2019. Arweave doesn\u2019t have \u2018testnet\u2019 explorer to display transactions."},{"location":"tools/dojima-faas/transactiondetails/#example-request-and-response_1","title":"Example Request and Response","text":"REQUESTResponse <p>cURL Commands</p> <pre><code>    curl --location --request GET 'https://faas-test.dojima.network/dojima-faas/v1/txs/history/bitcoin?address=tb1q8w9emc5tdxwc7d3phupc8ltp0djmsnc2ngxnpp&amp;network=testnet' \\\n    --header 'X-API-KEY: ****************'\n</code></pre> <p>Java Script</p> <pre><code>  var myHeaders = new Headers();\n  myHeaders.append(\"X-API-KEY\", \"****************\");\n\n  var requestOptions = {\n    method: 'GET',\n    headers: myHeaders,\n    redirect: 'follow'\n  };\n\n  fetch(\"https://faas-test.dojima.network/dojima-faas/v1/txs/history/bitcoin?address=tb1q8w9emc5tdxwc7d3phupc8ltp0djmsnc2ngxnpp&amp;network=testnet\", requestOptions)\n    .then(response =&gt; response.text())\n    .then(result =&gt; console.log(result))\n    .catch(error =&gt; console.log('error', error));\n</code></pre> <p>``` json</p> <p>{       \u201ctxs\u201d: [         {           \u201ctransaction_hash\u201d: \u201c8f035c2dbfbf459e34a9d480d1881095225c9d0801901b9387f2cd4b7533f16b\u201d,           \u201cblock\u201d: 2311311         },         {           \u201ctransaction_hash\u201d: \u201cf51dd2de32005d1289feef06d1ae37da08611f4755210ac8f3545a4cd9de27d8\u201d,           \u201cblock\u201d: 2287294         },         {           \u201ctransaction_hash\u201d: \u201c86809c56e572ec254a87fe3eafa8acc44b9d380dce7677f95662a6901034e071\u201d,           \u201cblock\u201d: 2286923         },         {           \u201ctransaction_hash\u201d: \u201cd5b0fe15206e3895222b9453891b625b5fa0847cb138d5e43755aac770de9b39\u201d,           \u201cblock\u201d: 2286923         },         {           \u201ctransaction_hash\u201d: \u201c6f8f8ace22a5f20582b26d64f9fabf964af2001350cab8379ef86d4b58649732\u201d,           \u201cblock\u201d: 2286587         },         {           \u201ctransaction_hash\u201d: \u201c5529b297e8d29bfbb1b5916ae8dca461d852a17f88d5fa78828314830c3007db\u201d,           \u201cblock\u201d: 2285931         },         {           \u201ctransaction_hash\u201d: \u201c2a2731428b3bd122d214e65e68521f88342463f02a11d612c682b4e49387f116\u201d,           \u201cblock\u201d: 2285906         }       ]     }</p> <pre><code> ```\n</code></pre>"},{"location":"tools/dojima-faas/transactiondetails/#get-ethereum","title":"GET Ethereum","text":"<pre><code>https://faas-test.dojima.network/dojima-faas/v1/txs/history/ethereum?address=0x0577e1E35C4f30cA8379269B7Fd85cBCE7F084f4&amp;network=testnet\n</code></pre> <p>Returns list of transactions done by an address for ethereum.</p>"},{"location":"tools/dojima-faas/transactiondetails/#headers_2","title":"HEADERS","text":"<p>Doesn\u2019t have one? Navigate to \u201cUser-&gt;Create user\u201d endpoint and get one. Note: Never share, disclouse or save \u2018apikey\u2019 publicly.</p> <p>Note</p> <p>Note: Never share, disclouse or save \u2018apikey\u2019 publicly.</p> Parameter Description X-API-KEY Required: Api Key of the user for endpoint to generate result"},{"location":"tools/dojima-faas/transactiondetails/#params_2","title":"Params","text":"<p>Note</p> <p>Public address of the respective tokens were generated:</p> <ul> <li>Bitcoin</li> <li>Arweave</li> <li>Ethereum</li> <li>Solana </li> </ul> Parameter Description address Required: Public address of the user to which transactions history to be displayed. network Required: Default \u2018mainnet\u2019. Arweave doesn\u2019t have \u2018testnet\u2019 explorer to display transactions. limit Optional. Default 100. Number of transactions to be displayed per call. sort Optional. Default \u2018desc\u2019. Display of transactions order asc or desc. startBlock Optional. Default 0. Start block number to display transactions from. endBlock Optional. Default 99999999. End block number to display transactions until. page Optional. Default 1. Transactions page number."},{"location":"tools/dojima-faas/transactiondetails/#example-request-and-response_2","title":"Example Request and Response","text":"REQUESTResponse <p>cURL Commands</p> <pre><code>  curl --location --request GET 'https://faas-test.dojima.network/dojima-faas/v1/txs/history/bitcoin?address=tb1q8w9emc5tdxwc7d3phupc8ltp0djmsnc2ngxnpp&amp;network=testnet' \\\n  --header 'X-API-KEY: ****************'\n</code></pre> <p>Java Script</p> <pre><code>var myHeaders = new Headers();\nmyHeaders.append(\"X-API-KEY\", \"****************\");\n\nvar requestOptions = {\n  method: 'GET',\n  headers: myHeaders,\n  redirect: 'follow'\n};\n\nfetch(\"https://faas-test.dojima.network/dojima-faas/v1/txs/history/bitcoin?address=tb1q8w9emc5tdxwc7d3phupc8ltp0djmsnc2ngxnpp&amp;network=testnet\", requestOptions)\n  .then(response =&gt; response.text())\n  .then(result =&gt; console.log(result))\n  .catch(error =&gt; console.log('error', error));\n</code></pre> <pre><code>{\n   \"txs\": [\n     {\n       \"transaction_hash\": \"8f035c2dbfbf459e34a9d480d1881095225c9d0801901b9387f2cd4b7533f16b\",\n       \"block\": 2311311\n     },\n     {\n       \"transaction_hash\": \"f51dd2de32005d1289feef06d1ae37da08611f4755210ac8f3545a4cd9de27d8\",\n       \"block\": 2287294\n     },\n     {\n       \"transaction_hash\": \"86809c56e572ec254a87fe3eafa8acc44b9d380dce7677f95662a6901034e071\",\n       \"block\": 2286923\n     },\n     {\n       \"transaction_hash\": \"d5b0fe15206e3895222b9453891b625b5fa0847cb138d5e43755aac770de9b39\",\n       \"block\": 2286923\n     },\n     {\n       \"transaction_hash\": \"6f8f8ace22a5f20582b26d64f9fabf964af2001350cab8379ef86d4b58649732\",\n       \"block\": 2286587\n     },\n     {\n       \"transaction_hash\": \"5529b297e8d29bfbb1b5916ae8dca461d852a17f88d5fa78828314830c3007db\",\n       \"block\": 2285931\n     },\n     {\n       \"transaction_hash\": \"2a2731428b3bd122d214e65e68521f88342463f02a11d612c682b4e49387f116\",\n       \"block\": 2285906\n     }\n   ]\n }\n</code></pre>"},{"location":"tools/dojima-faas/transactiondetails/#get-solana","title":"GET Solana","text":"<pre><code>https://faas-test.dojima.network/dojima-faas/v1/txs/history/solana?address=DxehLnrWp8iP5ahoG413BD4azVrkgA8Pob4rXco3mpCS&amp;network=devnet\n</code></pre> <p>Returns list of transactions done by an address for solana.</p>"},{"location":"tools/dojima-faas/transactiondetails/#headers_3","title":"HEADERS","text":"<p>Doesn\u2019t have one? Navigate to \u201cUser-&gt;Create user\u201d endpoint and get one. Note: Never share, disclouse or save \u2018apikey\u2019 publicly.</p> <p>Note</p> <p>Note: Never share, disclouse or save \u2018apikey\u2019 publicly.</p> Parameter Description X-API-KEY Required: Api Key of the user for endpoint to generate result"},{"location":"tools/dojima-faas/transactiondetails/#params_3","title":"Params","text":"<p>Note</p> <p>Public address of the respective tokens were generated:</p> <ul> <li>Bitcoin</li> <li>Arweave</li> <li>Ethereum</li> <li>Solana </li> </ul> Parameter Description address Required: Public address of the user to which transactions history to be displayed. network Required: Default \u2018mainnet\u2019. Arweave doesn\u2019t have \u2018testnet\u2019 explorer to display transactions. offset Optional. Default 100. Number of transactions to be displayed per call. beforeHash Optional. Default null. Search list of txs backwards before hash untilHash Optional. Default null. Search list of txs until hash"},{"location":"tools/dojima-faas/transactiondetails/#example-request-and-response_3","title":"Example Request and Response","text":"REQUESTResponse <p>cURL Commands</p> <pre><code>    curl --location --request GET 'https://faas-test.dojima.network/dojima-faas/v1/txs/history/solana?address=DxehLnrWp8iP5ahoG413BD4azVrkgA8Pob4rXco3mpCS&amp;network=devnet' \\\n    --header 'X-API-KEY: *********************'\n</code></pre> <p>Java Script</p> <pre><code>  var myHeaders = new Headers();\n  myHeaders.append(\"X-API-KEY\", \"*********************\");\n\n  var requestOptions = {\n    method: 'GET',\n    headers: myHeaders,\n    redirect: 'follow'\n  };\n\n  fetch(\"https://faas-test.dojima.network/dojima-faas/v1/txs/history/solana?address=DxehLnrWp8iP5ahoG413BD4azVrkgA8Pob4rXco3mpCS&amp;network=devnet\", requestOptions)\n    .then(response =&gt; response.text())\n    .then(result =&gt; console.log(result))\n    .catch(error =&gt; console.log('error', error));\n</code></pre> <pre><code>{\n   \"txs\": [\n     {\n       \"transaction_hash\": \"PGgVXU6HCwtQf6td5niURcYtNHru4YWZgWBNBBS1pg2uUcSwcBEUFUTqmNaFbMCdbKfsqTPCwG7CHmKquoeREsH\",\n       \"block\": 150376165,\n       \"date\": \"25/07/2022\",\n       \"time\": \"14:17:52\"\n     },\n     {\n       \"transaction_hash\": \"2eYrMHzEHVtGf5XtCfvzi3NFNXA4o8tmH8UBUrE4pPT9VigWHtXo7ttDAbTWjJp3mDan7cuBW5BtCV2UD1Nzn684\",\n       \"block\": 149736491,\n       \"date\": \"22/07/2022\",\n       \"time\": \"18:51:56\"\n     },\n     {\n       \"transaction_hash\": \"2irwfmujx2BWsWEWfwcXwV3dZqoiYtn7HMNBF13z33QngNpF1JiifsE3Nuw6gJKxBbpERhf2WLpdg2ZfDE2EevU2\",\n       \"block\": 149428445,\n       \"date\": \"21/07/2022\",\n       \"time\": \"10:21:40\"\n     },\n     {\n       \"transaction_hash\": \"3ZAhtNmTtx4vXFYmPqKbVZrgHaydhrFPZ8TGFZvLfh9SMrooVyEtXVrADidgt7kHVFRZQtMctA4yqmz5kLRR5EDa\",\n       \"block\": 149317976,\n       \"date\": \"20/07/2022\",\n       \"time\": \"22:42:38\"\n     },\n     {\n       \"transaction_hash\": \"3Gof6XhyeqgEW3wYV7DZCixom4zmRn3n6idn95fHJtWV1EAi3zP2cWq7AfRvfRpkDMmbA1FGm3bf6mMC411Yhhy5\",\n       \"block\": 149260715,\n       \"date\": \"20/07/2022\",\n       \"time\": \"16:39:47\"\n     }\n   ]\n }\n</code></pre>"},{"location":"tools/dojima-faas/transactiondetails/#hash-data","title":"Hash data","text":"<p>Returns transaction details by hash based on respective token and network.</p>"},{"location":"tools/dojima-faas/transactiondetails/#get-arweave_1","title":"GET Arweave","text":"<pre><code>https://faas-test.dojima.network/dojima-faas/v1/tx/data/arweave?hash=3NDXWouOXjWCVAkdIbjXTw91SNVRljwHiMoR3IavEac&amp;network=mainnet\n</code></pre> <p>Returns transaction details by hash for arweave.</p>"},{"location":"tools/dojima-faas/transactiondetails/#headers_4","title":"HEADERS","text":"<p>Doesn\u2019t have one? Navigate to \u201cUser-&gt;Create user\u201d endpoint and get one. Note: Never share, disclouse or save \u2018apikey\u2019 publicly.</p> <p>Note</p> <p>Note: Never share, disclouse or save \u2018apikey\u2019 publicly.</p> Parameter Description X-API-KEY Required: Api Key of the user for endpoint to generate result"},{"location":"tools/dojima-faas/transactiondetails/#params_4","title":"Params","text":"Parameter Description hash Required. Transaction hash to display in detail about the transaction. network Required: Default \u2018mainnet\u2019. Arweave doesn\u2019t have \u2018testnet\u2019 explorer to display transactions."},{"location":"tools/dojima-faas/transactiondetails/#example-request-and-response_4","title":"Example Request and Response","text":"REQUESTResponse <p>cURL Commands</p> <pre><code>    curl --location --request GET 'https://faas-test.dojima.network/dojima-faas/v1/tx/data/arweave?hash=3NDXWouOXjWCVAkdIbjXTw91SNVRljwHiMoR3IavEac&amp;network=mainnet' \\\n    --header 'X-API-KEY: ******************'\n</code></pre> <p>Java Script</p> <pre><code>var myHeaders = new Headers();\nmyHeaders.append(\"X-API-KEY\", \"******************\");\n\nvar requestOptions = {\n  method: 'GET',\n  headers: myHeaders,\n  redirect: 'follow'\n};\n\nfetch(\"https://faas-test.dojima.network/dojima-faas/v1/tx/data/arweave?hash=3NDXWouOXjWCVAkdIbjXTw91SNVRljwHiMoR3IavEac&amp;network=mainnet\", requestOptions)\n  .then(response =&gt; response.text())\n  .then(result =&gt; console.log(result))\n  .catch(error =&gt; console.log('error', error));\n</code></pre> <pre><code>  {\n     \"transaction_hash\": \"3NDXWouOXjWCVAkdIbjXTw91SNVRljwHiMoR3IavEac\",\n     \"from\": \"1BmeoGRnPXOv2eyl5CnccIPBrD0axEPQBal3NuSJCvI\",\n     \"to\": \"MBB9dcPWUG_t75ezcBwt7u3C0vCyu4tuwxjstlCpvIE\",\n     \"value\": 12734.9,\n     \"gas_price\": \"0.000000862848\",\n     \"signature\": \"K61Z7EDckRRyxY_dRRd3cy_6P72fwCEkifl1QQp9cOxXmhSSMKJcIESwYM_6jFT-XEMVGqDWXTrG6sKRp4KhvietgTV0Bk09GSMMjtDZb7SFqW-uDo6ivL4UjV_9fFYqzWuD7QU5NQbZvNXHm-Lea6tQ6_Rod2nLMiBsazWoy7kV6JSQVP1hZeIcAthc4wPgUcolTqo7zQ2a9xV0V8ClsmaqzNorUaztdUghAKBXJWmipwO-W0xhWnQlXFmE_QvikO8OI2b3YvsaOMaVdMdtI4cvUlcXmYW0xZXbQ6sTt4K3b9mXUWg5CNWasBi_d_zGY8jo6uczn6JJsqjA5dc5rtIZdJk3iBOEKm_WTyHAC2Q8Zac6CVKwjOW9zZ63znqEX0RHbUHdT9TtFme14NaYjLH6oS_KT2mi3BoCy39JBcCiprmbsWjlaqVicoJKdhPebS4KlXx3PLyxPP9EfbhopQ3YO55lI6tVp37R4LvHnekgmebjpwAK7g-N_RTG3HX_qCAltaayVMdVpn0zaYo_rYSTcfNhlN5emAF4PyeyLaOEc-5dXUQoidKE29T-ijRPr95cDEX205rmd8tpHsWq1bDyqlVsyvWKgHjffj8KbPAWUvEfONj3GD2IsaHEvYn6KFPQ5UV-WN4lxOWWHnnEhHZxXzirDjhFjkC2dJ3MjRQ\"\n   }\n</code></pre>"},{"location":"tools/dojima-faas/transactiondetails/#get-bitcoin_1","title":"GET Bitcoin","text":"<pre><code>https://faas-test.dojima.network/dojima-faas/v1/tx/data/bitcoin?hash=40a9606c5b8a3375a345f110ac81685848f75ab4bd1896ce90383826eeecdd84&amp;network=testnet\n</code></pre> <p>Returns transaction details by hash for bitcoin.</p>"},{"location":"tools/dojima-faas/transactiondetails/#headers_5","title":"HEADERS","text":"<p>Doesn\u2019t have one? Navigate to \u201cUser-&gt;Create user\u201d endpoint and get one. Note: Never share, disclouse or save \u2018apikey\u2019 publicly.</p> <p>Note</p> <p>Note: Never share, disclouse or save \u2018apikey\u2019 publicly.</p> Parameter Description X-API-KEY Required: Api Key of the user for endpoint to generate result"},{"location":"tools/dojima-faas/transactiondetails/#params_5","title":"Params","text":"Parameter Description hash Required. Transaction hash to display in detail about the transaction. network Required: Default \u2018mainnet\u2019. Arweave doesn\u2019t have \u2018testnet\u2019 explorer to display transactions."},{"location":"tools/dojima-faas/transactiondetails/#example-request-and-response_5","title":"Example Request and Response","text":"REQUESTResponse <p>cURL Commands</p> <pre><code>curl --location --request GET 'https://faas-test.dojima.network/dojima-faas/v1/tx/data/bitcoin?hash=40a9606c5b8a3375a345f110ac81685848f75ab4bd1896ce90383826eeecdd84&amp;network=testnet' \\\n--header 'X-API-KEY: *******************'\n</code></pre> <p>Java Script</p> <pre><code>var myHeaders = new Headers();\nmyHeaders.append(\"X-API-KEY\", \"*******************\");\n\nvar requestOptions = {\n  method: 'GET',\n  headers: myHeaders,\n  redirect: 'follow'\n};\n\nfetch(\"https://faas-test.dojima.network/dojima-faas/v1/tx/data/bitcoin?hash=40a9606c5b8a3375a345f110ac81685848f75ab4bd1896ce90383826eeecdd84&amp;network=testnet\", requestOptions)\n  .then(response =&gt; response.text())\n  .then(result =&gt; console.log(result))\n  .catch(error =&gt; console.log('error', error));\n</code></pre> <pre><code> {\n   \"txid\": \"40a9606c5b8a3375a345f110ac81685848f75ab4bd1896ce90383826eeecdd84\",\n   \"size\": 245,\n   \"version\": 2,\n   \"locktime\": 0,\n   \"fee\": 0.00028386,\n   \"inputs\": [\n     {\n       \"coinbase\": false,\n       \"txid\": \"a10a458b4816dd38d5104db5b493519801faa56bfcb30cbcfc0afbe7f1851397\",\n       \"output\": 2,\n       \"sigscript\": \"\",\n       \"sequence\": 4294967295,\n       \"pkscript\": \"00143b8b9de28b699d8f3621bf0383fd617b65b84f0a\",\n       \"value\": 61755,\n       \"address\": \"tb1q8w9emc5tdxwc7d3phupc8ltp0djmsnc2ngxnpp\",\n       \"witness\": [\n         \"3044022030820c9664c5244a1e285aa1c77f485e7dfad9ff656ac05ec5cc98203c52d46602201eddb2f9f063f4611656dcee1c203fda42933dc7e6eb970355867da1c43f4a1701\",\n         \"025cfbe662e8c3e660094116f94d3020f30787c8252a62b32088464e65cf700e8c\"\n       ]\n     }\n   ],\n   \"outputs\": [\n     {\n       \"address\": \"tb1q8w9emc5tdxwc7d3phupc8ltp0djmsnc2ngxnpp\",\n       \"pkscript\": \"00143b8b9de28b699d8f3621bf0383fd617b65b84f0a\",\n       \"value\": 317,\n       \"spent\": false,\n       \"spender\": null\n     },\n     {\n       \"address\": null,\n       \"pkscript\": \"6a0c535741503a4254432e425443\",\n       \"value\": 0,\n       \"spent\": false,\n       \"spender\": null\n     },\n     {\n       \"address\": \"tb1q8w9emc5tdxwc7d3phupc8ltp0djmsnc2ngxnpp\",\n       \"pkscript\": \"00143b8b9de28b699d8f3621bf0383fd617b65b84f0a\",\n       \"value\": 33052,\n       \"spent\": false,\n       \"spender\": null\n     }\n   ],\n   \"block\": {\n     \"height\": 2252852,\n     \"position\": 3\n   },\n   \"deleted\": false,\n   \"timestamp\": \"Tue, 31 May 2022 14:49:29 GMT\",\n   \"rbf\": false,\n   \"weight\": 653,\n   \"from\": \"tb1q8w9emc5tdxwc7d3phupc8ltp0djmsnc2ngxnpp\",\n   \"fromValue\": 0.00061755,\n   \"to1\": \"tb1q8w9emc5tdxwc7d3phupc8ltp0djmsnc2ngxnpp\",\n   \"to1Value\": 0.00000317,\n   \"to2\": null,\n   \"to2Value\": 0\n }\n</code></pre>"},{"location":"tools/dojima-faas/transactiondetails/#get-solana_1","title":"GET Solana","text":"<pre><code>https://faas-test.dojima.network/dojima-faas/v1/tx/data/solana?hash=34RSHscH1t8vgfBjmrtaSbWwMb514ACX9wgXniq6FkjYU9dvqnYJxrMuhnbJWYpekQt1NJpHPo2yroFFmqTMUkFX&amp;network=devne\n</code></pre> <p>Returns transaction details by hash for solana.</p>"},{"location":"tools/dojima-faas/transactiondetails/#headers_6","title":"HEADERS","text":"<p>Doesn\u2019t have one? Navigate to \u201cUser-&gt;Create user\u201d endpoint and get one. Note: Never share, disclouse or save \u2018apikey\u2019 publicly.</p> <p>Note</p> <p>Note: Never share, disclouse or save \u2018apikey\u2019 publicly.</p> Parameter Description X-API-KEY Required: Api Key of the user for endpoint to generate result"},{"location":"tools/dojima-faas/transactiondetails/#params_6","title":"Params","text":"Parameter Description hash Required. Transaction hash to display in detail about the transaction. network Required: Default \u2018mainnet\u2019. Arweave doesn\u2019t have \u2018testnet\u2019 explorer to display transactions. state Optional. Default \u2018confirmed\u2019. Either \u2018confirmed\u2019 or \u2018finality\u2019\u2018"},{"location":"tools/dojima-faas/transactiondetails/#example-request-and-response_6","title":"Example Request and Response","text":"REQUESTResponse <p>cURL Commands</p> <pre><code> curl --location --request GET 'https://faas-test.dojima.network/dojima-faas/v1/tx/data/solana?hash=2dQaVetThxgW4v3qn2aPVa5cNQ21HgeMYHrSq7G2sxS4rFn25f9PpjjvUBdVzJdqWYbsMV7AY6x8M653DJeGdPuu&amp;network=devnet' \\\n --header 'X-API-KEY: **********************'\n</code></pre> <p>Java Script</p> <pre><code>var myHeaders = new Headers();\nmyHeaders.append(\"X-API-KEY\", \"**********************\");\n\nvar requestOptions = {\n  method: 'GET',\n  headers: myHeaders,\n  redirect: 'follow'\n};\n\nfetch(\"https://faas-test.dojima.network/dojima-faas/v1/tx/data/solana?hash=2dQaVetThxgW4v3qn2aPVa5cNQ21HgeMYHrSq7G2sxS4rFn25f9PpjjvUBdVzJdqWYbsMV7AY6x8M653DJeGdPuu&amp;network=devnet\", requestOptions)\n  .then(response =&gt; response.text())\n  .then(result =&gt; console.log(result))\n  .catch(error =&gt; console.log('error', error));\n</code></pre> <pre><code>   {\n     \"timeStamp\": 1654094563,\n     \"gasFee\": 0.000005,\n     \"amount\": 0.01,\n     \"status\": \"\",\n     \"block\": 138189622,\n     \"from\": \"DxehLnrWp8iP5ahoG413BD4azVrkgA8Pob4rXco3mpCS\",\n     \"to\": \"71RGPwytVSNgT9i5RJhwvt7mMSahqxEYFat43ijZ8hbU\",\n     \"recentBlockHash\": \"4dYWo3CgRGvjjxXgrgFo8wVYXRZuS8UCam5Ps7NM4BKg\",\n     \"instructionData\": \"3Bxs4NN8M2Yn4TLb\"\n   }\n</code></pre>"},{"location":"tools/wallet/","title":"Wallet Tools in Dojima Network","text":"<p>Dojima wallet lets you organise the layer1 tokens in one place with just one seed phrase. Wallet also provides latest prices, 24 hours statistics, blockchain info, transfer tokens, transaction history, variable gas rates for transactions. We are supporting Arweave, Bitcoin, Binance, Cosmos, Ethereum, Polkadot, Solana chains.Go to Dojima Wallet by clicking here.</p>"},{"location":"tools/wallet/#getting-started","title":"Getting Started","text":"<p>To begin using the Dojima wallet, you\u2019ll first need to install our wallet extension. Follow these steps:</p> <p>1. Visit the wallet page and link to \u201cConnect Wallet.\u201d</p> <p></p> <p>Info</p> <p>Download the appropriate version of the wallet extension for your web browser (Chrome, Firefox, etc.). </p> <p>2.  If you don\u2019t have a seed phrase already, click on \u201cGet Started\u201d to get one.</p> <p></p> <p>3. In the next step you will have to create a password</p> <p></p> <p>Info</p> <p>Make sure the password is a minimum of eight characters.</p> <p>Info</p> <p>This password is not saved on any server. Dojima Network will never save your passwords; this password will be on your local device, the one that you are using. The password is used to encrypt the seed phrase, which will be seen in the next step.</p> <p>4. In this step, you will receive your seed phrase, which is a collection of words, typically 12 or 24, that users can choose based on their interests. For improved security, a 24-word seed phrase is suggested.</p> <p> </p> <p> </p> <p>Warning</p> <p>Before you proceed, save it somewhere, preferably a text file, because next time you log in, you will need to upload the seed phrase.</p> <p>Info</p> <p>To make things easy, we created a text file for you. Just click on \u201cproceed\u201d to download </p> <p>Danger</p> <p>Never reveal your seed phrase.</p> <p>5. So in this step, You have to verify the seed phrase, so select the words in order from the seed phrase you copied earlier.</p> <p></p> <p>6.  Click on \u201cconfirm\u201d</p> <p> </p> <p>7. After installing the wallet extension, you\u2019ll need to log in to your account on the web. Just type the password, and you are good to go.</p> <p></p> <p>8. That\u2019s it. You are in your Dojima wallet now, and you can explore the dashboard.\u00a0</p> <p> </p>"},{"location":"tools/wallet/wallet-login/","title":"Wallet Login Guide for Dojima Network","text":"<p>To begin using the Dojima wallet, you\u2019ll first need to install our wallet extension.</p> <p>1. Visit the wallet page and link to \u201cConnect Wallet.\u201d</p> <p></p> <p>Info</p> <p>Download the appropriate version of the wallet extension for your web browser (Chrome, Firefox, etc.). </p> <p>2. To login, click on \u201cimport with seed phrase.\u201d</p> <p></p> <p>3. In this step, you can drag and drop your seed phrase or upload a text file.</p> <p>Tip</p> <p>If you have registered with Dojima Wallet or if you have a seed phrase from any other wallet, you can use that seed phrase to link with Dojima Wallet.</p> <p>Tip</p> <p>You can enter your seed phrase manually also, but it is suggested that you upload a text file to save time.</p> <p></p> <p>4. In this step, you have to create a password to encrypt the seed phrase that you just uploaded.</p> <p> </p> <p>Tip</p> <p>Dojima wallet will never save your passwords it will reset every time you log out. So new password every time you log in making it more secure.</p> <p>Tip</p> <p>The password must be at least eight characters long.</p> <p>5. After installing the wallet extension, you\u2019ll need to log in to your account on the web. Just type the password, and you are good to go.</p> <p></p> <p>6. That\u2019s it. You are in your Dojima wallet now, and you can explore the dashboard.\u00a0</p> <p> </p>"},{"location":"tools/wallet/wallet-swap/","title":"Wallet Swap Guide in Dojima Network","text":"<p>Users can swap any assets that are on connected chains and that have been added to the network. Users can swap from any connected asset to any other connected asset. They can also swap from any connected asset to DOJ.</p>"},{"location":"tools/wallet/wallet-swap/#follow-the-steps-to-perform-swap","title":"Follow the steps to perform Swap.","text":""},{"location":"tools/wallet/wallet-swap/#1-after-logging-into-wallet-navigate-to-the-swap-tab","title":"1.  After logging into Wallet, navigate to the Swap tab","text":""},{"location":"tools/wallet/wallet-swap/#2-choose-the-coin-you-want-to-swap-and-enter-the-necessary-amount-now-click-on-swap","title":"2.  Choose the coin you want to swap and enter the necessary amount. Now click on \u201cSwap.\u201d","text":""},{"location":"tools/wallet/wallet-swap/#3-enter-the-receipt-address-and-click-on-continue","title":"3.  Enter the receipt address and click on \u201cContinue.\u201d","text":""},{"location":"tools/wallet/wallet-swap/#4-verify-the-amount-and-click-on-continue","title":"4.  Verify the amount and click on \u201cContinue.\u201d","text":""},{"location":"tools/wallet/wallet-swap/#5-as-soon-as-you-click-on-continue-you-will-get-a-transaction-hash-which-can-be-used-to-check-the-status-of-the-swap-on-the-block-explorer","title":"5. As soon as you click on \u201cContinue\u201d, you will get a transaction hash, which can be used to check the status of the swap on the block explorer.\u201d","text":""},{"location":"validator/","title":"Validator Guide for Dojima Network","text":"Validator <p>Unlock the path to becoming a valued validator with our comprehensive documentation, empowering you to safeguard the integrity of our blockchain network.</p> Setup AWS <p>Step-by-step guide for configuring AWS infrastructure to become a reliable validator in our blockchain network.</p>"},{"location":"validator/hermesdeployment/deploying/","title":"Deploying Hermes on Dojima Network","text":"<p>Deploying a HermesNode and its associated services.</p>"},{"location":"validator/hermesdeployment/deploying/#deploy-hermesnode-services","title":"Deploy HermesNode services","text":"<p>Now you have a Kubernetes cluster ready to use, you can install the HermesNode services.</p> <p>Info</p> <p>Helm charts are the defacto and currently easiest and simple way to package and deploy Kubernetes application. The team created different Helm charts to help to deploy all the necessary services. Please retrieve the source files from the Git repository here to follow the instructions below: https://github.com/dojimanetwork/validator-cluster-launcher</p>"},{"location":"validator/hermesdeployment/deploying/#requirements","title":"Requirements","text":"<ul> <li>Running Kubernetes cluster</li> <li>Kubectl configured, ready and connected to running cluster</li> </ul> <p>Info</p> <p>If you came here from the Setup page, you are already good to go.</p>"},{"location":"validator/hermesdeployment/deploying/#steps","title":"Steps","text":"<p>Clone the <code>node-launcher</code> repo. All commands in this section are to be run inside of this repo.</p> <pre><code>git clone https://github.com/dojimanetwork/helm_charts\ncd node-launcher\ngit checkout master\n</code></pre>"},{"location":"validator/hermesdeployment/deploying/#install-helm-3","title":"Install Helm 3","text":"<p>Install Helm 3 if not already available on your current machine:</p> <pre><code>make helm\nmake helm-plugins\n</code></pre>"},{"location":"validator/hermesdeployment/deploying/#tools","title":"Tools","text":"DeployDestroy <p>To deploy all tools, metrics, logs management, Kubernetes Dashboard, run the command below.</p> <pre><code>make tools\n</code></pre> <p>To destroy all those resources run the command below.</p> <pre><code>make destroy-tools\n</code></pre> <p>If you are successful, you will see the following message:</p> <p></p> <p>If there are any errors, they are typically fixed by running the command again.</p>"},{"location":"validator/hermesdeployment/deploying/#deploy-hermesnode","title":"Deploy HermesNode","text":"<p>It is important to deploy the tools first before deploying the HermesNode services as some services will have metrics configuration that would fail and stop the HermesNode deployment.</p> <p>You have multiple commands available to deploy different configurations of HermesNode. You can deploy testnet or chaosnet/mainnet. The commands deploy the umbrella chart <code>hermesnode-stack</code> in the background in the Kubernetes namespace <code>hermesnode</code> (or <code>hermesnode-testnet</code> for testnet) by default.</p> <pre><code>make install\n</code></pre> <p>Info</p> <p>If you are intending to run all chain clients, bond in &amp; earn rewards, you want to choose \u201cValidator\u201d.</p> <p>Info</p> <p>Deploying a HermesNode will take 1 day for every 3 months of ledger history, since it will validate every block. HermesNodes are \u201cfull nodes\u201d, not light clients.</p> <p>If successful, you will see the following:</p> <p></p>"},{"location":"validator/hermesdeployment/deploying/#debugging","title":"Debugging","text":"<p>Info</p> <p>Set hermesnode to be your default namespace so you don\u2019t need to type -n hermesnode each time: kubectl config set-context \u2013current \u2013namespace=hermesnode</p> <p>Use the following useful commands to view and debug accordingly. You should see everything running and active. Logs can be retrieved to find errors:</p> <pre><code>kubectl get pods -n hermesnode\nkubectl get pods --all-namespaces\nkubectl logs -f &lt;pod&gt; -n hermesnode\n</code></pre> <p>Kubernetes should automatically restart any service, but you can force a restart by running:</p> <pre><code>kubectl delete pod &lt;pod&gt; -n hermesnode\n</code></pre> <p>Warning</p> <p>Note, to expedite syncing external chains, it is feasible to continually delete the pod that has the slow-syncing chain daemon (eg, binance-daemon-xxx). Killing it will automatically restart it with free resources and syncing is notably faster. You can check sync status by viewing logs for the client to find the synced chain tip and comparing it with the real-world blockheight, (\u201cxxx\u201d is your unique ID):</p> <pre><code>kubectl logs -f binance-daemon-xxx -n hermesnode\n</code></pre> <p>Info</p> <p>Get real-world blockheights on the external blockchain explorers, eg: https://testnet-explorer.binance.org/</p> <p>https://explorer.binance.org/</p>"},{"location":"validator/hermesdeployment/deploying/#chart-summary","title":"CHART SUMMARY","text":""},{"location":"validator/hermesdeployment/deploying/#hermesnode-full-stack-umbrella-chart","title":"HermesNode full stack umbrella chart","text":"<ul> <li>hermesnode: Umbrella chart packaging all services needed to run a fullnode or validator HermesNode.</li> </ul> <p>This should be the only chart used to run HermesNode stack unless you know what you are doing and want to run each chart separately (not recommended).</p> <p>HermesNode services:</p> <ul> <li>hermes-daemon: HermesNode daemon</li> <li>hermes-api: HermesNode API</li> <li>hermes-gateway: HermesNode gateway proxy to get a single IP address for multiple deployments</li> <li>narada: Narada service</li> </ul> <p>External services:</p> <ul> <li>binance-daemon: Binance fullnode daemon</li> <li>bitcoin-daemon: Bitcoin fullnode daemon</li> <li>ethereum-daemon: Ethereum fullnode daemon</li> <li>chain-daemon: as required for supported chains</li> </ul>"},{"location":"validator/hermesdeployment/deploying/#tools_1","title":"Tools","text":"<ul> <li>elastic: ELK stack, deperecated. Use elastic-operator chart</li> <li>elastic-operator: ELK stack using operator for logs management</li> <li>prometheus: Prometheus stack for metrics</li> <li>loki: Loki stack for logs</li> <li>kubernetes-dashboard: Kubernetes dashboard</li> </ul>"},{"location":"validator/hermesdeployment/cluster-launcher/overview/","title":"Cluster Launcher Overview","text":""},{"location":"validator/hermesdeployment/cluster-launcher/overview/#cluster-launcher","title":"Cluster Launcher","text":"<p>Deploying a HERMESNode with Kubernetes</p>"},{"location":"validator/hermesdeployment/cluster-launcher/overview/#deploy-a-kubernetes-cluster","title":"Deploy a Kubernetes cluster","text":"<p>In order to deploy all the different services and provide a high availability environment to operate your node, Kubernetes is the preferred scheduling platform. Any production-grade Kubernetes cluster can be used to run and deploy a HERMESNode. You need your Kubernetes provider to offer external load balancers services type features. Azure, Digital Ocean, GCE, OpenStack are compatible with external load balancers.</p> <p>Info</p> <p>Terraform is a type of domain-specific language (DSL) used to describe code infrastructure. It is designed to make it easier to create/destroy infrastructure hosted locally or by a provider.</p> <p>This Terraform deployment will deploy a Kubernetes cluster using your VPS provider credentials and EKS service. The cluster will have autoscaling capabilities, which means you don\u2019t have to deal with how many nodes you need to deploy to run your HERMESNode services.</p> <p>All the default configurations used in these instructions are for a production environment with enough resources to run your HERMESNode in good conditions</p> <p>Warning</p> <p>LINUX/MAC is the preferred method of setup.</p> <p>Windows should choose either:</p> <ol> <li>Deploy a HERMESNode from a Linux VPS.</li> <li>Use Windows Subsystem for Linux - https://docs.microsoft.com/en-us/windows/wsl/about</li> </ol>"},{"location":"validator/hermesdeployment/cluster-launcher/overview/#steps","title":"Steps","text":"<p>There are three important steps to getting your node set up, deployed and churned in.</p> <ol> <li>Setting up Cluster</li> <li>Deploying HERMESNode Services</li> </ol>"},{"location":"validator/hermesdeployment/cluster-launcher/overview/#repository-management","title":"Repository Management","text":"<p>Your repository should be organised as follows: <pre><code>./hermesnode-ops\n  |./cluster-launcher\n  |./node-launcher\n</code></pre> All of your set up commands are run in <code>cluster-launcher</code> and all of your deploying/joining/managing/leaving commands are run from <code>node-launcher</code></p>"},{"location":"validator/hermesdeployment/cluster-launcher/overview/#running-two-or-more-nodes","title":"Running Two or More Nodes","text":"<p>Danger</p> <p>To prevent a catastrophic mistake in handling multiple nodes, set them up on different machines, or use different user profiles on your machine, or in the least, use different repos:</p> <pre><code>./hermesnode-ops\n  |./cluster-launcher\n  |./node-launcher\n./hermesnode-ops2\n  |./cluster-launcher\n  |./node-launcher\n</code></pre> <p>All of your commands can now be run separately.</p> <p>Info</p> <p>It is heavily advised to not set up nodes on the same provider. Deploy 1 node on Azure, 1 node on Digital Ocean etc.</p>"},{"location":"validator/hermesdeployment/cluster-launcher/setup-aws/","title":"Setting Up AWS for Cluster Launcher","text":"<p>Setting up a Kubernetes Cluster with AWS</p>"},{"location":"validator/hermesdeployment/cluster-launcher/setup-aws/#deploy-a-kubernetes-cluster-in-aws-using-eks-service","title":"Deploy a Kubernetes cluster in AWS using EKS service.","text":""},{"location":"validator/hermesdeployment/cluster-launcher/setup-aws/#requirements","title":"Requirements","text":"<ol> <li>AWS account</li> <li>CLI and AWS credentials configured</li> <li>AWS IAM Authenticator</li> <li><code>kubectl</code></li> <li>wget (required for EKS module)</li> </ol> <p>Warning</p> <p>LINUX/MACI is preffered method of setup</p> <p>Windows should choose either</p> <ol> <li>Deploy a HermesNode from a Linux VPS. </li> <li>Use Windows Subsystem for Linux - https://docs.microsoft.com/en-us/windows/wsl/about</li> </ol>"},{"location":"validator/hermesdeployment/cluster-launcher/setup-aws/#steps","title":"Steps","text":"<p>Firstly, clone and enter the cluster-launcher repository (Currently This Repo Link is Private Not Accessible By Outside Origanization). All commands in this section are to be run inside this repo.</p> <pre><code>git clone https://github.com/dojimanetwork/validator-cluster-launcher\ncd cluster-launcher\n</code></pre> <p>Then install the terraform CLI:</p> LINUX/MAC <p>Install Terraform:</p> <pre><code>brew install terraform\n</code></pre>"},{"location":"validator/hermesdeployment/cluster-launcher/setup-aws/#aws-cli","title":"AWS CLI","text":"<p>In order for Terraform to run operations on your behalf, you must install and configure the AWS CLI tool. ****To install the AWS CLI, follow these instructions, or choose a package manager based on your operating system</p> LINUX/MAC <p>Use the package manager homebrew to install the AWS CLI.</p> <pre><code>```jsx\nbrew install awscli\naws configure\n```\n</code></pre> <p>Warning</p> <p>You will be asked for you Personal Access Token with read/write privileges (retrieve from API Panel from the GCP web console.) API -&gt; Tokens/Keys -&gt; Create Token. Make sure you handle your secrets securely!</p>"},{"location":"validator/hermesdeployment/cluster-launcher/setup-aws/#aws-iam-authenticator","title":"AWS IAM Authenticator","text":"<p>You also must install and configure the AWS IAM Authenticator tool. To install, follow these instructions, or choose a package manager based on your operating system.</p> LINUX/MAC <p>Use the package manager homebrew to install the AWS IAM Authenticator.</p> <pre><code>brew install aws-iam-authenticator\n</code></pre>"},{"location":"validator/hermesdeployment/cluster-launcher/setup-aws/#kubernetes-control-tool","title":"Kubernetes Control Tool","text":"<p>You must install and configure the Kubernetes CLI tool (kubectl). To install kubectl , follow these instructions, or choose a package manager based on your operating system.</p> <p>Use the package manager homebrew to install the AWS IAM Authenticator.</p> LINUX/MAC <p>Use the package manager homebrew to install kubectl.</p> <pre><code>brew install kubernetes-cli\n</code></pre>"},{"location":"validator/hermesdeployment/cluster-launcher/setup-aws/#wget-jq","title":"wget &amp;&amp; jq","text":"<p>You also need wget and jq, follow these instructions, or choose a package manager based on your operating system.</p> LINUX/MAC <p>Use the package manager homebrew to install wget and jq Note: You most likely have these installed already.</p> <pre><code>brew install wget\nbrew install jq\n</code></pre>"},{"location":"validator/hermesdeployment/cluster-launcher/setup-aws/#deploy-kubernetes-cluster","title":"Deploy Kubernetes Cluster","text":"<p>Use the commands below to deploy a DOKS cluster:</p> <pre><code>make aws\n</code></pre> <p>During the deploy, you will be asked to enter information about your cluster</p> <p></p> <ol> <li>Name</li> <li>AWS Region \u2013 see valid List of Regions</li> <li>Confirm <code>yes</code></li> </ol> <p></p> <p>Regions</p> <p></p> <p>Note: AWS EKS is not available in some regions</p> <p>or manually</p> <pre><code>cd aws/\nterraform init\nterraform plan # to see the plan\nterraform apply\n</code></pre> <p>Final success message: <code>Apply complete! Resources: 30 added, 0 changed, 0 destroyed</code>.</p> <p>Info</p> <p>If you are a returning node operator and you wish to use the same node name, the Cloudwatch log files from your previous session will block this step. You need to manually delete the logs from your console: Cloudwatch / Cloudwatch Logs / Log Groups -&gt; \u201cdelete\u201d</p> <p>Info</p> <p>Deploying a cluster takes ~10 minutes</p>"},{"location":"validator/hermesdeployment/cluster-launcher/setup-aws/#configure-kubectl","title":"CONFIGURE kubectl","text":"<p>This is done automatically during provisioning. To configure authentication from the command line, use the following command. It will get the access credentials for your cluster and automatically configure kubectl in case you need to to manually reconfigure kubectl.</p> <pre><code>make kubeconfig-aws\n</code></pre> <p>Or get your kubeconfig file manually:</p> <pre><code>(cd aws &amp;&amp; aws eks --region $(terraform output -raw region) update-kubeconfig --name $(terraform output -raw cluster_name))\n</code></pre> <p>To verify, run this, and check the status is \u201cReady\u201d:</p> <pre><code>kubectl version\nkubectl cluster-info\nkubectl get nodes\n</code></pre> <p>You are now ready to deploy a HermeNode.</p>"},{"location":"validator/hermesdeployment/cluster-launcher/setup-aws/#backups-optional","title":"BACKUPS (OPTIONAL)","text":"<p>Once your node is running, use the following command to automatically backup the Persistent Volumes for your Kubernetes cluster. This may help in recovering your node in the event of a disaster.</p> <p>Enable backups:</p> <pre><code>make aws-backups\n</code></pre> <p>Disable backups:</p> <pre><code>make aws-destroy-backups\n</code></pre>"},{"location":"validator/hermesdeployment/cluster-launcher/system-requirements/","title":"System Requirements for Cluster Launcher","text":"<p>The system requirements listed in this section are both for the Hermes node and the Dojima node.</p> <p>The minimum system requirements mean you can run the nodes but the setup is not future-proof.</p> <p>The recommended system requirements mean the nodes are future-proof. There is, however, no upper limit to future-proofing your nodes.</p> <p>You must always run the hermes node and the dojima node on separate machines.</p>"},{"location":"validator/hermesdeployment/cluster-launcher/system-requirements/#minimum-system-requirements","title":"Minimum system requirements","text":"<ul> <li>RAM: 32 GB</li> <li>CPU: 8-core</li> <li>Storage: 2.5 TB SSD</li> </ul> <p>Info</p> <p>For Amazon Web Services (AWS), the equivalent of the minimum requirements instances are, with unlimited credits selected:</p> <ul> <li> <p>For Hermes: c5.2xlarge</p> </li> <li> <p>For Dojima node: c5.4xlarge</p> </li> </ul>"},{"location":"validator/hermesdeployment/cluster-launcher/system-requirements/#recommended-system-requirements","title":"Recommended system requirements","text":"<ul> <li>RAM: 64 GB</li> <li>CPU: 16-core</li> <li>Storage: 5 TB SSD</li> <li>Bandwidth: 1 Gbit/s</li> </ul> <p>Info</p> <p>For Amazon Web Services (AWS), the equivalent of the recommended requirements instance is m5d.4xlarge.</p> <p>For OVH, the equivalent of the recommended requirements instance is infra-3.</p> <p>For network, expect 3-5 TB of data transferred per month.</p>"}]}